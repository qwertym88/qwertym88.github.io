<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>oneos体验（一）</title>
      <link href="/2023/09/02/oneos%E4%BD%93%E9%AA%8C%EF%BC%88%E4%B8%80%EF%BC%89/"/>
      <url>/2023/09/02/oneos%E4%BD%93%E9%AA%8C%EF%BC%88%E4%B8%80%EF%BC%89/</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>总体上讲，OneOS还是挺不错的。个人感觉当需要做一些综合性的项目，比如简单智能家居时会比较有优势，但更深入一些的就比较麻烦。归根结底，感觉应该是设计理念的原因，即设计的目的就是让写代码的可以从底层代码中解脱出来，只管调用封装好的接口就行，而不需要去了解具体是如何实现的，拿来能用就行，不能用就不管了。像智能家居类的项目就特别符合这种需求，本来每个做智能家居的与其把精力空耗在各个传感器怎么使用，还不如多捣鼓些更高层级的东西。只不过我挺好奇，裸oneos编译出来就快30kb了，真的不打算照顾一下穷哥们吗？</p><h2 id="创建项目"><a href="#创建项目" class="headerlink" title="创建项目"></a>创建项目</h2><ol><li>在/projects文件夹（或含有.config/Kconfig的文件夹下）运行oos project选择开发板</li><li>打开生成的工程文件，运行oos config配置内核</li><li><strong>在drivers-&gt;boot-&gt;cortex-m boot-&gt;board boot configuration配置flash和ram大小，否则可以正常下载但无法运行</strong></li><li>运行oos init -i keil生成keil工程</li></ol><img src="/2023/09/02/oneos体验（一）/1.png"><p>如上，stm32f103c8 Flash64KB，起始地址0x8000000，RAM 20KB，起始地址0x20000000，需要根据该信息修改成如上的样子。</p><h2 id="后续修改"><a href="#后续修改" class="headerlink" title="后续修改"></a>后续修改</h2><hr><ol><li>运行oos config配置组件</li><li>在\board\CubeMX_Config下修改.ioc，配置pwm、时钟等硬件信息</li><li>运行oos init -i keil将配置更新进工程文件中</li></ol><h2 id="延迟函数"><a href="#延迟函数" class="headerlink" title="延迟函数"></a>延迟函数</h2><p>阻塞延迟：os_clocksource_ndelay 纳秒延迟，精度 2ns</p><p>非阻塞延迟：os_task_msleep 微妙睡眠，至少 &gt; 10ms 才是准的，一个时间片 10ms</p><h2 id="clock-source-配置"><a href="#clock-source-配置" class="headerlink" title="clock source 配置"></a>clock source 配置</h2><hr><ol><li>driver-&gt;timer-&gt;cortex-m hardware timer config-&gt;systick for kernel tick/dwt for clocksource</li><li>.ioc文件不需要做任何修改</li><li>按照官方教程用tim软计时器没搞明白，还是用硬件计时器吧</li></ol><img src="/2023/09/02/oneos体验（一）/2.png"><h2 id="常见问题"><a href="#常见问题" class="headerlink" title="常见问题"></a>常见问题</h2><h3 id="编译报错：-no-space-in-execution-region-with-any-selector-matching-xxx-o"><a href="#编译报错：-no-space-in-execution-region-with-any-selector-matching-xxx-o" class="headerlink" title="编译报错：..no space in execution region with .any selector matching xxx.o"></a>编译报错：..no space in execution region with .any selector matching xxx.o</h3><p>爆flash了，看能砍多少砍多少吧。正常把它那些调试组件+随意几个基础组件加上就能到50kb</p><h3 id="运行报错：hard-fault-in-task-xxx"><a href="#运行报错：hard-fault-in-task-xxx" class="headerlink" title="运行报错：hard fault in task: xxx"></a>运行报错：hard fault in task: xxx</h3><p>还是爆flash了，动态申请内存失败。可以用show_task查看各个任务堆栈使用率，一般使用率调到40%差不多了。不过对于穷人，光是开启shell组件总代码编译出来就能有40kb。</p><h3 id="multiply-define-“aeibeerrno”"><a href="#multiply-define-“aeibeerrno”" class="headerlink" title="multiply define “aeibeerrno”"></a>multiply define “<strong>aeibe</strong>errno”</h3><p>与keil micro c兼容问题，直接修改oneos源码，把那部分注释掉就行（官方答复），至于有啥影响他也不知道，反正能用就行。</p><h3 id="pwm-gpio-iic-spi-can无法使用"><a href="#pwm-gpio-iic-spi-can无法使用" class="headerlink" title="pwm/gpio/iic/spi/can无法使用"></a>pwm/gpio/iic/spi/can无法使用</h3><p>oneos偷偷拿来用了。挺吐槽他这个设计理念的，主打的就一个偷偷的挪用，声张的不要，鬼子进村似的。注意查看无法正常使用的pwm/gpio是不是同时也是iic1,spi1,can1的引脚，是的话那就肯定是被挪用了。但具体是在哪个设置里用了呢，自己找去吧。但这可真是大工程，太难找了，像翻垃圾桶一样地翻，感觉好蠢。而且在device里面查看也不会有这些设备（因为cubemx没开启），但正常功能就是用不了。</p><h2 id="吐槽"><a href="#吐槽" class="headerlink" title="吐槽"></a>吐槽</h2><p>极致糟糕的oneos cube排版，比互联网黑话还意义不明的命名品味。以shell为例，它的配置分开在kernel、debug、drivers、component四个目录下，要不是用过我哪知道分的这么开。搜索功能固然好，但每个配置项的名字与它所掌管的功能还是关系不大。比方说我不开debug功能就不能用shell组件，shell组件输出串口选择在console选项下，这两个名字上都没和shell带半点关联。顺带一提，不开启debug但开启shell，shell的代码也会参与编译。</p><p>pwm驱动有问题。提供的api每次都会重新初始化pwm，但在例如舵机控制中并不希望如此。感觉纯粹是写这部分代码的人没考虑到这点，想省心省力少写几个接口。</p>]]></content>
      
      
      <categories>
          
          <category> 笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> stm32 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>esp32学习笔记（四）</title>
      <link href="/2022/07/31/esp32%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%EF%BC%88%E5%9B%9B%EF%BC%89/"/>
      <url>/2022/07/31/esp32%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%EF%BC%88%E5%9B%9B%EF%BC%89/</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>本篇为esp-now功能的讲解。回想前几天研究RainMaker平台的惨败和研究BLE的痛苦经历，相较而言这个就显得太简单了些。<br><a id="more"></a></p><h2 id="esp-now简介"><a href="#esp-now简介" class="headerlink" title="esp-now简介"></a>esp-now简介</h2><p>esp-now没记错的话是一种无连接的通讯方式，特点就是不需要连接、一个设备最多可以与20个设备通讯、单次最多发送250字节数据的一种临时通讯，最典型的应用就是帮助设备联网。比方说你有一个esp32需要连自家wifi，但事先不知道是多少，就可以用esp-now发送需要连接的wifi信息。想当初，我要搞一个智能家居的项目，当时就需要很多分模块和主模块之间进行信息传递。当时的想法是，在家正中间放一个中继器一样的东西，然后就可以把各个角落的传感器数据汇总发送到手机。考虑到每个传感器模块并不需要直接联网，而且只需要时不时发送少量数据，因此我便钦定esp-now为整个系统指定通讯方式。当然，我也不知道这样用规范不规范，总之有用就行。<br>要学的话直接看<a href="https://www.qutaojiao.com/23849.html" target="_blank" rel="noopener">这个</a>和<a href="https://demo-dijiudu.readthedocs.io/en/latest/api-reference/wifi/esp_now.html" target="_blank" rel="noopener">官方文档</a>。之所以觉得esp-now简单，是因为无论在esp32还是esp8266或其他，无论用Arduino框架还是IDF，要用的库函数长得一模一样。事实上对照着看教程和官方文档基本就能懂个七七八八，甚至不需要去翻看源码（虽然目前已经习惯这样做了）。如果不需要加密的话（我觉得真不需要，感觉没有实际需求），这个就更加简单了。<br>诚如官方文档，这个一共就3步，如果只需要接收而不用发送则省略第二步。</p><ol><li>初始化</li><li>添加目标设备</li><li>发送/接收数据<br>初始化如下：<figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 初始化 ESP-NOW</span></span><br><span class="line">WiFi.mode(WIFI_STA);</span><br><span class="line"><span class="keyword">if</span> (esp_now_init() != <span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line">    Serial.println(<span class="string">"Error initializing ESP-NOW"</span>);</span><br><span class="line">&#125;</span><br><span class="line">esp_now_register_send_cb(OnDataSent); <span class="comment">// 按需添加回调</span></span><br><span class="line">esp_now_register_recv_cb(OnDataRecv); <span class="comment">// 按需添加回调</span></span><br></pre></td></tr></table></figure></li></ol><p>如果只需要接收，那么只用再补充接收数据的回调就行。如果需要发送数据，发送的回调也是可加可不加的，不过还是建议加上。回调写法如下：<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 发送回调函数</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">OnDataSent</span><span class="params">(<span class="keyword">const</span> <span class="keyword">uint8_t</span> *peer_addr, <span class="keyword">esp_now_send_status_t</span> status)</span></span></span><br><span class="line"><span class="function"></span>&#123; <span class="comment">// peer_addr 发送目标的mac地址  status 状态</span></span><br><span class="line">    Serial.print(<span class="string">"Send status: "</span>);</span><br><span class="line">    Serial.println(status == ESP_NOW_SEND_SUCCESS ? <span class="string">"Delivery Success"</span> : <span class="string">"Delivery Fail"</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 数据接收回调函数</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">OnDataRecv</span><span class="params">(<span class="keyword">const</span> <span class="keyword">uint8_t</span> *mac_addr, <span class="keyword">const</span> <span class="keyword">uint8_t</span> *incomingData, <span class="keyword">int</span> len)</span></span></span><br><span class="line"><span class="function"></span>&#123; <span class="comment">// mac_addr 发送方的mac地址  incomingData 内存形式的数据  len 数据字节数</span></span><br><span class="line">    RecvData_t msg;</span><br><span class="line">    <span class="built_in">memcpy</span>(&amp;msg, incomingData, len);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">char</span> macStr[<span class="number">18</span>];</span><br><span class="line">    Serial.print(<span class="string">"Get Data from: "</span>);</span><br><span class="line">    <span class="built_in">snprintf</span>(macStr, <span class="keyword">sizeof</span>(macStr), <span class="string">"%02x:%02x:%02x:%02x:%02x:%02x"</span>,</span><br><span class="line">            mac_addr[<span class="number">0</span>], mac_addr[<span class="number">1</span>], mac_addr[<span class="number">2</span>], mac_addr[<span class="number">3</span>], mac_addr[<span class="number">4</span>], mac_addr[<span class="number">5</span>]);</span><br><span class="line">    Serial.println(macStr);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>这里我希望各位能明白<code>RecvData_t msg; memcpy(&amp;msg, incomingData, len);</code>这两句话是干啥的，之前ble的笔记里面好像也有写成这样的代码，当时没有细讲。感到陌生的主要原因还是平时刷题啊写作业啊都不会和内存打交道，导致一旦碰到一点点内存相关的就不明白了（我就是这样的）。这个得结合发送数据来讲。</p><p>发送数据之前，需要先添加目标设备。方法如下：<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">esp_now_peer_info_t</span> peerInfo;</span><br><span class="line"><span class="built_in">memcpy</span>(peerInfo.peer_addr, mac, <span class="number">6</span>);</span><br><span class="line">peerInfo.channel = <span class="number">0</span>;</span><br><span class="line">peerInfo.encrypt = <span class="literal">false</span>;</span><br><span class="line">peerInfo.ifidx = WIFI_IF_ST</span><br><span class="line"><span class="keyword">if</span> (esp_now_add_peer(&amp;peerInfo) != ESP_OK)</span><br><span class="line">&#123;</span><br><span class="line">    Serial.println(<span class="string">"Failed to add peer"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>这一段一点都不用改，照抄就行。channel = 0建议不要改，懒得折腾。encrypt = false建议不改，懒得折腾加密，何必嘛。具体是什么自己看esp_now_peer_info_t的注释。顺便提醒一点，esp_now.h里面还有如下的一些特别方便的函数（当时没注意看，以为没有，还是自己乱写的）。<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">esp_err_t</span> esp_now_del_peer(<span class="keyword">const</span> <span class="keyword">uint8_t</span> *peer_addr) <span class="comment">// delete</span></span><br><span class="line"><span class="keyword">esp_err_t</span> esp_now_mod_peer(<span class="keyword">const</span> <span class="keyword">esp_now_peer_info_t</span> *peer); <span class="comment">// modify</span></span><br><span class="line"><span class="keyword">esp_err_t</span> esp_now_get_peer(<span class="keyword">const</span> <span class="keyword">uint8_t</span> *peer_addr, <span class="keyword">esp_now_peer_info_t</span> *peer); <span class="comment">// 找到就放到传入的指针里</span></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">esp_now_is_peer_exist</span><span class="params">(<span class="keyword">const</span> <span class="keyword">uint8_t</span> *peer_addr)</span></span></span><br><span class="line"><span class="function">esp_err_t <span class="title">esp_now_get_peer_num</span><span class="params">(<span class="keyword">esp_now_peer_num_t</span> *num)</span> <span class="comment">// 获取设备总数</span></span></span><br></pre></td></tr></table></figure></p><p>接下来是发送数据。发送也很简单<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">SendData_t <span class="title">myData</span><span class="params">(&#123;aargs&#125;)</span></span>;</span><br><span class="line">esp_now_send(mac, (<span class="keyword">uint8_t</span> *)&amp;myData, <span class="keyword">sizeof</span>(myData));</span><br></pre></td></tr></table></figure></p><p>注意，发送方和接收方需要事先约定好一个共同的数据结构。也就是说，发送方的SendData_t就是接收方的RecvData_t，当然变量名随便乱取都可以。一般而言，为了一次发送多个数据，都是这样搞的：<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="keyword">int</span> a;</span><br><span class="line">    <span class="keyword">char</span> b;    </span><br><span class="line">    <span class="keyword">float</span> c;</span><br><span class="line">    ···</span><br><span class="line">&#125; SendData_t;</span><br></pre></td></tr></table></figure></p><p>注意，一定不要用string这种内存不固定的数据类型。如果要传字符串，这里有一个取巧的方法，我当时就是这么解决的。当时的实际需求是每个分设备要通过esp-now传两个标识符和一个长度不固定的json字符串（由于各个传感器需要测量的东西不同，于是统一以json字符串形式发送传感器数据）。于是我就写成了这样：<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> // 主机</span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="keyword">int</span> id;         <span class="comment">// 传入设备的ID</span></span><br><span class="line">    <span class="keyword">int</span> type;       <span class="comment">// 1 普通消息 2 其他消息</span></span><br><span class="line">    <span class="keyword">char</span> data[<span class="number">256</span>]; <span class="comment">// 保证一定大于250</span></span><br><span class="line">&#125; RecvData_t;       <span class="comment">//接收的数据类型</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> // 分传感器端</span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="keyword">int</span> id;         <span class="comment">// 本机的ID</span></span><br><span class="line">    <span class="keyword">int</span> type;       <span class="comment">// 1 普通消息 2 其他消息</span></span><br><span class="line">    <span class="keyword">char</span> data[<span class="number">230</span>]; <span class="comment">// 保证一定小于250</span></span><br><span class="line">&#125; SendMsg_t;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 发送数据时</span></span><br><span class="line">SendMsg_t msg;</span><br><span class="line">msg.id = ID;</span><br><span class="line">msg.type = type;</span><br><span class="line"><span class="built_in">memcpy</span>(msg.data, str.c_str(), str.size());</span><br><span class="line">esp_now_send(HostMacAdress, (<span class="keyword">uint8_t</span> *)&amp;msg, <span class="keyword">sizeof</span>(msg));</span><br><span class="line"><span class="comment">// 接收数据时</span></span><br><span class="line">RecvData_t msg;</span><br><span class="line"><span class="built_in">memcpy</span>(&amp;msg, incomingData, len); <span class="comment">// 直接这么写</span></span><br><span class="line"><span class="built_in">std</span>::<span class="built_in">string</span> json = msg.data;</span><br></pre></td></tr></table></figure></p><p>然后确保字符串长度不超过230就行（一般而言也不会吧）。</p><p>最后是接收数据。一接收到数据，就会调用esp_now_register_recv_cb设置的回调，在这里面处理接收到的数据就行。顺带提两点。一是接收和发送的回调是可以删除的，调用esp_now_unregister_recv_cb就行。二是如果需要对数据进行极大量的操作或需要延时，不要写在回调里面。应当尽量确保回调函数能快速结束。尤其是delay等操作，一定不要在回调里面写。事实上就实践而言，日常写不了那种过于复杂以至于没有用延时却在回调里面卡死了的代码。我当时在回调里面用stringstream处理超长字符串，还顺带各种类型转换和字串查找都没有问题。</p>]]></content>
      
      
      <categories>
          
          <category> 笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> esp32 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>esp32学习笔记（三）</title>
      <link href="/2022/07/30/esp32%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%EF%BC%88%E4%B8%89%EF%BC%89/"/>
      <url>/2022/07/30/esp32%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%EF%BC%88%E4%B8%89%EF%BC%89/</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>本篇紧接上一篇，写esp32作为ble client的使用方法。当然，同样涉及了特别多的知识，包括对之前的一些补充。只能说没想到这个东西竟会如此复杂，远远超出了我之前对它的预期。<br><a id="more"></a></p><h2 id="BLE-Client代码"><a href="#BLE-Client代码" class="headerlink" title="BLE Client代码"></a>BLE Client代码</h2><p>你别说，这个的代码还真少，基本找不到。唯一的参考就是官方提供的示例了。不过那个官方示例讲了等于是没讲，不要太指望它。经过我漫长的研究，我逐渐明白了这个示例的具体逻辑。不过在试图仿写的过程中踩了两个超级大坑，之后会提到。<br>要连接一个设备，一共需要以下三个步骤：</p><ol><li>扫描周边设备</li><li>连接指定设备</li><li>通讯</li></ol><h3 id="扫描"><a href="#扫描" class="headerlink" title="扫描"></a>扫描</h3><p>扫描部分单看还算简单，开始扫描就这么写：<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// setup</span></span><br><span class="line">BLEDevice::init(<span class="string">""</span>); <span class="comment">// 写名字也可以，无关紧要</span></span><br><span class="line">BLEScan *pScan = BLEDevice::getScan();</span><br><span class="line">pScan-&gt;setActiveScan(<span class="literal">true</span>);</span><br><span class="line">pScan-&gt;setAdvertisedDeviceCallbacks(<span class="keyword">new</span> MyAdvertisedDeviceCallbacks());</span><br><span class="line">pScan-&gt;start(<span class="number">30</span>); <span class="comment">// 单位：秒，自动结束</span></span><br></pre></td></tr></table></figure></p><p>其中，扫描方式分为两种，分别为<code>Active Scan</code>和<code>Passive Scan</code>。为了区分这两个，我们就得介绍一下广播（advertising）和扫描（scaning）之间的数据交换了。首先，广播的设备会发送两种性质的数据文件，一种叫Advertising Data，一个叫做Scan Response Data。下图就是一个典型的例子。<br><img src="/2022/07/30/esp32学习笔记（三）/1.jpg"><br>Advertising Data就是这个ble设备自动向外界发送的信息，其中最重要的就是图中所示的flag。它可以标识这个蓝牙设备是否可接入/可被扫描到。如何理解这一点？我们可以想一些实际生活中的例子。比如要用蓝牙实现“人机分离10m自动爆炸”，那么手机就是一个server，探测器就是一个client。实际需求中我们并不需要真正和这个探测器连接，所以flag设计成可被扫描/不可接入便非常的合理。不然每次你要用手机连接你的蓝牙耳机时，一扫描就会冒出这个探测器的蓝牙地址（电脑、手机检测的蓝牙设备都是默认筛除了那些不可接入的），看着也心烦。尤其是如果你家里有特别多的这种检测器，你肯定不想一开手机蓝牙就全自动连接上了。我这里因为要建立连接，所以这么设置了（否则不会被检测到的）。<br>顺带一提，Advertising Data事实上还可以发其他数据。不过没用。下面的才有用。<br>Scan Response Data就是标识为scanable的设备被扫描后，发送给做出扫描动作的设备的回应。一般而言，我们需要获取的最主要的信息就是被扫描出来的设备的名称。有的设备还会发送自己的service uuid用来告诉对方本机有哪些功能。事实上这很容易理解，我找人，你却连自己名字都不愿意告诉我，那我怎么找到你？因此，Advertising Data中的flag和这个的Local Name都是很重要的，一般都不能省略。<br><code>Active Scan</code>就是每次扫描都会收到Scan Response Data，而且貌似速度更快；<code>Passive Scan</code>就是不接收Scan Response Data。一般而言，我们都会用前者。<br>回想上一章我们用esp32，我们好像当作server的时候，好像并没有太注意advertise的内容，我们直接调用，程序自动就会设置好我们想要的。确实，作为一个server，不需要考虑这部分的内容（或者说相较于其本职，这显得无足轻重），程序自动就会设置为可连接，被扫描后就会发送自己的名字。但事实上我们也可以自己调整，比如说，我在Scan Response Data中加上service uuid，如下例：<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">BLEAdvertising *pAdvertising = BLEDevice::getAdvertising();</span><br><span class="line">pAdvertising-&gt;addServiceUUID(SERVICE_UUID);<span class="comment">// 添加uuid</span></span><br><span class="line"></span><br><span class="line">pServer-&gt;getAdvertising()-&gt;start(); <span class="comment">// 开始广播</span></span><br></pre></td></tr></table></figure></p><p>其他的怎么设置我就没有深入研究了，有需要自己看源码去。</p><p>回到代码，接下来我们需要设置回调。回调写法如下：<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyAdvertisedDeviceCallbacks</span> :</span> <span class="keyword">public</span> BLEAdvertisedDeviceCallbacks</span><br><span class="line">&#123;</span><br><span class="line">  <span class="function"><span class="keyword">void</span> <span class="title">onResult</span><span class="params">(BLEAdvertisedDevice device)</span></span></span><br><span class="line"><span class="function">  </span>&#123;</span><br><span class="line">    Serial.print(<span class="string">"BLE Advertised Device found: "</span>);</span><br><span class="line">    Serial.println(device.toString().c_str());      <span class="comment">// 打印扫描出的设备信息</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (device.getName() == <span class="string">"BLEClient"</span>)            <span class="comment">// 如果名字是我们要找的，就把信息记录下来</span></span><br><span class="line">    &#123;</span><br><span class="line">      device.getScan()-&gt;stop(); <span class="comment">// 停止扫描</span></span><br><span class="line">      foundDevice = <span class="literal">true</span>;</span><br><span class="line">      pDevice = <span class="keyword">new</span> BLEAdvertisedDevice(device);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></p><p>这里，BLEAdvertisedDevice记录了扫描出设备的信息，主要包括ip，Scan Response Data。其中，getName就是得到Scan Response Data里发送的name（如果不发送就是空，其他数据都同理）。这里注意，第一个大坑出现了。<strong>一定不能在这里连接蓝牙设备，不然这个程序压根不会运行，而且没有任何报错</strong>。怎么理解呢，或许是因为不能在回调里做太多事情吧。<strong>要连接server，只能在这里先记下‘已发现目标’，再到loop函数里面连接</strong>。</p><h3 id="连接"><a href="#连接" class="headerlink" title="连接"></a>连接</h3><p>连接事实上还简单。大概长这样：<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">loop</span><span class="params">()</span> <span class="comment">// 必须在loop函数里连接</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (foundDevice)</span><br><span class="line">  &#123;</span><br><span class="line">    connect(pDevice);</span><br><span class="line">    foundDevice = <span class="literal">false</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">connect</span><span class="params">(BLEAdvertisedDevice *target)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  pClient = BLEDevice::createClient();</span><br><span class="line">  <span class="comment">// pClient-&gt;setClientCallbacks(new MyClientCallback());</span></span><br><span class="line">  <span class="keyword">if</span> (pClient-&gt;connect(target))</span><br><span class="line">  &#123;</span><br><span class="line">    pClient-&gt;setMTU(<span class="number">517</span>);</span><br><span class="line">    getServiceId(pClient);</span><br><span class="line">    getCharaceristicId(pService);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>这里注意<code>pClient-&gt;setMTU(517);</code>这一句。强烈建议都写上，管他有没有用。MTU我不太了解，可能会说错。这个是单词通讯容许的最大字节数。比如在做write和notify操作时，就会需要这个。当时我手机做client、写手机app的时候，并没有太注意这一点。当时好像没有改这个，导致每次只能写20字节到esp32上（虽然知道整个项目完工，我都不需要一次发送20字节以上的数据，所以压根没有发现）。两个ble通讯，单次最大取两个的MTU最小值。之后的我不怎么清楚，以下都是我瞎猜的。write事实上不受影响，android和esp32都设置地特别大。但如果你想用notify来传递信息的话，esp32默认23字节，android也默认23（ios好像100多），你得把两个都改了。这个取值范围就是23到517。对于日常编程来讲，我觉得既然都不咋见的会有什么不良影响，不如无脑写上，免得万一用上了还找不出来是这里的问题。<br>然后是setClientCallbacks。一眼丁真，鉴定为典中典。不过好像貌似并没有什么用，尤其是那个onConnect。<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyClientCallback</span> :</span> <span class="keyword">public</span> BLEClientCallbacks</span><br><span class="line">&#123;</span><br><span class="line">  <span class="function"><span class="keyword">void</span> <span class="title">onConnect</span><span class="params">(BLEClient *pclient)</span></span></span><br><span class="line"><span class="function">  </span>&#123;</span><br><span class="line">    Serial.println(<span class="string">"Connect!"</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="function"><span class="keyword">void</span> <span class="title">onDisconnect</span><span class="params">(BLEClient *pclient)</span></span></span><br><span class="line"><span class="function">  </span>&#123;</span><br><span class="line">    Serial.println(<span class="string">"Disconnect!"</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></p><p>接下来是找service/characteristic uuid。这个样子找就对了。为了方便查看，专门独立出来。<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 用client找service，service里面找characteristic</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">getServiceId</span><span class="params">(BLEClient *client)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="comment">// 列举所有的service</span></span><br><span class="line">  <span class="comment">// std::map&lt;std::__cxx11::string, BLERemoteService *&gt; *serviceMap = client-&gt;getServices();</span></span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">auto</span> i : *(client-&gt;getServices()))</span><br><span class="line">  &#123;</span><br><span class="line">    Serial.println(i.second-&gt;toString().c_str());</span><br><span class="line">    <span class="comment">// 获取其中的某一个</span></span><br><span class="line">    <span class="keyword">if</span> (i.first == <span class="string">"4fafc201-1fb5-459e-8fcc-c5c9c331914b"</span>)</span><br><span class="line">    &#123;</span><br><span class="line">      pService = i.second;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 或直接 pService = client-&gt;getService(ServiceUUID); 点杀</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">getCharaceristicId</span><span class="params">(BLERemoteService *service)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (service == <span class="literal">nullptr</span>)</span><br><span class="line">  &#123;</span><br><span class="line">    Serial.println(<span class="string">"Targeted Service Not Found!"</span>);</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="built_in">std</span>::<span class="built_in">map</span>&lt;<span class="built_in">std</span>::__cxx11::<span class="built_in">string</span>, BLERemoteCharacteristic *&gt; *charaMap = service-&gt;getCharacteristics();</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">auto</span> i : *charaMap)</span><br><span class="line">  &#123;</span><br><span class="line">    Serial.println(i.second-&gt;toString().c_str());</span><br><span class="line">    <span class="keyword">if</span> (i.second-&gt;canRead()) <span class="comment">// 一个偷懒的方法</span></span><br><span class="line">      pReadChara = i.second;</span><br><span class="line">    <span class="keyword">if</span> (i.second-&gt;canNotify())</span><br><span class="line">      pNotifyChara = i.second;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 或直接 pReadChara = service-&gt;getCharacteristic(ReadCharacteristicUUID);</span></span><br><span class="line">  <span class="comment">// 总之找个合理的方式把几个特征值划分了就行</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h3 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h3><p>这里只讲notify。大概长这样：<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// loop</span></span><br><span class="line">pNotifyChara-&gt;registerForNotify(notifyCallback);</span><br><span class="line"></span><br><span class="line"><span class="comment">//global</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">notifyCallback</span><span class="params">(BLERemoteCharacteristic *pBLERemoteCharacteristic, <span class="keyword">uint8_t</span> *pData, <span class="keyword">size_t</span> length, <span class="keyword">bool</span> isNotify)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  Serial.print(<span class="string">"Notify callback for characteristic "</span>);</span><br><span class="line">  Serial.print(pBLERemoteCharacteristic-&gt;getUUID().toString().c_str());</span><br><span class="line">  Serial.print(<span class="string">" of data length "</span>);</span><br><span class="line">  Serial.println(length);</span><br><span class="line">  Serial.print(<span class="string">"data: "</span>);</span><br><span class="line">  Serial.write(pData, length);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>注意这里有一个小坑。pData是覆盖式的，不会清空。比如说你前一个是10字节的数据”abcdefghij”，下一次是6字节的”123456”，那么pData就会变成”123456ghij”。因此注意length的大小十分重要。不过如果你只是做个测试，就照着上面的写就行，效果非常好。</p><h2 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h2><p>第二个大坑出现了。我发现我不会用nRF Connect。<br>首先你要打开Configure GATT server，然后New GATT configeration，然后搞成这样。这就是你这个server的信息了。<br><img src="/2022/07/30/esp32学习笔记（三）/2.jpg"><br>然后在advertiser下编辑advertise所需的信息，大概如前文所示，重点是Advertising Data的flag和Scan Response Data的name。然后右上角铅笔编辑此设备蓝牙名称（默认的也可以，就是有点长）。弄完之后大概会长这样：<br><img src="/2022/07/30/esp32学习笔记（三）/3.jpg"><br>然后烧写代码，名字匹配就会自动连接。接下来就可以愉快地玩耍了。<br>完整版代码如下：<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;Arduino.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;BLEDevice.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">bool</span> foundDevice = <span class="literal">false</span>;</span><br><span class="line">BLEAdvertisedDevice *pDevice = <span class="literal">nullptr</span>;</span><br><span class="line"><span class="keyword">bool</span> CONNECTED = <span class="literal">false</span>;</span><br><span class="line">BLEClient *pClient;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">connect</span><span class="params">(BLEAdvertisedDevice *)</span></span>;</span><br><span class="line"></span><br><span class="line">BLERemoteService *pService = <span class="literal">nullptr</span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">getServiceId</span><span class="params">(BLEClient *)</span></span>;</span><br><span class="line"></span><br><span class="line">BLERemoteCharacteristic *pReadChara = <span class="literal">nullptr</span>;</span><br><span class="line">BLERemoteCharacteristic *pNotifyChara = <span class="literal">nullptr</span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">getCharaceristicId</span><span class="params">(BLERemoteService *)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyClientCallback</span> :</span> <span class="keyword">public</span> BLEClientCallbacks</span><br><span class="line">&#123;</span><br><span class="line">  <span class="function"><span class="keyword">void</span> <span class="title">onConnect</span><span class="params">(BLEClient *pclient)</span></span></span><br><span class="line"><span class="function">  </span>&#123;</span><br><span class="line">    CONNECTED = <span class="literal">true</span>;</span><br><span class="line">    Serial.println(<span class="string">"Connect!"</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="function"><span class="keyword">void</span> <span class="title">onDisconnect</span><span class="params">(BLEClient *pclient)</span></span></span><br><span class="line"><span class="function">  </span>&#123;</span><br><span class="line">    CONNECTED = <span class="literal">false</span>;</span><br><span class="line">    Serial.println(<span class="string">"Disconnect!"</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyAdvertisedDeviceCallbacks</span> :</span> <span class="keyword">public</span> BLEAdvertisedDeviceCallbacks</span><br><span class="line">&#123;</span><br><span class="line">  <span class="function"><span class="keyword">void</span> <span class="title">onResult</span><span class="params">(BLEAdvertisedDevice device)</span></span></span><br><span class="line"><span class="function">  </span>&#123;</span><br><span class="line">    Serial.print(<span class="string">"BLE Advertised Device found: "</span>);</span><br><span class="line">    Serial.println(device.toString().c_str());</span><br><span class="line">    <span class="keyword">if</span> (device.getName() == <span class="string">"BLEClient"</span>)</span><br><span class="line">    &#123;</span><br><span class="line">      device.getScan()-&gt;stop();</span><br><span class="line">      foundDevice = <span class="literal">true</span>;</span><br><span class="line">      pDevice = <span class="keyword">new</span> BLEAdvertisedDevice(device);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">connect</span><span class="params">(BLEAdvertisedDevice *target)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  pClient = BLEDevice::createClient();</span><br><span class="line">  pClient-&gt;setClientCallbacks(<span class="keyword">new</span> MyClientCallback());</span><br><span class="line">  <span class="keyword">if</span> (pClient-&gt;connect(target))</span><br><span class="line">  &#123;</span><br><span class="line">    pClient-&gt;setMTU(<span class="number">517</span>);</span><br><span class="line">    getServiceId(pClient);</span><br><span class="line">    getCharaceristicId(pService);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">getServiceId</span><span class="params">(BLEClient *client)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="comment">// 列举所有的service</span></span><br><span class="line">  <span class="built_in">std</span>::<span class="built_in">map</span>&lt;<span class="built_in">std</span>::__cxx11::<span class="built_in">string</span>, BLERemoteService *&gt; *serviceMap = client-&gt;getServices();</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">auto</span> i : *(client-&gt;getServices()))</span><br><span class="line">  &#123;</span><br><span class="line">    Serial.println(i.second-&gt;toString().c_str());</span><br><span class="line">    <span class="comment">// 获取其中的某一个</span></span><br><span class="line">    <span class="keyword">if</span> (i.first == <span class="string">"4fafc201-1fb5-459e-8fcc-c5c9c331914b"</span>)</span><br><span class="line">    &#123;</span><br><span class="line">      pService = i.second;</span><br><span class="line">      <span class="comment">// 或直接 pService = client-&gt;getService(ServiceUUID);</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">notifyCallback</span><span class="params">(BLERemoteCharacteristic *pBLERemoteCharacteristic, <span class="keyword">uint8_t</span> *pData, <span class="keyword">size_t</span> length, <span class="keyword">bool</span> isNotify)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  Serial.print(<span class="string">"Notify callback for characteristic "</span>);</span><br><span class="line">  Serial.print(pBLERemoteCharacteristic-&gt;getUUID().toString().c_str());</span><br><span class="line">  Serial.print(<span class="string">" of data length "</span>);</span><br><span class="line">  Serial.println(length);</span><br><span class="line">  Serial.print(<span class="string">"data: "</span>);</span><br><span class="line">  Serial.write(pData, length);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">getCharaceristicId</span><span class="params">(BLERemoteService *service)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (service == <span class="literal">nullptr</span>)</span><br><span class="line">  &#123;</span><br><span class="line">    Serial.println(<span class="string">"Targeted Service Not Found!"</span>);</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="built_in">std</span>::<span class="built_in">map</span>&lt;<span class="built_in">std</span>::__cxx11::<span class="built_in">string</span>, BLERemoteCharacteristic *&gt; *charaMap = service-&gt;getCharacteristics();</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">auto</span> i : *charaMap)</span><br><span class="line">  &#123;</span><br><span class="line">    Serial.println(i.second-&gt;toString().c_str());</span><br><span class="line">    <span class="keyword">if</span> (i.second-&gt;canRead())</span><br><span class="line">      pReadChara = i.second;</span><br><span class="line">    <span class="keyword">if</span> (i.second-&gt;canNotify())</span><br><span class="line">      pNotifyChara = i.second;</span><br><span class="line">    <span class="comment">// 或直接 pReadChara = service-&gt;getCharacteristic(ReadCharacteristicUUID);</span></span><br><span class="line">    <span class="comment">// 总之找个合理的方式把几个特征值划分了就行</span></span><br><span class="line">  &#125;</span><br><span class="line">  pNotifyChara-&gt;registerForNotify(notifyCallback);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">setup</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  Serial.begin(<span class="number">115200</span>);</span><br><span class="line"></span><br><span class="line">  BLEDevice::init(<span class="string">"esp32 server"</span>);</span><br><span class="line"></span><br><span class="line">  BLEScan *pScan = BLEDevice::getScan();</span><br><span class="line">  pScan-&gt;setActiveScan(<span class="literal">true</span>);</span><br><span class="line">  pScan-&gt;setAdvertisedDeviceCallbacks(<span class="keyword">new</span> MyAdvertisedDeviceCallbacks());</span><br><span class="line">  pScan-&gt;start(<span class="number">30</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">loop</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (foundDevice)</span><br><span class="line">  &#123;</span><br><span class="line">    connect(pDevice);</span><br><span class="line">    foundDevice = <span class="literal">false</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>]]></content>
      
      
      <categories>
          
          <category> 笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> esp32 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>esp32学习笔记（二）</title>
      <link href="/2022/07/29/esp32%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%EF%BC%88%E4%BA%8C%EF%BC%89/"/>
      <url>/2022/07/29/esp32%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%EF%BC%88%E4%BA%8C%EF%BC%89/</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>本篇主要讲esp32的BLE Server。原本以为自己之前搞过一次BLE，会挺简单的，结果还是那么复杂。最终被迫拆分成了两篇来写。<br><a id="more"></a></p><h2 id="因为很重要所以放在开头"><a href="#因为很重要所以放在开头" class="headerlink" title="因为很重要所以放在开头"></a>因为很重要所以放在开头</h2><p>platformIO要开启esp32 log，就在platformio.ini里面加上<code>build_flags = -DCORE_DEBUG_LEVEL=5</code>。这样esp32内部函数每执行一步都会发送信息，特别适合debug。唯一的缺点是信息量可能会有一点大。</p><h2 id="BLE介绍"><a href="#BLE介绍" class="headerlink" title="BLE介绍"></a>BLE介绍</h2><p>关于Server，service，characteristic都是什么的介绍，可以看<a href="https://www.youtube.com/watch?v=2mePPqiocUE" target="_blank" rel="noopener">这个视频</a>，感觉是讲得最好的一个。或者可以参考<a href="https://www.jianshu.com/p/535e6ec3571d" target="_blank" rel="noopener">这个</a>，也不错。<br>简单来讲，一般我们所用的蓝牙设备（如蓝牙耳机、蓝牙门锁）都是作为一个主机（Server），因为server模式更加常用，所以其资料也更加好找一些（相对而言）。<br>根据蓝牙协会的规定，一个设备要提供多个服务（service），每个服务里面有多个特征值（characteristic）。这个本意是方便设备知道哪个数据是用来干什么的，也就是做区分，但实际日常编程却基本体现不出来。服务和特征值有UUID，官方认证发布的UUID是可以显示出具体的值的，而民间自用的都没有。具体可以看下图。其中，UUID为0x1801和0x1800的就是esp32自带的、经过官方认证的UUID，同理，0x1800服务下面的每一个有名字的特征值的UUID也都是官方认证的。前四位为UUID对应的标识，这个可以在<a href="https://btprodspecificationrefs.blob.core.windows.net/assigned-values/16-bit%20UUID%20Numbers%20Document.pdf" target="_blank" rel="noopener">官方文档</a>里面查看。对照一查，确实那个0x1800表示”Generic Access”，那个0x2A00表示”Device Name”。诸如此类的还有很多。而我们自己生成的UUID就只能显示为”Unknown xxx”。<br><img src="/2022/07/29/esp32学习笔记（二）/1.jpg"><br>不过事实上我们也可以让自己的野生UUID拥有名字，当别人替身、用一模一样的就行了。不过好像同时出现会被正主给挤出去，不知道这背后有什么原因。所以还是建议用野生的就行，不要强求这个，没有意义。而且事实上这还有一个隐形的好处，之后会讲。</p><h2 id="BLE-Server代码"><a href="#BLE-Server代码" class="headerlink" title="BLE Server代码"></a>BLE Server代码</h2><p>一份标准程序如下：<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;Arduino.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;BLEDevice.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;BLEServer.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;BLEUtils.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;BLE2902.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 生成 UUID: https://www.uuidgenerator.net/</span></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">char</span> *SERVICE_UUID = <span class="string">"9a712029-4bd1-4b46-bbcc-07f61a4b3268"</span>; <span class="comment">// service UUID</span></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">char</span> *UUID_NOTIFY = <span class="string">"a9656b46-5075-47f3-afc9-122b05890910"</span>; <span class="comment">// 通知特征的 UUID</span></span><br><span class="line"></span><br><span class="line">BLEServer *pServer = <span class="literal">NULL</span>; <span class="comment">// BLEServer指针 pServer</span></span><br><span class="line">BLECharacteristic *pNotifyChara = <span class="literal">NULL</span>; <span class="comment">// BLECharacteristic指针</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">setup</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  Serial.begin(<span class="number">115200</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 1 */</span></span><br><span class="line">  <span class="comment">// 创建一个 BLE 设备</span></span><br><span class="line">  BLEDevice::init(<span class="string">"MY_ESP32"</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 2 */</span></span><br><span class="line">  <span class="comment">// 创建一个 BLE 服务</span></span><br><span class="line">  pServer = BLEDevice::createServer();</span><br><span class="line">  BLEService *pService = pServer-&gt;createService(SERVICE_UUID);</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 创建一个读和通知特征，供其他设备读取数据或接收通知 pReadChara-&gt;setValue() 设置值，供读取  notify()提醒订阅通知了的设备读取</span></span><br><span class="line">  <span class="comment">// indicate 特征 和 notify 一模一样，只不过前者有确认接收到提醒的握手行为</span></span><br><span class="line">  pNotifyChara = pService-&gt;createCharacteristic(UUID_NOTIFY, BLECharacteristic::PROPERTY_READ | BLECharacteristic::PROPERTY_NOTIFY);</span><br><span class="line">  <span class="comment">// 可以这样声明这个特征值有多个功能，例如这个又可以被读取，又可以发出通知</span></span><br><span class="line">  pNotifyChara-&gt;addDescriptor(<span class="keyword">new</span> BLE2902()); </span><br><span class="line">  <span class="comment">//可以是其他的值，2903什么的，不过一般建议就用2902，详见https://blog.csdn.net/chengdong1314/article/details/70167954</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 3 */</span></span><br><span class="line">  pService-&gt;start();                  <span class="comment">// 开始服务</span></span><br><span class="line">  pServer-&gt;getAdvertising()-&gt;start(); <span class="comment">// 开始广播</span></span><br><span class="line">  Serial.println(<span class="string">" Waiting for connection... "</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">loop</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>这可以说是最简代码了，拆看来看事实上也就3步：</p><ol><li>初始化</li><li>创建服务、特征值</li><li>开始使用</li></ol><p>不过，事实上还有很多可以拓展的地方。比如，我们可以设置服务层面的回调函数，如下：<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">...</span><br><span class="line"><span class="keyword">bool</span> CONNECTED = <span class="literal">false</span>;</span><br><span class="line"><span class="comment">// 标准写法，这么写就对了。常用的就这两个</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyServerCallbacks</span> :</span> <span class="keyword">public</span> BLEServerCallbacks</span><br><span class="line">&#123;</span><br><span class="line">  <span class="function"><span class="keyword">void</span> <span class="title">onConnect</span><span class="params">(BLEServer *pServer)</span> <span class="comment">// 连接成功</span></span></span><br><span class="line"><span class="function">  </span>&#123; <span class="comment">// do something</span></span><br><span class="line">    Serial.println(<span class="string">"Connected!"</span>);</span><br><span class="line">    CONNECTED = <span class="literal">true</span>;</span><br><span class="line">  &#125;;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">void</span> <span class="title">onDisconnect</span><span class="params">(BLEServer *pServer)</span> <span class="comment">// 断开连接</span></span></span><br><span class="line"><span class="function">  </span>&#123; <span class="comment">// do something</span></span><br><span class="line">    Serial.println(<span class="string">"Disconnected! Start Advertising..."</span>);</span><br><span class="line">    BLEDevice::startAdvertising();</span><br><span class="line">    CONNECTED = <span class="literal">false</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line">...</span><br><span class="line"><span class="comment">//setup()</span></span><br><span class="line">...</span><br><span class="line"><span class="comment">// 创建一个 BLE 服务</span></span><br><span class="line">  pServer = BLEDevice::createServer();</span><br><span class="line">  BLEService *pService = pServer-&gt;createService(SERVICE_UUID);</span><br><span class="line">  pServer-&gt;setCallbacks(<span class="keyword">new</span> MyServerCallbacks()); <span class="comment">//设置回调</span></span><br></pre></td></tr></table></figure></p><p>还可以设置特征值的回调函数：<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">...</span><br><span class="line"><span class="keyword">bool</span> CONNECTED = <span class="literal">false</span>;</span><br><span class="line"><span class="comment">// 标准写法，这么写就对了。常用的就这两个</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyCallbacks</span> :</span> <span class="keyword">public</span> BLECharacteristicCallbacks</span><br><span class="line">&#123;</span><br><span class="line">  <span class="function"><span class="keyword">void</span> <span class="title">onWrite</span><span class="params">(BLECharacteristic *pCharacteristic)</span> <span class="comment">// 写入值后</span></span></span><br><span class="line"><span class="function">  </span>&#123;</span><br><span class="line">    <span class="built_in">std</span>::<span class="built_in">string</span> inputValue = pCharacteristic-&gt;getValue(); <span class="comment">//接收信息</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="function"><span class="keyword">void</span> <span class="title">onRead</span><span class="params">(BLECharacteristic *pCharacteristic)</span> <span class="comment">// 被读取后</span></span></span><br><span class="line"><span class="function">  </span>&#123;</span><br><span class="line">    Serial.println(<span class="string">"Readed!"</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line">...</span><br><span class="line"><span class="comment">//setup()</span></span><br><span class="line">...</span><br><span class="line"><span class="comment">// 创建写特征值，用于写入数据</span></span><br><span class="line">  BLECharacteristic *pRxCharacteristic = pService-&gt;createCharacteristic(UUID_RX, BLECharacteristic::PROPERTY_WRITE);</span><br><span class="line">  pRxCharacteristic-&gt;setCallbacks(<span class="keyword">new</span> MyCallbacks()); <span class="comment">//设置回调</span></span><br></pre></td></tr></table></figure></p><p>不过这里有一个坑，虽然<code>BLECharacteristicCallbacks</code>里面定义了onNotify之类的，但建议不要用，因为这真的就是个坑。之后介绍notify原理的时候会知道，如果从机没有订阅这个通知的话，通知是不会被发送出去的，但这个回调仍然会被调用，而且没有任何标志说明是否发送。所以，真正有用且需要的只有onWrite而已。</p><p>以下为完整版代码：<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;Arduino.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;BLEDevice.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;BLEServer.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;BLEUtils.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;BLE2902.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 生成 UUID: https://www.uuidgenerator.net/</span></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">char</span> *SERVICE_UUID = <span class="string">"9a712029-4bd1-4b46-bbcc-07f61a4b3268"</span>; <span class="comment">// service UUID</span></span><br><span class="line"><span class="comment">// const char *UUID_RX = "7d63c7ee-a016-451c-bbdf-8a41463e2f8d";      // 读特征的 UUID</span></span><br><span class="line"><span class="comment">// const char *UUID_TX = "882eae86-c1e0-497b-8941-e081faaa68c5";      // 写特征的 UUID</span></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">char</span> *UUID_NOTIFY = <span class="string">"a9656b46-5075-47f3-afc9-122b05890910"</span>; <span class="comment">// 通知特征的 UUID</span></span><br><span class="line"></span><br><span class="line">BLEServer *pServer = <span class="literal">NULL</span>; <span class="comment">// BLEServer指针 pServer</span></span><br><span class="line"><span class="comment">// BLECharacteristic *pReadChara = NULL;   // BLECharacteristic指针</span></span><br><span class="line">BLECharacteristic *pNotifyChara = <span class="literal">NULL</span>; <span class="comment">// BLECharacteristic指针</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">bool</span> CONNECTED = <span class="literal">false</span>;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyServerCallbacks</span> :</span> <span class="keyword">public</span> BLEServerCallbacks</span><br><span class="line">&#123;</span><br><span class="line">  <span class="function"><span class="keyword">void</span> <span class="title">onConnect</span><span class="params">(BLEServer *pServer)</span></span></span><br><span class="line"><span class="function">  </span>&#123;</span><br><span class="line">    Serial.println(<span class="string">"Connected!"</span>);</span><br><span class="line">    CONNECTED = <span class="literal">true</span>;</span><br><span class="line">  &#125;;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">void</span> <span class="title">onDisconnect</span><span class="params">(BLEServer *pServer)</span></span></span><br><span class="line"><span class="function">  </span>&#123;</span><br><span class="line">    Serial.println(<span class="string">"Disconnected! Start Advertising..."</span>);</span><br><span class="line">    BLEDevice::startAdvertising();</span><br><span class="line">    CONNECTED = <span class="literal">false</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyCallbacks</span> :</span> <span class="keyword">public</span> BLECharacteristicCallbacks</span><br><span class="line">&#123;</span><br><span class="line">  <span class="function"><span class="keyword">void</span> <span class="title">onWrite</span><span class="params">(BLECharacteristic *pCharacteristic)</span></span></span><br><span class="line"><span class="function">  </span>&#123;</span><br><span class="line">    <span class="built_in">std</span>::<span class="built_in">string</span> inputValue = pCharacteristic-&gt;getValue(); <span class="comment">//接收的信息</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">setup</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  Serial.begin(<span class="number">115200</span>);</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 创建一个 BLE 设备</span></span><br><span class="line">  BLEDevice::init(<span class="string">"MY_ESP32"</span>);</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 创建一个 BLE 服务</span></span><br><span class="line">  pServer = BLEDevice::createServer();</span><br><span class="line">  pServer-&gt;setCallbacks(<span class="keyword">new</span> MyServerCallbacks()); <span class="comment">//设置回调</span></span><br><span class="line">  BLEService *pService = pServer-&gt;createService(SERVICE_UUID);</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 创建一个读和通知特征，供其他设备读取数据或接收通知 pReadChara-&gt;setValue() 设置值，供读取  notify()提醒订阅通知了的设备读取</span></span><br><span class="line">  <span class="comment">// indicate 特征 和 notify 一模一样，只不过前者有确认接收到提醒的握手行为</span></span><br><span class="line">  pNotifyChara = pService-&gt;createCharacteristic(UUID_NOTIFY, BLECharacteristic::PROPERTY_READ | BLECharacteristic::PROPERTY_NOTIFY);</span><br><span class="line">  pNotifyChara-&gt;addDescriptor(<span class="keyword">new</span> BLE2902()); <span class="comment">//可以是其他的值，2903什么的，详见https://blog.csdn.net/chengdong1314/article/details/70167954</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">// pReadChara = pService-&gt;createCharacteristic(UUID_NOTIFY, BLECharacteristic::PROPERTY_READ);</span></span><br><span class="line">  <span class="comment">// pReadChara-&gt;addDescriptor(new BLE2902());</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">// 创建写特征值，用于其他设备传入数据</span></span><br><span class="line">  <span class="comment">// BLECharacteristic *pRxCharacteristic = pService-&gt;createCharacteristic(UUID_RX, BLECharacteristic::PROPERTY_WRITE);</span></span><br><span class="line">  <span class="comment">// pRxCharacteristic-&gt;setCallbacks(new MyCallbacks()); //设置回调</span></span><br><span class="line"></span><br><span class="line">  pService-&gt;start();                  <span class="comment">// 开始服务</span></span><br><span class="line"></span><br><span class="line">  BLEAdvertising *pAdvertising = BLEDevice::getAdvertising();</span><br><span class="line">  pAdvertising-&gt;addServiceUUID(SERVICE_UUID);<span class="comment">// 添加广播内容</span></span><br><span class="line">  pServer-&gt;getAdvertising()-&gt;start(); <span class="comment">// 开始广播</span></span><br><span class="line">  Serial.println(<span class="string">" Waiting for connection... "</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">loop</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="comment">// do something</span></span><br><span class="line">  pReadChara-&gt;setValue(<span class="string">"Read Characteristic"</span>);  <span class="comment">// 写入数据</span></span><br><span class="line"></span><br><span class="line">  pNotifyChara-&gt;setValue(<span class="string">"NOTIFY"</span>);</span><br><span class="line">  pNotifyChara-&gt;notify();                       <span class="comment">// 发送通知</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>server接收到的数据就是MyCallbacks::onWrite里面的inputValue。默认是C string类型的<code>std::string</code>，和Arduino String的<code>String</code>是不同的两个东西。就我个人觉得，还得是<code>std::string</code>好用，尤其是当你想玩一些骚操作的时候。我记得我之前一个智能家居的项目，需要esp32向手机传输各个传感器接收到的值。于是我就把所有需要传的弄成一个json字符串，每个分模块传一部分json，主模块拼接在一起，再发给手机。那是我第一次再esp32上面用stringstream，简直爽到不行。不过，如果你还是想用Arduino String的话，这里有一个简单的转换方法，足以应付大多数情况：<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">String ArduinoString = CString.c_str(); </span><br><span class="line"><span class="built_in">std</span>::<span class="built_in">string</span> CString  = ArduinoString.c_str();</span><br></pre></td></tr></table></figure></p><h2 id="从另一个角度看问题"><a href="#从另一个角度看问题" class="headerlink" title="从另一个角度看问题"></a>从另一个角度看问题</h2><p>之所以对于BLE Server感到心虚，主要原因其实在于不知道对方应该怎么接收。这里详细解说一下。<br>就平时写代码测试而言，<a href="https://github.com/NordicSemiconductor/Android-nRF-Connect/releases" target="_blank" rel="noopener">nRF_Connect</a>是个非常不错的工具。前面的那张图就来自于这个。使用方式挺简单的，一看就会了。主要是当你从手机上看到你的蓝牙设备名称，还能看见自己设置的service、characteristic，还可以订阅通知、读取数据、发送数据，就会感到极其心安。<br>我的上一个项目需要esp32和android手机通过蓝牙联系。手机app层面使用的是Angular+Ionic的组合，走的web app的路线。在涉及蓝牙时，用的是<a href="https://github.com/don/cordova-plugin-ble-central" target="_blank" rel="noopener">cordova-plugin-ble-central</a>，感觉还挺好用的。事实上要用的话，光看github上的api介绍就懂个七七八八了。这里重点对其Peripheral Data及其后的部分进行解析。<br>手机需要做的第一步，就是扫描所有蓝牙设备。Angular的代码大概会长成这个样子：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 下拉刷新，开始扫描</span></span><br><span class="line">doRefresh(event) &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'Scanning for Bluetooth LE Devices'</span>);</span><br><span class="line">  <span class="keyword">this</span>.devices = []; <span class="comment">// 接收到的数据，重点是其中的id和name两项</span></span><br><span class="line">  <span class="comment">// 扫描</span></span><br><span class="line">  <span class="keyword">this</span>.myble.scan([], <span class="number">5</span>).subscribe(             <span class="comment">// Promise</span></span><br><span class="line">    device =&gt; <span class="keyword">this</span>.onDeviceDiscovered(device),  <span class="comment">// 成功，则在网页上显示</span></span><br><span class="line">    error =&gt; <span class="keyword">this</span>.scanError(error)              <span class="comment">// 失败，报错</span></span><br><span class="line">  );</span><br><span class="line">  setTimeout(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">    event.target.complete();</span><br><span class="line">  &#125;, <span class="number">5000</span>);</span><br><span class="line">&#125;</span><br><span class="line">onDeviceDiscovered(device) &#123;</span><br><span class="line">  <span class="comment">// 渲染页面</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">async</span> scanError(error) &#123;</span><br><span class="line">  <span class="comment">// 弹窗报错</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">async</span> click(id: string, <span class="attr">name</span>: string)&#123;</span><br><span class="line">  <span class="comment">// 点击对应元素，下方提示是否连接</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">async</span> connectASave(id: string, <span class="attr">name</span>: string)&#123;</span><br><span class="line">  <span class="comment">// 确认连接</span></span><br><span class="line">  <span class="keyword">const</span> loading = <span class="keyword">await</span> <span class="keyword">this</span>.loadCtrl.create(&#123;</span><br><span class="line">    message: <span class="string">'Please wait for connection...'</span>,</span><br><span class="line">  &#125;);</span><br><span class="line">  <span class="keyword">await</span> loading.present();</span><br><span class="line">  <span class="keyword">await</span> <span class="keyword">this</span>.ble.connect(id);</span><br><span class="line">  <span class="keyword">await</span> loading.dismiss();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>其中，scan方法每发现一个设备，就会获取一个叫Peripheral Data的东西，大概长下面这样。我就把所有都存成一个数组this.devices，页面就根据这个来渲染，点击其中的一项后就把对应的name和id传递给后台，记录这个设备名下次自动连接，然后连接这个id就可以了。然后页面元素的顺序是按照信号强度，即rssi的值来排列的。同时，为了排除干扰，没有显示无名的设备（事实上一般都会扫描出来特别多没有名字的设备的，多的时候能有大概20来个）。<br><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">"name"</span>: <span class="string">"ESP32"</span>,</span><br><span class="line">    <span class="attr">"id"</span>: <span class="string">"20:FF:D0:FF:D1:C0"</span>,</span><br><span class="line">    <span class="attr">"advertising"</span>: [<span class="number">2</span>,<span class="number">1</span>,<span class="number">6</span>,<span class="number">3</span>,<span class="number">3</span>,<span class="number">15</span>,<span class="number">24</span>,<span class="number">8</span>,<span class="number">9</span>,<span class="number">66</span>,<span class="number">97</span>,<span class="number">116</span>,<span class="number">116</span>,<span class="number">101</span>,<span class="number">114</span>,<span class="number">121</span>],</span><br><span class="line">    <span class="attr">"rssi"</span>: <span class="number">-55</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>连接上设备后，会传来新的Peripheral Data，大概长这样：<br><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">"name"</span>: <span class="string">"MY_ESP32"</span>,</span><br><span class="line">      <span class="attr">"id"</span>: <span class="string">"58:BF:25:83:8B:F6"</span>,</span><br><span class="line">      <span class="attr">"advertising"</span>: &#123;&#125;,</span><br><span class="line">      <span class="attr">"rssi"</span>: <span class="number">-70</span>,</span><br><span class="line">      <span class="attr">"services"</span>: [</span><br><span class="line">        <span class="string">"1801"</span>,</span><br><span class="line">        <span class="string">"1800"</span>,</span><br><span class="line">        <span class="string">"9a712029-4bd1-4b46-bbcc-07f61a4b3268"</span></span><br><span class="line">      ],</span><br><span class="line">      <span class="attr">"characteristics"</span>: [</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">"service"</span>: <span class="string">"1801"</span>,</span><br><span class="line">          <span class="attr">"characteristic"</span>: <span class="string">"2a05"</span>,</span><br><span class="line">          <span class="attr">"properties"</span>: [</span><br><span class="line">            <span class="string">"Indicate"</span></span><br><span class="line">          ],</span><br><span class="line">          <span class="attr">"descriptors"</span>: [</span><br><span class="line">            &#123;</span><br><span class="line">              <span class="attr">"uuid"</span>: <span class="string">"2902"</span></span><br><span class="line">            &#125;</span><br><span class="line">          ]</span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">"service"</span>: <span class="string">"1800"</span>,</span><br><span class="line">          <span class="attr">"characteristic"</span>: <span class="string">"2a00"</span>,</span><br><span class="line">          <span class="attr">"properties"</span>: [</span><br><span class="line">            <span class="string">"Read"</span></span><br><span class="line">          ]</span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">"service"</span>: <span class="string">"1800"</span>,</span><br><span class="line">          <span class="attr">"characteristic"</span>: <span class="string">"2a01"</span>,</span><br><span class="line">          <span class="attr">"properties"</span>: [</span><br><span class="line">            <span class="string">"Read"</span></span><br><span class="line">          ]</span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">"service"</span>: <span class="string">"1800"</span>,</span><br><span class="line">          <span class="attr">"characteristic"</span>: <span class="string">"2aa6"</span>,</span><br><span class="line">          <span class="attr">"properties"</span>: [</span><br><span class="line">            <span class="string">"Read"</span></span><br><span class="line">          ]</span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">"service"</span>: <span class="string">"9a712029-4bd1-4b46-bbcc-07f61a4b3268"</span>,</span><br><span class="line">          <span class="attr">"characteristic"</span>: <span class="string">"882eae86-c1e0-497b-8941-e081faaa68c5"</span>,</span><br><span class="line">          <span class="attr">"properties"</span>: [</span><br><span class="line">            <span class="string">"Read"</span></span><br><span class="line">          ],</span><br><span class="line">          <span class="attr">"descriptors"</span>: [</span><br><span class="line">            &#123;</span><br><span class="line">              <span class="attr">"uuid"</span>: <span class="string">"2902"</span></span><br><span class="line">            &#125;</span><br><span class="line">          ]</span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">"service"</span>: <span class="string">"9a712029-4bd1-4b46-bbcc-07f61a4b3268"</span>,</span><br><span class="line">          <span class="attr">"characteristic"</span>: <span class="string">"a9656b46-5075-47f3-afc9-122b05890910"</span>,</span><br><span class="line">          <span class="attr">"properties"</span>: [</span><br><span class="line">            <span class="string">"Notify"</span></span><br><span class="line">          ],</span><br><span class="line">          <span class="attr">"descriptors"</span>: [</span><br><span class="line">            &#123;</span><br><span class="line">              <span class="attr">"uuid"</span>: <span class="string">"2902"</span></span><br><span class="line">            &#125;</span><br><span class="line">          ]</span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">"service"</span>: <span class="string">"9a712029-4bd1-4b46-bbcc-07f61a4b3268"</span>,</span><br><span class="line">          <span class="attr">"characteristic"</span>: <span class="string">"7d63c7ee-a016-451c-bbdf-8a41463e2f8d"</span>,</span><br><span class="line">          <span class="attr">"properties"</span>: [</span><br><span class="line">            <span class="string">"Write"</span></span><br><span class="line">          ]</span><br><span class="line">        &#125;</span><br><span class="line">      ]</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></p><p>1800和1801以及其对应的特征值就是前文说过的，esp自带的官方认证的uuid，可以读取设备信息。事实上简单研究一下这个json就很容易看出如何获取有用的东西了。首先，在service里面，找到与众不同的自定义uuid，然后遍历characteristic每一项，找到其中service uuid 为我们自定义的那几个，记录其characteristic uuid和properties属性。然后对应各个的属性，调用cordova-plugin-ble-central中的read、write、start/stopNotification就可以了。具体在Angular中长成这个样子：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">async</span> connect(id: string)&#123;</span><br><span class="line">    <span class="keyword">this</span>.ble.connect(id).subscribe(<span class="function">(<span class="params">peripheralData</span>)=&gt;</span>&#123;  <span class="comment">// Promise success</span></span><br><span class="line">      <span class="keyword">this</span>.getServiceID(peripheralData.services);</span><br><span class="line">      <span class="keyword">this</span>.getCharacteristicID(peripheralData.characteristics);</span><br><span class="line"></span><br><span class="line">      <span class="keyword">this</span>.startLiveUpdate();</span><br><span class="line">      <span class="keyword">this</span>.read();</span><br><span class="line"></span><br><span class="line">      <span class="keyword">this</span>.refreshDevice();</span><br><span class="line">    &#125;,(error)=&gt;&#123;                                        <span class="comment">// error</span></span><br><span class="line">      <span class="built_in">console</span>.log(<span class="string">'Connect error\n'</span>);</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="built_in">JSON</span>.stringify(error,<span class="literal">null</span>,<span class="number">2</span>));</span><br><span class="line">      <span class="keyword">this</span>.connectStatus = <span class="number">0</span>;</span><br><span class="line">      <span class="keyword">this</span>.connectName = <span class="string">'Goodby!'</span>;</span><br><span class="line">    &#125;,()=&gt;&#123;                                             <span class="comment">// finally</span></span><br><span class="line">      <span class="built_in">console</span>.log(<span class="string">'Connect call complete!!!'</span>);</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  getServiceID(data)&#123;</span><br><span class="line">    <span class="keyword">this</span>.serviceID = data.find(<span class="function">(<span class="params">i</span>)=&gt;</span>&#123; <span class="comment">// 小技巧，自定义的uuid一般都特别长，所以就找那个长的</span></span><br><span class="line">      <span class="keyword">if</span>(i.length &gt; <span class="number">10</span>)&#123;<span class="keyword">return</span> <span class="literal">true</span>;&#125;</span><br><span class="line">    &#125;);</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'serviceID '</span> + <span class="keyword">this</span>.serviceID);</span><br><span class="line">  &#125;</span><br><span class="line">  getCharacteristicID(data)&#123;</span><br><span class="line">    data.forEach(<span class="function">(<span class="params">i</span>) =&gt;</span> &#123; <span class="comment">// 记录读、写、通知特征值</span></span><br><span class="line">      <span class="keyword">if</span>(i.service === <span class="keyword">this</span>.serviceID)&#123;</span><br><span class="line">        <span class="keyword">if</span>(i.properties.includes(<span class="string">'Read'</span>))&#123;</span><br><span class="line">          <span class="keyword">this</span>.readCharacteristicID = i.characteristic;</span><br><span class="line">          <span class="built_in">console</span>.log(<span class="string">'ReadID '</span> + <span class="keyword">this</span>.readCharacteristicID);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(i.properties.includes(<span class="string">'Write'</span>))&#123;</span><br><span class="line">          <span class="keyword">this</span>.writeCharacteristicID = i.characteristic;</span><br><span class="line">          <span class="built_in">console</span>.log(<span class="string">'WriteID '</span> + <span class="keyword">this</span>.writeCharacteristicID);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(i.properties.includes(<span class="string">'Notify'</span>))&#123;</span><br><span class="line">          <span class="keyword">this</span>.notifyCharacteristicID = i.characteristic;</span><br><span class="line">          <span class="built_in">console</span>.log(<span class="string">'NotifyID '</span> + <span class="keyword">this</span>.notifyCharacteristicID);</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;</span><br><span class="line">  read()&#123; <span class="comment">// 读，注意类型转换</span></span><br><span class="line">    <span class="comment">// 传入的数据是所谓的ArrayBuffer，事实上就是C++的字符串在内存中的形式</span></span><br><span class="line">    <span class="keyword">this</span>.ble.read(<span class="keyword">this</span>.deviceID,<span class="keyword">this</span>.serviceID,<span class="keyword">this</span>.readCharacteristicID).then(<span class="function">(<span class="params">raw</span>)=&gt;</span>&#123;</span><br><span class="line">      <span class="keyword">const</span> data = <span class="built_in">JSON</span>.parse(<span class="keyword">this</span>.handleInput(raw));</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="string">'Read : '</span> + <span class="built_in">JSON</span>.stringify(data,<span class="literal">null</span>,<span class="number">2</span>));</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;</span><br><span class="line">  write(data: string)&#123; <span class="comment">// 写，注意需要转换</span></span><br><span class="line">    <span class="keyword">this</span>.ble.write(<span class="keyword">this</span>.deviceID,<span class="keyword">this</span>.serviceID,<span class="keyword">this</span>.writeCharacteristicID,<span class="keyword">this</span>.stringToBytes(data)).then(<span class="function"><span class="params">()</span>=&gt;</span>&#123;</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="string">'Write '</span> + data + <span class="string">'succeed!'</span>);</span><br><span class="line">    &#125;,()=&gt;&#123;</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="string">'Write '</span> + data + <span class="string">'failed!'</span>);</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;</span><br><span class="line">   handleInput(raw): string&#123;</span><br><span class="line">    <span class="keyword">const</span> str = <span class="keyword">this</span>.bytesToString(raw);</span><br><span class="line">    <span class="comment">/* 处理字符串 */</span></span><br><span class="line">    <span class="keyword">return</span> str;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 两个辅助函数</span></span><br><span class="line">  <span class="comment">// ASCII only</span></span><br><span class="line">  stringToBytes(str: string) &#123;</span><br><span class="line">    <span class="keyword">const</span> array = <span class="keyword">new</span> <span class="built_in">Uint8Array</span>(str.length);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>, l = str.length; i &lt; l; i++) &#123;</span><br><span class="line">        array[i] = str.charCodeAt(i);</span><br><span class="line">     &#125;</span><br><span class="line">     <span class="keyword">return</span> array.buffer;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// ASCII only</span></span><br><span class="line">   bytesToString(buffer) &#123;</span><br><span class="line">     <span class="keyword">return</span> <span class="built_in">String</span>.fromCharCode.apply(<span class="literal">null</span>, <span class="keyword">new</span> <span class="built_in">Uint8Array</span>(buffer));</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure></p><p>于是这样，我们就可以愉快地通过手机app与esp32互相交换数据了。<br>这里还有几处小细节。一是在Android手机上，<strong>notify只能接收20byte的数据</strong>，因此<strong>一定不要想着利用notify来发送信息</strong>。正确的做法应该是同时设置为notify和read，每一次需要发送数据到手机上时先发送notify（尽管可能只发了前20字节，不重要），告知手机需要读取值，然后手机在通过read方法读取这个值。<br>二是别惦记着你那中文了。就用标准ascii，给自己减轻一下负担不好吗？谁爱用谁自己折磨自己去。<br>第三，如果手机没有订阅蓝牙设备的通知（对应为没有调用startNotification），蓝牙设备事实上并不会真的发送通知，目的是为了节省能耗。<em>但前文说的onNotify方法会被调用，因此前文就说过，不要用这个</em><br>第四，你可能会想，如果我和写手机app的并不认识，我又一下子设计了不止一个服务/特征值，他怎么知道我哪个是用来干嘛的呢，即使知道又怎么找到需要的呢？这就体现了官方的uuid的好处。如上，为1800的uuid就代表设备信息，类比于404就代表not found一样。通过这一个统一的代号，对方很容易看出你哪个是干啥的。但事实上我们也可以这样设计：把我们随机生成的uuid前八位改成和代号对应的一样，比如说00001800-xxxxx，这样不也达到了类似的作用吗？写手机app的那个还是记录每一个长得离谱的uuid，然后根据前八位分类，岂不美哉。<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 假如需要实时更新某个数据，Angular代码大概会这么写</span></span><br><span class="line">startLiveUpdate()&#123; </span><br><span class="line">  <span class="comment">// 这里的raw和其他两个方法的有点不一样，read等都就只是ArrayBuffer，这个由两部分组成</span></span><br><span class="line">  <span class="comment">// raw[0] ArrayBuffer  raw[1] 累计发送次数</span></span><br><span class="line">  <span class="keyword">this</span>.ble.startNotification(<span class="keyword">this</span>.deviceID,<span class="keyword">this</span>.serviceID,<span class="keyword">this</span>.notifyCharacteristicID).subscribe(<span class="function">(<span class="params">raw</span>)=&gt;</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'Notification '</span> + raw[<span class="number">1</span>] + <span class="string">': '</span> + <span class="keyword">this</span>.bytesToString(raw[<span class="number">0</span>]));</span><br><span class="line">    <span class="keyword">this</span>.read();</span><br><span class="line">  &#125;,(error)=&gt;&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'Notification Error: '</span> + <span class="built_in">JSON</span>.stringify(error));</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h2 id="论如何优雅地使用BLE"><a href="#论如何优雅地使用BLE" class="headerlink" title="论如何优雅地使用BLE"></a>论如何优雅地使用BLE</h2><p>这里直接上当时的项目代码。把原有的那么多花里胡哨的打包了一下，如果还是搞智能家居相似的需求的话，这个就够用了。<br><figure class="highlight h"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> once</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;Arduino.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;BLEDevice.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;BLEServer.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;BLEUtils.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;BLE2902.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="keyword">namespace</span> BLE</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">extern</span> <span class="keyword">bool</span> CONNECTED;</span><br><span class="line">    <span class="keyword">extern</span> <span class="keyword">bool</span> LOG;</span><br><span class="line">    <span class="function"><span class="keyword">extern</span> <span class="title">void</span> <span class="params">(*InputCallback)</span><span class="params">(<span class="built_in">std</span>::<span class="built_in">string</span>)</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">extern</span> <span class="title">void</span> <span class="params">(*ConnectedCallback)</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">init</span><span class="params">()</span></span>;                                      <span class="comment">//初始化，先调用setInputCallback后再调用这个</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">setInputCallback</span><span class="params">(<span class="keyword">void</span> (*func)(<span class="built_in">std</span>::<span class="built_in">string</span>))</span></span>; <span class="comment">// 设置接收信息后要干什么</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">setConnectedCallback</span><span class="params">(<span class="keyword">void</span> (*func)())</span></span>;        <span class="comment">// 设置连接后干什么，主要用于及时更新数据</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">update</span><span class="params">(<span class="built_in">std</span>::<span class="built_in">string</span>)</span></span>;                         <span class="comment">// 更新数据</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">notification</span><span class="params">(<span class="built_in">std</span>::<span class="built_in">string</span>)</span></span>;                   <span class="comment">// 发送通知</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"BLE.h"</span></span></span><br><span class="line"><span class="keyword">namespace</span> BLE</span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">// 生成 UUID: https://www.uuidgenerator.net/</span></span><br><span class="line">    <span class="keyword">const</span> <span class="keyword">char</span> *SERVICE_UUID = <span class="string">"9a712029-4bd1-4b46-bbcc-07f61a4b3268"</span>; <span class="comment">// service UUID</span></span><br><span class="line">    <span class="keyword">const</span> <span class="keyword">char</span> *UUID_RX = <span class="string">"7d63c7ee-a016-451c-bbdf-8a41463e2f8d"</span>;      <span class="comment">// 读特征的 UUID</span></span><br><span class="line">    <span class="keyword">const</span> <span class="keyword">char</span> *UUID_TX = <span class="string">"882eae86-c1e0-497b-8941-e081faaa68c5"</span>;      <span class="comment">// 写特征的 UUID</span></span><br><span class="line">    <span class="keyword">const</span> <span class="keyword">char</span> *UUID_NOTIFY = <span class="string">"a9656b46-5075-47f3-afc9-122b05890910"</span>;  <span class="comment">// 通知特征的 UUID</span></span><br><span class="line"></span><br><span class="line">    BLEServer *pServer = <span class="literal">NULL</span>;              <span class="comment">// BLEServer指针 pServer</span></span><br><span class="line">    BLECharacteristic *pReadChara = <span class="literal">NULL</span>;   <span class="comment">// BLECharacteristic指针 用来实现live load部分</span></span><br><span class="line">    BLECharacteristic *pNotifyChara = <span class="literal">NULL</span>; <span class="comment">// BLECharacteristic指针 用来实现通知部分</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">bool</span> CONNECTED = <span class="literal">false</span>; <span class="comment">//本次连接状态</span></span><br><span class="line">    <span class="keyword">bool</span> LOG = <span class="literal">true</span>;        <span class="comment">// 是否打印日志</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">void</span> (*InputCallback)(<span class="built_in">std</span>::<span class="built_in">string</span>) = <span class="literal">NULL</span>;</span><br><span class="line">    <span class="keyword">void</span> (*ConnectedCallback)() = <span class="literal">NULL</span>;</span><br><span class="line"></span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">MyServerCallbacks</span> :</span> <span class="keyword">public</span> BLEServerCallbacks</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="function"><span class="keyword">void</span> <span class="title">onConnect</span><span class="params">(BLEServer *pServer)</span></span></span><br><span class="line"><span class="function">        </span>&#123;</span><br><span class="line">            CONNECTED = <span class="literal">true</span>;</span><br><span class="line">            <span class="keyword">if</span> (LOG)</span><br><span class="line">                Serial.println(<span class="string">"Connected!"</span>);</span><br><span class="line">            <span class="keyword">if</span> (ConnectedCallback != <span class="literal">NULL</span>)</span><br><span class="line">                (*ConnectedCallback)();</span><br><span class="line">        &#125;;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">void</span> <span class="title">onDisconnect</span><span class="params">(BLEServer *pServer)</span></span></span><br><span class="line"><span class="function">        </span>&#123;</span><br><span class="line">            CONNECTED = <span class="literal">false</span>;</span><br><span class="line">            <span class="keyword">if</span> (LOG)</span><br><span class="line">                Serial.println(<span class="string">"Disconnected! Start Advertising..."</span>);</span><br><span class="line">            BLEDevice::startAdvertising();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">MyCallbacks</span> :</span> <span class="keyword">public</span> BLECharacteristicCallbacks</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="function"><span class="keyword">void</span> <span class="title">onWrite</span><span class="params">(BLECharacteristic *pCharacteristic)</span></span></span><br><span class="line"><span class="function">        </span>&#123;</span><br><span class="line">            <span class="built_in">std</span>::<span class="built_in">string</span> inputValue = pCharacteristic-&gt;getValue(); <span class="comment">//接收信息</span></span><br><span class="line"></span><br><span class="line">            <span class="comment">// P.S 这么搞纯粹是因为Serial.println(inputValue);会报错</span></span><br><span class="line">            <span class="keyword">if</span> (inputValue.length() &gt; <span class="number">0</span>)</span><br><span class="line">            &#123; <span class="comment">//向串口输出收到的值</span></span><br><span class="line">                <span class="keyword">if</span> (BLE::LOG)</span><br><span class="line">                &#123;</span><br><span class="line">                    Serial.print(<span class="string">"Input: "</span>);</span><br><span class="line">                    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; inputValue.length(); i++)</span><br><span class="line">                        Serial.print(inputValue[i]);</span><br><span class="line">                    Serial.println();</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="comment">///////////////////////////////////////////</span></span><br><span class="line">                <span class="comment">/*</span></span><br><span class="line"><span class="comment">                  写处理接收到inputValue后要干什么</span></span><br><span class="line"><span class="comment">                */</span></span><br><span class="line">                <span class="keyword">if</span> (BLE::InputCallback != <span class="literal">NULL</span>)</span><br><span class="line">                &#123;</span><br><span class="line">                    (*BLE::InputCallback)(inputValue);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">init</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="comment">// 创建一个 BLE 设备</span></span><br><span class="line">        BLEDevice::init(<span class="string">"MY_ESP32"</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 创建一个 BLE 服务</span></span><br><span class="line">        pServer = BLEDevice::createServer();</span><br><span class="line">        pServer-&gt;setCallbacks(<span class="keyword">new</span> MyServerCallbacks()); <span class="comment">//设置回调</span></span><br><span class="line">        BLEService *pService = pServer-&gt;createService(SERVICE_UUID);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 创建一个读和通知特征，供其他设备读取数据或接收通知 pReadChara-&gt;setValue() 设置值，供读取  notify()提醒订阅通知了的设备读取</span></span><br><span class="line">        <span class="comment">// indicate 特征 和 notify 一模一样，只不过前者有确认接收到提醒的握手行为</span></span><br><span class="line">        pReadChara = pService-&gt;createCharacteristic(UUID_TX, BLECharacteristic::PROPERTY_READ);</span><br><span class="line">        pReadChara-&gt;addDescriptor(<span class="keyword">new</span> BLE2902()); <span class="comment">//可以是其他的值，2903什么的，详见https://blog.csdn.net/chengdong1314/article/details/70167954</span></span><br><span class="line"></span><br><span class="line">        pNotifyChara = pService-&gt;createCharacteristic(UUID_NOTIFY, BLECharacteristic::PROPERTY_NOTIFY);</span><br><span class="line">        pNotifyChara-&gt;addDescriptor(<span class="keyword">new</span> BLE2902());</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 创建写特征值，用于写入数据</span></span><br><span class="line">        BLECharacteristic *pRxCharacteristic = pService-&gt;createCharacteristic(UUID_RX, BLECharacteristic::PROPERTY_WRITE);</span><br><span class="line">        pRxCharacteristic-&gt;setCallbacks(<span class="keyword">new</span> MyCallbacks()); <span class="comment">//设置回调</span></span><br><span class="line"></span><br><span class="line">        pService-&gt;start();                  <span class="comment">// 开始服务</span></span><br><span class="line">        pServer-&gt;getAdvertising()-&gt;start(); <span class="comment">// 开始广播</span></span><br><span class="line">        Serial.println(<span class="string">" Waiting for connection... "</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">setInputCallback</span><span class="params">(<span class="keyword">void</span> (*func)(<span class="built_in">std</span>::<span class="built_in">string</span>))</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        InputCallback = func;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">setConnectedCallback</span><span class="params">(<span class="keyword">void</span> (*func)())</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        ConnectedCallback = func;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">update</span><span class="params">(<span class="built_in">std</span>::<span class="built_in">string</span> data)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        pReadChara-&gt;setValue(data);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">notification</span><span class="params">(<span class="built_in">std</span>::<span class="built_in">string</span> msg)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        pNotifyChara-&gt;setValue(msg);</span><br><span class="line">        pNotifyChara-&gt;notify();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>样例1：发送数据<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"BLE.h"</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">// setup</span></span><br><span class="line">BLE::init();</span><br><span class="line">BLE::LOG = <span class="literal">false</span>;</span><br><span class="line"><span class="comment">// loop</span></span><br><span class="line"><span class="keyword">if</span>(BLE::CONNECTED)&#123;</span><br><span class="line">    BLE::update(msg); <span class="comment">// 更新数据</span></span><br><span class="line">    BLE::notification(<span class="string">"1"</span>); <span class="comment">// 提醒手机更新数据 </span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>样例2：实际需求：初次连接后需要发送验证信息，需要接收并处理手机发来的数据<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"BLE.h"</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">onConnect</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="comment">// 验证</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">onDataRecieve</span><span class="params">(<span class="built_in">std</span>::<span class="built_in">string</span>)</span></span>&#123;</span><br><span class="line">    <span class="comment">// 处理发送过来的字符串</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// setup</span></span><br><span class="line">BLE::init();</span><br><span class="line">setConnectedCallback(onConnect);</span><br><span class="line">setInputCallback(onDataRecieve);</span><br><span class="line"><span class="comment">// loop</span></span><br><span class="line"><span class="keyword">if</span>(BLE::CONNECTED)&#123;</span><br><span class="line">    BLE::update(msg); <span class="comment">// 更新数据</span></span><br><span class="line">    BLE::notification(<span class="string">"1"</span>); <span class="comment">// 提醒手机更新数据 </span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>感觉清爽多了。</p>]]></content>
      
      
      <categories>
          
          <category> 笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> esp32 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>esp32学习笔记（一）</title>
      <link href="/2022/07/25/esp32%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%EF%BC%88%E4%B8%80%EF%BC%89/"/>
      <url>/2022/07/25/esp32%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%EF%BC%88%E4%B8%80%EF%BC%89/</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>本人曾经对老师夸下海口并妄称自己会esp32。近来研究esp32，发现别说是会了，就连那些最基本的都不清楚。想到我向来记忆力低下，今天的研究成果过几天就又会忘干净。于是下此决心，学一点记一点。（虽然以前也是这么自我标榜的，然后果断当了太监就是了）<br><a id="more"></a><br>第一篇主要介绍基本的点亮led，涉及如下内容：</p><ul><li>blink</li><li>touchPad</li><li>定时器</li><li>gpio中断</li><li>adc/dac</li></ul><h2 id="论如何运行HelloWorld"><a href="#论如何运行HelloWorld" class="headerlink" title="论如何运行HelloWorld"></a>论如何运行HelloWorld</h2><p>自打抛弃了Arduino IDE而改为使用platformIO后，感觉编程效率一下子快了好多。不过目前为止，我对于platformIO的熟练度不能说是了如指掌嘛，也得说是一点不会了。platformIO创建新项目特别慢，据说科学上网能稍有改善。然后就是和arduino的兼容问题了。一般而言vscode这边都不会出什么大问题，但毕竟另一个是arduino，往往会有一些意想不到的诡异情况发生。这里点名批评下面这个库。且不说什么兼容性问题了，居然还会编译出错（一处类型转换时没主意导致的报错），虽然在arduino下完全没问题，但换了个编译器就出一堆问题。不过其实也能够理解，毕竟谁都不想做兼容，我也一样。<br><img src="/2022/07/25/esp32学习笔记（一）/1.png"><br>还有一个比较坑的地方，容易被初见杀。就是很多时候编译项目时会报诸如“Wire.h/SPI.h not found”的错，但按照直觉上来看，这玩意应该不用写在lib_deps里面。事实上是需要的。比如说下图，得写成这个样子才能过编译。我个人觉着啊，你看其他的外设都不用这么写，为啥就这两个需要，就挺奇葩的，实在是无法理解。<br><img src="/2022/07/25/esp32学习笔记（一）/2.png"><br>最后记住对应的led引脚即可。</p><h2 id="论touchPad功能的使用"><a href="#论touchPad功能的使用" class="headerlink" title="论touchPad功能的使用"></a>论touchPad功能的使用</h2><p>鉴定为不用深究。就只需要记住有这个功能就行。对照下图和pins_arduino.h中定义的各个引脚别称，很容易知道用哪个引脚。<br><img src="/2022/07/25/esp32学习笔记（一）/3.png"><br><img src="/2022/07/25/esp32学习笔记（一）/4.png"><br>touchpad的库超级简单，甚至真的就只有两个函数，功能如下。<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* 原理事实上是感应电容变化</span></span><br><span class="line"><span class="comment"> * 读取值，越接近0说明触碰到了</span></span><br><span class="line"><span class="comment"> * 事先用这个测一个合适的界定碰还是没碰的阈值，</span></span><br><span class="line"><span class="comment"> * 不想麻烦的话40就可以了</span></span><br><span class="line"><span class="comment"> * */</span></span><br><span class="line"><span class="keyword">uint16_t</span> touchRead(<span class="keyword">uint8_t</span> pin);</span><br><span class="line"><span class="comment">// e.g. Serial.println(touchRead(T0));</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * 低于阈值时（按下时）触发userFunc，一般设成40就行，是中断</span></span><br><span class="line"><span class="comment"> * */</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">touchAttachInterrupt</span><span class="params">(<span class="keyword">uint8_t</span> pin, <span class="keyword">void</span> (*userFunc)(<span class="keyword">void</span>), <span class="keyword">uint16_t</span> threshold)</span></span>;</span><br><span class="line"><span class="comment">// e.g. touchAttachInterrupt(T0, touch_cb, 40);</span></span><br></pre></td></tr></table></figure></p><p>有一说一，挺灵敏的。</p><h2 id="论timer的正确使用方式"><a href="#论timer的正确使用方式" class="headerlink" title="论timer的正确使用方式"></a>论timer的正确使用方式</h2><p>这里指的是软件计时器，详细见<a href="https://docs.espressif.com/projects/esp-idf/en/stable/esp32/api-reference/system/esp_timer.html" target="_blank" rel="noopener">官方文档</a>，这里来个短平快结果导向的用法介绍。<br>p.s. 软件计时器是基于esp32原本的4个硬件计时器来计时的，硬件计时器大概就是timerAttachInterrupt同类的。不过函数特别的，感觉用着还更加麻烦，也没有什么非用不可的理由，因此感觉之后都会用esp_timer.h的东西了。<br>如果只是记录运行时间，操作如下：</p><ol><li>setup中esp_timer_init();</li><li>想啥时候知道时间，调用esp_timer_get_time()，单位us。</li></ol><p>如果是正常定时中断，流程为：</p><ol><li>esp_timer_init();</li><li>typedef arg_t; （如果没有参数就跳过这个思考步骤）</li><li>esp_timer_create_args_t timerInfo = {}</li><li>void cb(void *arg)</li><li>esp_timer_create(&amp;timerInfo, &amp;myTimer);</li><li>esp_timer_start_periodic(myTimer, 1e6);</li></ol><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 多参数可以写成这样子的结构体，然后定义待传入参数为全局变量方便每一次更新参数</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">  <span class="keyword">int</span> a;</span><br><span class="line">  <span class="keyword">bool</span> b;</span><br><span class="line">  u_char c;</span><br><span class="line">&#125; <span class="keyword">arg_t</span>;</span><br><span class="line"><span class="keyword">arg_t</span> myArg = &#123;<span class="number">100</span>, <span class="number">0</span>, <span class="string">'c'</span>&#125;;</span><br><span class="line"><span class="comment">// 回调函数格式固定</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">cb</span><span class="params">(<span class="keyword">void</span> *arg)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">arg_t</span> *data = (<span class="keyword">arg_t</span> *)arg; <span class="comment">// 解包传入的数据</span></span><br><span class="line">  <span class="comment">// do something...</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 计时器实例，全局方便开启、暂停、删除。</span></span><br><span class="line">esp_timer *myTimer;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* setup */</span></span><br><span class="line"><span class="comment">// 1. 库初始化</span></span><br><span class="line">esp_timer_init();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 2. 写需要执行的回调和回调需要的参数</span></span><br><span class="line"><span class="keyword">esp_timer_create_args_t</span> timerInfo = &#123;</span><br><span class="line">    .callback = cb,</span><br><span class="line">    .arg = &amp;myArg&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 3. 创建实例</span></span><br><span class="line">esp_timer_create(&amp;timerInfo, &amp;myTimer);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 4. 控制开始、停止、删除</span></span><br><span class="line">esp_timer_start_periodic(myTimer, <span class="number">1e6</span>); <span class="comment">// 单位us</span></span><br></pre></td></tr></table></figure><p>这里提供一个综合实例。效果为触碰一次p4（T0）引脚，灯改变一次状态，内置1s cd。<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;Arduino.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"esp_timer.h"</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">bool</span> locked = <span class="literal">false</span>;</span><br><span class="line">esp_timer *lockTimer;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">timer_cb</span><span class="params">(<span class="keyword">void</span> *arg)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  locked = <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">touch_cb</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">static</span> <span class="keyword">bool</span> status = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">if</span> (!locked)</span><br><span class="line">  &#123;</span><br><span class="line">    locked = <span class="literal">true</span>;</span><br><span class="line">    digitalWrite(LED_BUILTIN, !status);</span><br><span class="line">    status = !status;</span><br><span class="line">    esp_timer_start_once(lockTimer, <span class="number">1e6</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">setup</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  Serial.begin(<span class="number">9600</span>);</span><br><span class="line">  pinMode(LED_BUILTIN, OUTPUT);</span><br><span class="line">  touchAttachInterrupt(T0, touch_cb, <span class="number">40</span>);</span><br><span class="line"></span><br><span class="line">  esp_timer_init();</span><br><span class="line">  <span class="keyword">esp_timer_create_args_t</span> timerInfo = &#123;</span><br><span class="line">      .callback = timer_cb&#125;;</span><br><span class="line">  esp_timer_create(&amp;timerInfo, &amp;lockTimer);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">loop</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h2 id="论如何驾驭按钮"><a href="#论如何驾驭按钮" class="headerlink" title="论如何驾驭按钮"></a>论如何驾驭按钮</h2><p>中断事实上特别简单，真的就只有attachInterrupt()一个函数，大概看一下函数定义就明白怎么用了。<br>主要难点在于如何用程序防抖。事实上这一切只需要一个电容就解决了，这再一次证明了不要把硬件上的事情推给软件上来做。如果没有防抖的话，按下按钮会产生一大段不稳定的抖动，而这份抖动会把中断直接干宕机（快速触发太多次中断会崩溃）。所以，除非用电容稳压，使得每一次按下变化稳定，不然不推荐直接用中断。<br>正确的方法应该是设计大概10ms检测一次状态，连续大概三次检测都为按下就确定为按下。当时我为了这么一个简单的问题捣鼓了非常非常久，所以一怒之下写了如下的终极解决方案（当然，电容还是唯一最优解）。<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;Arduino.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"esp_timer.h"</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">bool</span> status = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">bool</span> checked = <span class="literal">false</span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">cb</span><span class="params">(<span class="keyword">void</span> *args)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  checked = <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line">esp_timer *myTimer;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">touch</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  Serial.println(<span class="string">"touched!"</span>);</span><br><span class="line">  digitalWrite(LED_BUILTIN, !status);</span><br><span class="line">  status = !status;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">pressDown</span><span class="params">(<span class="keyword">void</span> *args)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">static</span> <span class="keyword">int</span> cnt = <span class="number">0</span>;</span><br><span class="line">  Serial.print(<span class="string">"pressed!  loop:"</span>);</span><br><span class="line">  Serial.println(++cnt);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">pressUp</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  Serial.println(<span class="string">"released!"</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">bool</span> isPressed = <span class="literal">false</span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">checkButton</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">static</span> <span class="keyword">uint8_t</span> cnt = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">const</span> <span class="keyword">esp_timer_create_args_t</span> timerInfo = &#123;</span><br><span class="line">      .callback = pressDown&#125;;</span><br><span class="line">  <span class="keyword">static</span> esp_timer *onPressedTimer;</span><br><span class="line">  <span class="keyword">if</span> (!checked)</span><br><span class="line">  &#123;</span><br><span class="line">    checked = <span class="literal">true</span>;</span><br><span class="line">    <span class="keyword">if</span> (digitalRead(<span class="number">4</span>) == HIGH)</span><br><span class="line">      cnt++;</span><br><span class="line">    <span class="keyword">if</span> (!isPressed &amp;&amp; cnt &gt;= <span class="number">4</span> &amp;&amp; digitalRead(<span class="number">4</span>) == LOW) <span class="comment">// 连续4次，即至少按下40ms，就判定为按下</span></span><br><span class="line">    &#123;</span><br><span class="line">      touch();</span><br><span class="line">      cnt = <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (!isPressed &amp;&amp; cnt &gt;= <span class="number">30</span>) <span class="comment">// 持续按住300ms，判定为持续按住</span></span><br><span class="line">    &#123;</span><br><span class="line">      isPressed = <span class="literal">true</span>;</span><br><span class="line">      esp_timer_create(&amp;timerInfo, &amp;onPressedTimer);</span><br><span class="line">      esp_timer_start_periodic(onPressedTimer, <span class="number">1e5</span>); <span class="comment">// 每100ms执行一次</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (isPressed &amp;&amp; digitalRead(<span class="number">4</span>) == LOW)</span><br><span class="line">    &#123;</span><br><span class="line">      esp_timer_stop(onPressedTimer);</span><br><span class="line">      esp_timer_delete(onPressedTimer); <span class="comment">// 删除定时器</span></span><br><span class="line">      pressUp();                        <span class="comment">// 持续按下后放开</span></span><br><span class="line">      isPressed = <span class="literal">false</span>;</span><br><span class="line">      cnt = <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">setup</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  Serial.begin(<span class="number">9600</span>);</span><br><span class="line">  pinMode(LED_BUILTIN, OUTPUT);</span><br><span class="line">  pinMode(<span class="number">4</span>, INPUT_PULLDOWN);</span><br><span class="line">  esp_timer_init();</span><br><span class="line">  <span class="keyword">esp_timer_create_args_t</span> timerInfo = &#123;</span><br><span class="line">      .callback = cb&#125;;</span><br><span class="line">  esp_timer_create(&amp;timerInfo, &amp;myTimer);</span><br><span class="line">  esp_timer_start_periodic(myTimer, <span class="number">1</span> * <span class="number">1e4</span>); <span class="comment">// 10ms 检测一次</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">loop</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  checkButton();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h2 id="论如何优雅地开灯"><a href="#论如何优雅地开灯" class="headerlink" title="论如何优雅地开灯"></a>论如何优雅地开灯</h2><p>esp32一共有18个adc引脚，但事实上分为ADC1(GPIO32 - GPIO39)和ADC2(GPIO0、GPIO2、GPIO4、GPIO12-GPIO15、GOIO25-GPIO27)，其中adc2与WiFi冲突，开了WiFi就没有adc2，且0，2，4，15貌似有其他用途，建议引脚宽裕的情况下就不要用。ADC1的36、39（即svp、svn）貌似是什么“高精度（低噪音）ADC”，但实际上据说表现不佳，建议就当成一个普普通通的ADC接口来用。同时，svp、svn还内置了一个霍尔传感器（如果不外接电路的话默认连通），据说可以检测磁场，但我怕强磁铁直接把芯片报废掉，没怎么敢尝试。<br>esp32默认的dac只有两个，因芯片不同而不同，具体建议看引脚定义，这个最准。对于我手上的而言是25和26（挺奇怪的，但确实是）。实在不行就用DAC1/DAC2，然后自己查引脚吧。<br>一份闲得无聊没事干搞出来的代码如下。<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;Arduino.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">setup</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  Serial.begin(<span class="number">9600</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">loop</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">int</span> num = analogRead(<span class="number">34</span>);</span><br><span class="line">  Serial.println(num * <span class="number">3.3</span> / <span class="number">4096</span>); <span class="comment">// adc读取的值范围0-4095，对应0-3.3v</span></span><br><span class="line">  Serial.print(<span class="string">"Hall Sensor: "</span>);</span><br><span class="line">  Serial.println(hallRead());</span><br><span class="line">  dacWrite(DAC1, num * <span class="number">255</span> / <span class="number">4096</span>); <span class="comment">// 不同于analogWrite本质输出PWN波，dacWrite直接输出稳定电压，取值0-255</span></span><br><span class="line">  delay(<span class="number">300</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>]]></content>
      
      
      <categories>
          
          <category> 笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> esp32 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>石真人传</title>
      <link href="/2021/03/21/%E7%9F%B3%E7%9C%9F%E4%BA%BA%E4%BC%A0/"/>
      <url>/2021/03/21/%E7%9F%B3%E7%9C%9F%E4%BA%BA%E4%BC%A0/</url>
      
        <content type="html"><![CDATA[<p>西蜀石海鹏者，本惠州保安人也。久为郫县客，栖居远郊，而纵情山水。常游于岷江之涘，时临渊怅望，时溯流纵行。三书生异之，相觑而议之。</p><p>子虚曰“‘践椒途之郁烈，步蘅皋而流芳’，此非子健之遇宓妃欤？‘动雾縠以徐步兮，拂墀声之珊珊’，此非宋玉之睹神女欤？翩若彩蝶，狡如飞鹜。静如古井，彯如晓雾。伫立聘望，如青松出磐石；忽然焉纵体，如飞鸢逐脱兔。驾云蔼之流芳，溯惠风之和煦。因四顾之速援，始嫚嫚而近旁。远而望之，健如怒涛卷霜雪，迫而查之，婉若游丝系翠帘。眉削千山松涛，目含万里秋波。微步兰皋，胜柳曳之嬛柔；转眄流精，具灵娇之烂媔。㛹娟熠耀，顾盼含情。光润玉颜，芳泽无加。感南湘之二妃，匹匏瓜于织女。于是征和神契，目遇星汉。徙倚彷徨，欲往又还。凄思内旷，戚理妙观。时不可得，容与自安。“</p><p>其言未毕，乌有抚须而笑之，曰：“大兄何见事之浅乎？其形也俊秀，其德也无匹。吾观其举止，皆出于自然。行乎所向，止乎所得，此圣人之象也。天地有道，阴阳有序，故可循其迹；吉凶倚伏，幽微难明，故需避其芒。和于大道之行，通于阴阳之变。演之以术数，得之以养生，是以不戚戚于贫贱，不汲汲于富贵。乘天地之正，御六气之变，是以安游于蓬蒿之间，翱翔于九天之外。其为人也，达则普度众生，穷则独善其身；近则治国弼政，退则放浪形骸。无名之圣贤，避人之重器，其此之谓乎？”</p><p>于是无是曰：“诚然。汝得其环中矣。然则身怀琬琰而不用，心系天下而不为，是亦其本心乎？扣帝阍而不见，请长缨而无处，越关山而失路，唯垂长杆以梦日。‘云锁楼台，雾迷津渡，此愁更与谁诉？秋水可知人憔悴，漭漭东流不知处。’其悲之挚，通于万物。云翳凝而沉滞，水汽泠而上集。既蹇澹流以感纯，复泣层林以和声。聆坠危之落木，眷僚慄之松涛。感惊鸿之无迹，恸浮萍之无依。乃瞻星汉，溯河梁，路超远，徒自伤。前路隐乎苍茫，空踟蹰而迷惘。吟行路以自赏，声哀历而弥长。其情也哀，其歌也悲。滞岷山之行云，浮九渊之蛟龙；感猿猱于哀鸣，和肃杀之秋风。为宫羽而变徵，一曲高而难和。此间千万孤独，又何可胜道哉”</p><p>忽焉黑云覆月，回风盘旋，摧千山之残叶，卷浮世之尘埃。迁客骚人，莫不迎风而泣，感极而悲。于是石海鹏扣长剑而歌之，歌曰：“噫吁嚱，此无用之风也！风之薄兮，不可举鲲鹏；风之劲兮，不可安松竹。呜呼哀哉！时与我而向违，复驾言兮焉求！风也，汝不合时宜为何！既已失路，复欲何如！欲借此风驱魍魉，直待云开见月明。“</p><p>俄而秋风疾而层云裂，婵娟现而月辉泄，细如银沙，皎若白霰。三人观之，惊骇莫可名状，相觑曰：”此真人也，吾险贻笑于大方之家。其还也。“遂叹然而去。</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>绘画</title>
      <link href="/2020/02/23/%E7%BB%98%E7%94%BB/"/>
      <url>/2020/02/23/%E7%BB%98%E7%94%BB/</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>折腾了一天的东西，由于几乎忘记了hexo的正确使用方法，加上曾经励志一年不编程，所以将最终成果另存了一个仓库而不是嵌套进去。<br>使用了Lazy Line Painter和一个svg绘图网站。<br>原图就是封面的那幅。</p><h2 id="正文"><a href="#正文" class="headerlink" title="正文"></a>正文</h2><p><a href="https://shihaipeng.github.io/a/" target="_blank" rel="noopener">传送门</a></p>]]></content>
      
      
      <categories>
          
          <category> 笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> js </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>关于cubism3模型点击区域的绑定</title>
      <link href="/2019/08/26/%E5%85%B3%E4%BA%8Ecubism3%E6%A8%A1%E5%9E%8B%E7%82%B9%E5%87%BB%E5%8C%BA%E5%9F%9F%E7%9A%84%E7%BB%91%E5%AE%9A/"/>
      <url>/2019/08/26/%E5%85%B3%E4%BA%8Ecubism3%E6%A8%A1%E5%9E%8B%E7%82%B9%E5%87%BB%E5%8C%BA%E5%9F%9F%E7%9A%84%E7%BB%91%E5%AE%9A/</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p><strong>首先感谢<a href="https://himehane.club/live2d_on_website/" target="_blank" rel="noopener">himehane</a>的帮助</strong><br>在看了他的文章后，有了把碧蓝航线的模型放到网页上的想法。正好此前有<a href="https://github.com/Perfare/AzurLaneLive2DExtract" target="_blank" rel="noopener">perfare</a>的项目提取live2d模型，剩下的就是如何使用了。<br><a id="more"></a><br>由于碧蓝航线的live2d是cubism3的，而且这方面的样例实在不多，所以我抱着瞎猫碰死耗子的心态试了一下官方的sdk。尝试许久，却总是在加载模型动作时报错（如下），多次尝试并不能找到报错的原因，同一个动作不同时候也会报不同的错（随机的？），模型确实是没问题的，但为什么不行不知道。最终我选择放弃。<br><img src="/2019/08/26/关于cubism3模型点击区域的绑定/1.png"></p><p>然后我想看看有没有转换的方法，找到了<a href="https://imjad.cn/archives/lab/add-dynamic-poster-girl-with-live2d-to-your-blog-03" target="_blank" rel="noopener">imjad</a>的博客，但是发现还是行不通。如果有工程文件(.canx?)时可以用，但我们提取到的是执行文件(.moc),而且好像也没有转回去的方法，所以也行不通。</p><p>最终在找到himehane的文章后，打算上手。但个人有强迫症，觉得点击区域绑定一朝做不好，模型就欠缺灵魂。最终在与官方sdk的两相对比后，有了下文</p><h2 id="关于点击区域的解释"><a href="#关于点击区域的解释" class="headerlink" title="关于点击区域的解释"></a>关于点击区域的解释</h2><p>参见<a href="http://live2d.pavostudio.com/doc/zh-cn/live2d/model-config-sdk3/#hitareas" target="_blank" rel="noopener">这个</a>解释（虽然并不是官方的，但很可以做参考），我们最先需要的就是知道区域ID指的是什么。（以下省略漫长的寻找过程）最终我们打开cubismviewer3(ow)，在.moc文件的artmesh下找到了我们要找的内容。<br><img src="/2019/08/26/关于cubism3模型点击区域的绑定/2.png"></p><p>再来寻找代码中的在哪。（以下省略同样漫长的寻找过程），最终在 _coremodel.drawables下找到了。<br><img src="/2019/08/26/关于cubism3模型点击区域的绑定/3.png"><br>所以我的模型的model3.json长成了这样<br><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line"><span class="attr">"Version"</span>: <span class="number">3</span>,</span><br><span class="line"><span class="attr">"FileReferences"</span>: &#123;</span><br><span class="line"><span class="attr">"Moc"</span>: <span class="string">"lafei_4.moc3"</span>,</span><br><span class="line"><span class="attr">"Textures"</span>: [</span><br><span class="line"><span class="string">"textures/texture_00.png"</span></span><br><span class="line">],</span><br><span class="line"><span class="attr">"Physics"</span>: <span class="string">"lafei_4.physics3.json"</span>,</span><br><span class="line"><span class="attr">"Motions"</span>: &#123;</span><br><span class="line"><span class="attr">"Touch"</span>: [</span><br><span class="line">&#123;</span><br><span class="line"><span class="attr">"File"</span>: <span class="string">"motions/main_1.motion3.json"</span></span><br><span class="line">&#125;,</span><br><span class="line">&#123;</span><br><span class="line"><span class="attr">"File"</span>: <span class="string">"motions/mission_complete.motion3.json"</span></span><br><span class="line">&#125;,</span><br><span class="line">&#123;</span><br><span class="line"><span class="attr">"File"</span>: <span class="string">"motions/complete.motion3.json"</span></span><br><span class="line">&#125;,</span><br><span class="line">&#123;</span><br><span class="line"><span class="attr">"File"</span>: <span class="string">"motions/mission.motion3.json"</span></span><br><span class="line">&#125;,</span><br><span class="line">&#123;</span><br><span class="line"><span class="attr">"File"</span>: <span class="string">"motions/main_2.motion3.json"</span></span><br><span class="line">&#125;</span><br><span class="line">],</span><br><span class="line"><span class="attr">"TouchHead"</span>: [</span><br><span class="line">&#123;</span><br><span class="line"><span class="attr">"File"</span>: <span class="string">"motions/touch_head.motion3.json"</span></span><br><span class="line">&#125;</span><br><span class="line">],</span><br><span class="line"><span class="attr">"Idle"</span>: [</span><br><span class="line">&#123;</span><br><span class="line"><span class="attr">"File"</span>: <span class="string">"motions/idle.motion3.json"</span></span><br><span class="line">&#125;,</span><br><span class="line">&#123;</span><br><span class="line"><span class="attr">"File"</span>: <span class="string">"motions/main_3.motion3.json"</span></span><br><span class="line">&#125;</span><br><span class="line">],</span><br><span class="line"><span class="attr">"TouchSpecial"</span>: [</span><br><span class="line">&#123;</span><br><span class="line"><span class="attr">"File"</span>: <span class="string">"motions/touch_special.motion3.json"</span></span><br><span class="line">&#125;</span><br><span class="line">]</span><br><span class="line">&#125;</span><br><span class="line">&#125;,</span><br><span class="line"><span class="attr">"Groups"</span>: [</span><br><span class="line">&#123;</span><br><span class="line"><span class="attr">"Target"</span>: <span class="string">"Parameter"</span>,</span><br><span class="line"><span class="attr">"Name"</span>: <span class="string">"LipSync"</span>,</span><br><span class="line"><span class="attr">"Ids"</span>: [</span><br><span class="line"><span class="string">"ParamMouthOpenY"</span></span><br><span class="line">]</span><br><span class="line">&#125;,</span><br><span class="line">&#123;</span><br><span class="line"><span class="attr">"Target"</span>: <span class="string">"Parameter"</span>,</span><br><span class="line"><span class="attr">"Name"</span>: <span class="string">"EyeBlink"</span>,</span><br><span class="line"><span class="attr">"Ids"</span>: [</span><br><span class="line"><span class="string">"ParamEyeLOpen"</span>,</span><br><span class="line"><span class="string">"ParamEyeROpen"</span></span><br><span class="line">]</span><br><span class="line">&#125;</span><br><span class="line">],</span><br><span class="line"><span class="attr">"HitAreas"</span>: [</span><br><span class="line">&#123;</span><br><span class="line"><span class="attr">"Name"</span>: <span class="string">"Touch"</span>,</span><br><span class="line"><span class="attr">"Id"</span>: <span class="string">"TouchBody"</span>,</span><br><span class="line"><span class="attr">"Order"</span>: <span class="number">1</span>,</span><br><span class="line"><span class="attr">"MotionGroup"</span>: <span class="string">"Touch"</span></span><br><span class="line">&#125;,</span><br><span class="line">&#123;</span><br><span class="line"><span class="attr">"Name"</span>: <span class="string">"TouchSpecial"</span>,</span><br><span class="line"><span class="attr">"Id"</span>: <span class="string">"TouchSpecial"</span>,</span><br><span class="line"><span class="attr">"Order"</span>: <span class="number">100</span>,</span><br><span class="line"><span class="attr">"MotionGroup"</span>: <span class="string">"TouchSpecial"</span></span><br><span class="line">&#125;,</span><br><span class="line">&#123;</span><br><span class="line"><span class="attr">"Name"</span>: <span class="string">"TouchHead"</span>,</span><br><span class="line"><span class="attr">"Id"</span>: <span class="string">"TouchHead"</span>,</span><br><span class="line"><span class="attr">"Order"</span>: <span class="number">10</span>,</span><br><span class="line"><span class="attr">"MotionGroup"</span>: <span class="string">"TouchHead"</span></span><br><span class="line">&#125;</span><br><span class="line">]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>注：关于HitAreas中MotionGroup一项，是我的程序用的，不用太在意了。</p><h2 id="关于点击区域的位置"><a href="#关于点击区域的位置" class="headerlink" title="关于点击区域的位置"></a>关于点击区域的位置</h2><p>反复对比官方sdk，经过超级长时间的研究后（如果你想，可以试试，突破口应该是framework/model/cubismusermodel.ts）,发现代码如下<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line">public isHit(drawableId: CubismIdHandle, <span class="attr">pointX</span>: number, <span class="attr">pointY</span>: number): boolean</span><br><span class="line">       &#123;</span><br><span class="line">           <span class="keyword">const</span> drawIndex: number = <span class="keyword">this</span>._model.getDrawableIndex(drawableId);</span><br><span class="line">           <span class="keyword">if</span>(drawIndex &lt; <span class="number">0</span>)</span><br><span class="line">           &#123;</span><br><span class="line">               <span class="keyword">return</span> <span class="literal">false</span>; <span class="comment">// 存在しない場合はfalse</span></span><br><span class="line">           &#125;</span><br><span class="line">           <span class="keyword">const</span> count: number = <span class="keyword">this</span>._model.getDrawableVertexCount(drawIndex);</span><br><span class="line">           <span class="keyword">const</span> vertices: <span class="built_in">Float32Array</span> = <span class="keyword">this</span>._model.getDrawableVertices(drawIndex);</span><br><span class="line"></span><br><span class="line">           <span class="keyword">let</span> left: number = vertices[<span class="number">0</span>];</span><br><span class="line">           <span class="keyword">let</span> right: number = vertices[<span class="number">0</span>];</span><br><span class="line">           <span class="keyword">let</span> top: number = vertices[<span class="number">1</span>];</span><br><span class="line">           <span class="keyword">let</span> bottom: number = vertices[<span class="number">1</span>];</span><br><span class="line"></span><br><span class="line">           <span class="keyword">for</span>(<span class="keyword">let</span> j: number = <span class="number">1</span>; j &lt; count; ++j)</span><br><span class="line">           &#123;</span><br><span class="line">               <span class="keyword">let</span> x = vertices[Constant.vertexOffset + j * Constant.vertexStep];</span><br><span class="line">               <span class="keyword">let</span> y = vertices[Constant.vertexOffset + j * Constant.vertexStep + <span class="number">1</span>];</span><br><span class="line"></span><br><span class="line">               <span class="keyword">if</span>(x &lt; left)</span><br><span class="line">               &#123;</span><br><span class="line">                   left = x; <span class="comment">// Min x</span></span><br><span class="line">               &#125;</span><br><span class="line">               </span><br><span class="line">               <span class="keyword">if</span>(x &gt; right)</span><br><span class="line">               &#123;</span><br><span class="line">                   right = x; <span class="comment">// Max x</span></span><br><span class="line">               &#125;</span><br><span class="line"></span><br><span class="line">               <span class="keyword">if</span>(y &lt; top)</span><br><span class="line">               &#123;</span><br><span class="line">                   top = y; <span class="comment">// Min y</span></span><br><span class="line">               &#125;</span><br><span class="line"></span><br><span class="line">               <span class="keyword">if</span>(y &gt; bottom)</span><br><span class="line">               &#123;</span><br><span class="line">                   bottom = y; <span class="comment">// Max y</span></span><br><span class="line">               &#125;</span><br><span class="line">           &#125;</span><br><span class="line"></span><br><span class="line">           <span class="keyword">const</span> tx: number = <span class="keyword">this</span>._modelMatrix.invertTransformX(pointX);</span><br><span class="line">           <span class="keyword">const</span> ty: number = <span class="keyword">this</span>._modelMatrix.invertTransformY(pointY);</span><br><span class="line"></span><br><span class="line">           <span class="keyword">return</span> ((left &lt;= tx) &amp;&amp; (tx &lt;= right) &amp;&amp; (top &lt;= ty) &amp;&amp; (ty &lt;= bottom));</span><br><span class="line">       &#125;</span><br></pre></td></tr></table></figure></p><p>Constant.vertexOffset=0，Constant.vertexStep=2应该对于所有模型都是适用的<br>this._model.getDrawableIndex()返回的就是 _coremodel.drawables.ids.indexOf()的值，做出类似替换得到代码如下<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//function(id)&#123;//id-&gt;区域id</span></span><br><span class="line"><span class="keyword">let</span> d=<span class="keyword">this</span>._model.drawables;</span><br><span class="line">    <span class="keyword">let</span> index=d.ids.indexOf(id);</span><br><span class="line">    <span class="keyword">let</span> count=d.vertexCounts[index];</span><br><span class="line">    <span class="keyword">let</span> vertices=d.vertexPositions[index];<span class="comment">//相对位移</span></span><br><span class="line">    <span class="keyword">let</span> left = vertices[<span class="number">0</span>];</span><br><span class="line">    <span class="keyword">let</span> right = vertices[<span class="number">0</span>];</span><br><span class="line">    <span class="keyword">let</span> top = vertices[<span class="number">1</span>];</span><br><span class="line">    <span class="keyword">let</span> bottom = vertices[<span class="number">1</span>];</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">let</span> j = <span class="number">1</span>; j &lt; count; ++j)&#123;</span><br><span class="line">        <span class="keyword">let</span> x = vertices[<span class="number">0</span> + j * <span class="number">2</span>];</span><br><span class="line">        <span class="keyword">let</span> y = vertices[<span class="number">0</span> + j * <span class="number">2</span> + <span class="number">1</span>];</span><br><span class="line">        <span class="keyword">if</span>(x &lt; left)&#123;left = x;&#125;<span class="comment">// 最左边的点相对中点x轴位移     </span></span><br><span class="line">        <span class="keyword">if</span>(x &gt; right)&#123;right = x;&#125;<span class="comment">// Max x</span></span><br><span class="line">        <span class="keyword">if</span>(y &gt; top)&#123;top = y;&#125;<span class="comment">// 最上边的点相对中点x轴位移</span></span><br><span class="line">        <span class="keyword">if</span>(y &lt; bottom)&#123;bottom = y;&#125;<span class="comment">// Max y</span></span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></p><p>关于vertexCounts返回的是这个东西的顶点个数，而下面的for循环就是遍历出上下左右四个定位点。vertexPositions是<strong>顶点相对模型中点的位移</strong>（省略无数发现它的过程），<strong>计算原理是：（中点横/纵坐标-点的横/纵坐标）/放大倍数</strong>（可参见官方framework/math/cubismmatrix44.ts的146到160行，逆推而得）。</p><p>所以得到各个定位点坐标如下<br><strong>坐标=模型中点坐标+相对位移*放大倍数（y为减）</strong><br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">left=left*<span class="keyword">this</span>._scale+<span class="keyword">this</span>._center_x;</span><br><span class="line">   right=right*<span class="keyword">this</span>._scale+<span class="keyword">this</span>._center_x;</span><br><span class="line">   top=-top*<span class="keyword">this</span>._scale+<span class="keyword">this</span>._center_y;<span class="comment">//万分注意它上下是反的，所以是减去</span></span><br><span class="line">   bottom=-bottom*<span class="keyword">this</span>._scale+<span class="keyword">this</span>._center_y;</span><br></pre></td></tr></table></figure></p><p>关于为什么y轴方向的是减法没考虑过，反正能用就行了<br>最后汇总一下，得到最终的代码，如我个人的代码就是<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//id-&gt;点击区域id（artmesh的id），pointX/Y -&gt; pageX/Y</span></span><br><span class="line"><span class="comment">//计算原理：遍历点的上下左右范围，判定点坐标x=模型中点坐标+相对位移*放大倍数（y为减）</span></span><br><span class="line">MotionHandler.prototype.isHit = <span class="function"><span class="keyword">function</span>(<span class="params">id,pointX,pointY</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">let</span> d=<span class="keyword">this</span>._model.drawables;</span><br><span class="line">    <span class="keyword">let</span> index=d.ids.indexOf(id);</span><br><span class="line">    <span class="keyword">let</span> count=d.vertexCounts[index];</span><br><span class="line">    <span class="keyword">let</span> vertices=d.vertexPositions[index];<span class="comment">//相对位移</span></span><br><span class="line">    <span class="keyword">let</span> left = vertices[<span class="number">0</span>];</span><br><span class="line">    <span class="keyword">let</span> right = vertices[<span class="number">0</span>];</span><br><span class="line">    <span class="keyword">let</span> top = vertices[<span class="number">1</span>];</span><br><span class="line">    <span class="keyword">let</span> bottom = vertices[<span class="number">1</span>];</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">let</span> j = <span class="number">1</span>; j &lt; count; ++j)&#123;</span><br><span class="line">        <span class="keyword">let</span> x = vertices[<span class="number">0</span> + j * <span class="number">2</span>];</span><br><span class="line">        <span class="keyword">let</span> y = vertices[<span class="number">0</span> + j * <span class="number">2</span> + <span class="number">1</span>];</span><br><span class="line">        <span class="keyword">if</span>(x &lt; left)&#123;left = x;&#125;   </span><br><span class="line">        <span class="keyword">if</span>(x &gt; right)&#123;right = x;&#125;</span><br><span class="line">        <span class="keyword">if</span>(y &gt; top)&#123;top = y;&#125;</span><br><span class="line">        <span class="keyword">if</span>(y &lt; bottom)&#123;bottom = y;&#125;</span><br><span class="line">    &#125;</span><br><span class="line">    left=left*<span class="keyword">this</span>._scale+<span class="keyword">this</span>._center_x;</span><br><span class="line">    right=right*<span class="keyword">this</span>._scale+<span class="keyword">this</span>._center_x;</span><br><span class="line">    top=-top*<span class="keyword">this</span>._scale+<span class="keyword">this</span>._center_y;</span><br><span class="line">    bottom=-bottom*<span class="keyword">this</span>._scale+<span class="keyword">this</span>._center_y;</span><br><span class="line">    <span class="keyword">return</span> ((left &lt;= pointX) &amp;&amp; (pointX &lt;= right) &amp;&amp; (bottom &gt;= pointY) &amp;&amp; (pointY &gt;= top));</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></p><h2 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h2><p>事实上这个对于所有的区域应该都是可以的，比如如果我想把右耳作为一个点击区域，首先找到artmesh的id，然后改一下model3.json。最后注意一下可执行的区域应该是一个矩形（蓝色方框），所以建议定义一个优先度的东西，以便优先判断小块的点击区域<br><img src="/2019/08/26/关于cubism3模型点击区域的绑定/4.png"></p><p>顺便推销一下<a href="https://github.com/shihaipeng/live2d-cubism3-helper" target="_blank" rel="noopener">我的代码</a>（再次感谢<a href="https://himehane.club/live2d_on_website/" target="_blank" rel="noopener">himehane</a>，事实上很多都是抄袭他的，无比惭愧），当然，昨天（8/25号）才算是基本可以看了。有些细节如呼吸，眨眼加了上去，改进了一下鼠标事件，用成了相对网页的位移，当然还有点击区域的绑定。<br>马上开学了（&lt;=4天），该死的学校星期天强制补课，所以我几乎不怎么可能在下一个学期动我的代码了，随缘更新改bug。如想勾搭QQ欢迎（2112966311）</p>]]></content>
      
      
      <categories>
          
          <category> 笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> live2d </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>c++函数（2）</title>
      <link href="/2018/11/10/c-%E5%87%BD%E6%95%B0%EF%BC%882%EF%BC%89/"/>
      <url>/2018/11/10/c-%E5%87%BD%E6%95%B0%EF%BC%882%EF%BC%89/</url>
      
        <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>以下内容坑了我一周。然鹅还需要更长时间。。。</p><a id="more"></a><h3 id="function类实现"><a href="#function类实现" class="headerlink" title="function类实现"></a>function类实现</h3><p>基本思想还是很简单的，就是一个仿函数。。。<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//function 类</span></span><br><span class="line"></span><br><span class="line">...</span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;tuple&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;type_traits&gt;</span></span></span><br><span class="line">...</span><br><span class="line"></span><br><span class="line">...</span><br><span class="line"><span class="keyword">namespace</span> simple&#123;</span><br><span class="line">    <span class="keyword">template</span>&lt;<span class="class"><span class="keyword">class</span> <span class="title">R</span>,<span class="title">class</span>...<span class="title">Args</span>&gt;</span></span><br><span class="line"><span class="class">    <span class="title">struct</span> <span class="title">func_traits</span>;</span></span><br><span class="line">    <span class="comment">//这里坑了我一个小时啊，声明应在最前，因为function类中用到了，而定义要放在最后，否则编译器不知道模板参数，会报一个“not a class template”的错误</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">template</span>&lt;<span class="class"><span class="keyword">class</span> <span class="title">Fn</span>&gt;</span></span><br><span class="line"><span class="class">    <span class="title">class</span> <span class="title">function</span>&#123;</span></span><br><span class="line">      <span class="keyword">typedef</span> <span class="keyword">typename</span> <span class="built_in">std</span>::decay&lt;Fn&gt;::type call_type;</span><br><span class="line">      <span class="comment">//此处int&amp;和int无区别，而且编译器可能会聪明的加上一些修饰符（我们只能呵呵了），所以需要decay。</span></span><br><span class="line">      <span class="keyword">typedef</span> <span class="keyword">typename</span> func_traits&lt;call_type&gt;::res_type result_type;</span><br><span class="line">      call_type _call;</span><br><span class="line">      <span class="keyword">public</span>:</span><br><span class="line">        function(call_type&amp;&amp; f):_call(f)&#123;&#125;;<span class="comment">//至于此处的右值仅仅是为了加快传递速度而已，并没有什么用</span></span><br><span class="line">        function&amp; <span class="keyword">operator</span>=(call_type&amp;&amp; f)&#123;</span><br><span class="line">            _call=f;</span><br><span class="line">            <span class="keyword">return</span> *<span class="keyword">this</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">template</span>&lt;<span class="class"><span class="keyword">class</span>... <span class="title">P</span>&gt;</span></span><br><span class="line"><span class="class">        <span class="title">result_type</span> <span class="title">operator</span>()(<span class="title">P</span>&amp;&amp;... <span class="title">p</span>)&#123;</span></span><br><span class="line">            <span class="keyword">return</span> _call(<span class="built_in">std</span>::forward&lt;P&gt;(p)...);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="keyword">template</span> &lt;<span class="keyword">typename</span> R, <span class="keyword">typename</span>... P&gt;<span class="comment">//取普通函数、成员函数</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">func_traits</span>&lt;R(*)(P...)&gt; &#123;</span> </span><br><span class="line">        <span class="keyword">typedef</span> R res_type; <span class="comment">//返回值</span></span><br><span class="line">        <span class="keyword">typedef</span> <span class="built_in">std</span>::tuple&lt;P...&gt; arg_type; <span class="comment">//参数类型，此程序没用上</span></span><br><span class="line">        </span><br><span class="line">    &#125;;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/* check member function */</span><span class="comment">//兼容函数cv符</span></span><br><span class="line">    </span><br><span class="line">    <span class="meta">#<span class="meta-keyword">define</span> FUNC_TRAITS__(...) \</span></span><br><span class="line">        <span class="keyword">template</span> &lt;<span class="keyword">typename</span> R, <span class="keyword">typename</span> C, <span class="keyword">typename</span>... P&gt; \</span><br><span class="line">        <span class="class"><span class="keyword">struct</span> <span class="title">func_traits</span>&lt;R(C::*)(P...) __VA_ARGS__&gt; &#123;</span> <span class="keyword">typedef</span> R type; &#125;;</span><br><span class="line">    </span><br><span class="line">    FUNC_TRAITS__()</span><br><span class="line">    FUNC_TRAITS__(<span class="keyword">const</span>)</span><br><span class="line">    FUNC_TRAITS__(<span class="keyword">volatile</span>)</span><br><span class="line">    FUNC_TRAITS__(<span class="keyword">const</span> <span class="keyword">volatile</span>)</span><br><span class="line">    </span><br><span class="line">    <span class="meta">#<span class="meta-keyword">undef</span> RESULT_TRAITS__</span></span><br><span class="line">&#125;</span><br><span class="line">...</span><br><span class="line"></span><br><span class="line"><span class="comment">//test</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">a</span><span class="params">(<span class="keyword">int</span>&amp;&amp; x)</span></span>&#123;</span><br><span class="line">    <span class="built_in">std</span>::<span class="built_in">cout</span>&lt;&lt;<span class="number">0</span>&lt;&lt;<span class="built_in">std</span>::<span class="built_in">endl</span>;</span><br><span class="line">    <span class="keyword">return</span> x;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    simple::function&lt;<span class="keyword">int</span>(<span class="keyword">int</span>&amp;&amp;)&gt; func=&amp;a;</span><br><span class="line">    <span class="built_in">std</span>::<span class="built_in">cout</span>&lt;&lt;func(<span class="number">12</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;   </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>目前这个function类已经可以用于普通的函数了。但离我们的想法还差得远。但我的智商仅限于此了。</p><h3 id="一个升级的版本的坑"><a href="#一个升级的版本的坑" class="headerlink" title="一个升级的版本的坑"></a>一个升级的版本的坑</h3><p><del>观察原生的function类，会发现它需要声明时初始化。这并不是没有道理的。人为传入的模板参数（&lt;&gt;中的）只能作为类的标识（如果可以这么理解），而具体调用则需要根据初始化的数判定。所以应当会有两个Fn。</del></p><p>我粗略看了一下functional源代码啊，发现它的处理方式挺简单的，就是再创建一个对象而已。</p><p>所以可以说function&lt;…&gt;中&lt;&gt;里的函数类型一点用都没有（十分真实，唯一作用就是好看了）</p><p>但理论简单，实践希望也是如此。<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//未完成</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> simple&#123;</span><br><span class="line"><span class="comment">//...</span></span><br><span class="line">    <span class="comment">/////////////////////////////////////////////////////</span></span><br><span class="line">    <span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt;<span class="comment">//是否为指针 </span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">is_pointer_noref</span></span></span><br><span class="line"><span class="class">        :</span> <span class="built_in">std</span>::is_pointer&lt;<span class="keyword">typename</span> <span class="built_in">std</span>::remove_reference&lt;T&gt;::type&gt;</span><br><span class="line">    &#123;&#125;;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt;<span class="comment">//是否为成员函数 </span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">is_memfunc_noref</span></span></span><br><span class="line"><span class="class">        :</span> <span class="built_in">std</span>::is_member_function_pointer&lt;<span class="keyword">typename</span> <span class="built_in">std</span>::remove_reference&lt;T&gt;::type&gt;</span><br><span class="line">    &#123;&#125;;</span><br><span class="line">    <span class="comment">/////////////函数绑定的执行程序 </span></span><br><span class="line">    <span class="keyword">template</span> &lt;<span class="keyword">typename</span> R, <span class="keyword">typename</span> F, <span class="keyword">typename</span>... P&gt;<span class="comment">//普通函数指针</span></span><br><span class="line">    <span class="keyword">inline</span> <span class="keyword">typename</span> <span class="built_in">std</span>::enable_if&lt;is_pointer_noref&lt;F&gt;::value,</span><br><span class="line">    R&gt;::<span class="function">type <span class="title">invoke</span><span class="params">(F&amp;&amp; f, P&amp;&amp;... par)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> (*<span class="built_in">std</span>::forward&lt;F&gt;(f))(<span class="built_in">std</span>::forward&lt;P&gt;(par)...);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">template</span> &lt;<span class="keyword">typename</span> R, <span class="keyword">typename</span> F, <span class="keyword">typename</span> P1, <span class="keyword">typename</span>... P&gt;<span class="comment">//对象指针</span></span><br><span class="line">    <span class="keyword">inline</span> <span class="keyword">typename</span> <span class="built_in">std</span>::enable_if&lt;is_memfunc_noref&lt;F&gt;::value &amp;&amp; is_pointer_noref&lt;P1&gt;::value,</span><br><span class="line">    R&gt;::<span class="function">type <span class="title">invoke</span><span class="params">(F&amp;&amp; f, P1&amp;&amp; this_ptr, P&amp;&amp;... par)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> (<span class="built_in">std</span>::forward&lt;P1&gt;(this_ptr)-&gt;*<span class="built_in">std</span>::forward&lt;F&gt;(f))(<span class="built_in">std</span>::forward&lt;P&gt;(par)...);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">template</span> &lt;<span class="keyword">typename</span> R, <span class="keyword">typename</span> F, <span class="keyword">typename</span> P1, <span class="keyword">typename</span>... P&gt;<span class="comment">//对象成员函数 </span></span><br><span class="line">    <span class="keyword">inline</span> <span class="keyword">typename</span> <span class="built_in">std</span>::enable_if&lt;is_memfunc_noref&lt;F&gt;::value &amp;&amp; !is_pointer_noref&lt;P1&gt;::value,</span><br><span class="line">    R&gt;::<span class="function">type <span class="title">invoke</span><span class="params">(F&amp;&amp; f, P1&amp;&amp; this_obj, P&amp;&amp;... par)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> (<span class="built_in">std</span>::forward&lt;P1&gt;(this_obj).*<span class="built_in">std</span>::forward&lt;F&gt;(f))(<span class="built_in">std</span>::forward&lt;P&gt;(par)...);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">template</span> &lt;<span class="keyword">typename</span> R, <span class="keyword">typename</span> F, <span class="keyword">typename</span>... P&gt;<span class="comment">//普通函数 </span></span><br><span class="line">    <span class="keyword">inline</span> <span class="keyword">typename</span> <span class="built_in">std</span>::enable_if&lt;!is_pointer_noref&lt;F&gt;::value &amp;&amp; !is_memfunc_noref&lt;F&gt;::value,</span><br><span class="line">    R&gt;::<span class="function">type <span class="title">invoke</span><span class="params">(F&amp;&amp; f, P&amp;&amp;... par)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">std</span>::forward&lt;F&gt;(f)(<span class="built_in">std</span>::forward&lt;P&gt;(par)...);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">////////////////////////////////////////</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">template</span>&lt;<span class="class"><span class="keyword">class</span> <span class="title">Fn</span>&gt;</span></span><br><span class="line"><span class="class">    <span class="title">class</span> <span class="title">function</span>&#123;</span></span><br><span class="line"><span class="comment">//...</span></span><br><span class="line">      <span class="keyword">template</span>&lt;<span class="class"><span class="keyword">class</span>... <span class="title">P</span> &gt;</span></span><br><span class="line"><span class="class">      <span class="title">result_type</span> _<span class="title">do_call</span>(<span class="title">P</span>&amp;&amp;... <span class="title">p</span>)&#123;</span></span><br><span class="line">          <span class="keyword">return</span> invoke&lt;result_type&gt;(<span class="built_in">std</span>::forward&lt;P&gt;(p)...);</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">public</span>:</span><br><span class="line">  <span class="comment">//...</span></span><br><span class="line">        <span class="keyword">template</span>&lt;<span class="class"><span class="keyword">class</span> _<span class="title">functor</span>&gt;</span></span><br><span class="line"><span class="class">        <span class="title">function</span>&amp; <span class="title">operator</span>=(_<span class="title">functor</span>&amp;&amp; <span class="title">ft</span>)&#123;</span></span><br><span class="line">            function&lt;_functor&gt;(<span class="built_in">std</span>::forward&lt;_functor&gt;(ft)).swap(*<span class="keyword">this</span>);</span><br><span class="line">            <span class="keyword">return</span> *<span class="keyword">this</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="function"><span class="keyword">void</span> <span class="title">swap</span><span class="params">(function&amp; f)</span></span>&#123;</span><br><span class="line">            <span class="built_in">std</span>::swap(*<span class="keyword">this</span>,f);</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">template</span>&lt;<span class="class"><span class="keyword">class</span>... <span class="title">P</span>&gt;</span></span><br><span class="line"><span class="class">        <span class="title">result_type</span> <span class="title">operator</span>()(<span class="title">P</span>&amp;&amp;... <span class="title">p</span>)&#123;</span></span><br><span class="line">            <span class="keyword">return</span> _call(<span class="built_in">std</span>::forward&lt;P&gt;(p)...);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;;<span class="comment">//无用代码</span></span><br></pre></td></tr></table></figure></p><p>事实证明我还是没有那么牛逼，只能大概讲述一下bind的思路了。就是一个function，接收一个参数（设用tuple1存）（如void(int,int,double,char)）的一个函数接收(1,_1,1.2,_3)。（_1,_3就是placeholder<1>和placeholder<3>），然后接收参数（设用tuple2存）（如(1,2,’c’)）,调用时对tuple1每一个元素遍历，如果为placeholder<n>,则在tuple2中找到第N-1个元素填进去。上一篇的那个bind实现确实巧妙，而且也简单。只是我个人妄想写function时出了问题而已，并不代表前面的代码作废了。而且我折腾了这么久，也是该换个战场了。</n></3></1></p><p>那位大神写的代码有几个点是很好的，可以以后用。比如展开tuple的方式值得参考，反射的机制也值得学习。还有一些诸如为什么要用forward,decay,为什么要去除引用，其实我也没太清楚。就当我糊里糊涂学过了吧。</p><p>我还想再说一下那个展开tuple的事情，太涨知识了。但也只能等遥遥无期的有一天再讲了。</p><p>最后还是再完善一下那位大神的注释吧。<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> once</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;type_traits&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;tuple&gt;</span></span></span><br><span class="line"><span class="keyword">namespace</span> simple &#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">// placeholder</span></span><br><span class="line"><span class="comment">//其作用相当于标识而已</span></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">int</span> N&gt;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">placeholder</span> &#123;</span>&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">static</span> placeholder&lt;<span class="number">1</span>&gt; _1; <span class="keyword">static</span> placeholder&lt;<span class="number">6</span>&gt;  _6;  <span class="keyword">static</span> placeholder&lt;<span class="number">11</span>&gt; _11; <span class="keyword">static</span> placeholder&lt;<span class="number">16</span>&gt; _16;</span><br><span class="line"><span class="keyword">static</span> placeholder&lt;<span class="number">2</span>&gt; _2; <span class="keyword">static</span> placeholder&lt;<span class="number">7</span>&gt;  _7;  <span class="keyword">static</span> placeholder&lt;<span class="number">12</span>&gt; _12; <span class="keyword">static</span> placeholder&lt;<span class="number">17</span>&gt; _17;</span><br><span class="line"><span class="keyword">static</span> placeholder&lt;<span class="number">3</span>&gt; _3; <span class="keyword">static</span> placeholder&lt;<span class="number">8</span>&gt;  _8;  <span class="keyword">static</span> placeholder&lt;<span class="number">13</span>&gt; _13; <span class="keyword">static</span> placeholder&lt;<span class="number">18</span>&gt; _18;</span><br><span class="line"><span class="keyword">static</span> placeholder&lt;<span class="number">4</span>&gt; _4; <span class="keyword">static</span> placeholder&lt;<span class="number">9</span>&gt;  _9;  <span class="keyword">static</span> placeholder&lt;<span class="number">14</span>&gt; _14; <span class="keyword">static</span> placeholder&lt;<span class="number">19</span>&gt; _19;</span><br><span class="line"><span class="keyword">static</span> placeholder&lt;<span class="number">5</span>&gt; _5; <span class="keyword">static</span> placeholder&lt;<span class="number">10</span>&gt; _10; <span class="keyword">static</span> placeholder&lt;<span class="number">15</span>&gt; _15; <span class="keyword">static</span> placeholder&lt;<span class="number">20</span>&gt; _20;</span><br><span class="line"></span><br><span class="line"><span class="comment">// sequence &amp; generater</span></span><br><span class="line"><span class="comment">//生成一个&lt;1,2,3...,N&gt;的序列以展开tuple</span></span><br><span class="line"><span class="comment">//避免了递归的复杂操作</span></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">int</span>... N&gt;<span class="comment">//这个int... N 才是序列的精髓</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">seq</span> &#123;</span> <span class="keyword">typedef</span> seq&lt;N..., <span class="keyword">sizeof</span>...(N)&gt; next_type; &#125;;</span><br><span class="line"><span class="comment">//生成序列！ </span></span><br><span class="line"><span class="comment">// seq&lt;0&gt;::next_type == seq&lt;0,1&gt;</span></span><br><span class="line"><span class="comment">// seq&lt;0&gt;::next_type::next_type == seq&lt;0,1,2&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span>... P&gt;<span class="comment">//为什么先声明后定义和我上文写的差不多</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">gen</span>;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span> &lt;&gt;<span class="comment">//递归终止</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">gen</span>&lt;&gt;</span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="keyword">typedef</span> seq&lt;&gt; seq_type;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> P1, <span class="keyword">typename</span>... P&gt;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">gen</span>&lt;P1, P...&gt;</span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="keyword">typedef</span> <span class="keyword">typename</span> gen&lt;P...&gt;::seq_type::next_type seq_type;<span class="comment">// 返回0---输入个数-1的序列 </span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// select</span></span><br><span class="line"><span class="comment">//选择参数</span></span><br><span class="line"><span class="comment">//如tuple1 &lt;1,_1,1.2,_3&gt; tuple2 &lt;1,2,’c’&gt;</span></span><br><span class="line"><span class="comment">//int... N(注:序列生成的东西)=&lt;0,1,2,...,N-1&gt;(N为tuple1的元素个数)</span></span><br><span class="line"><span class="comment">//则对于N=0,get&lt;0&gt;(tuple1)=1,传入参数1；</span></span><br><span class="line"><span class="comment">//对于N=2,get&lt;1&gt;(tuple1)=placeholder&lt;1&gt;,传入参数get&lt;1&gt;(tuple2)(注：即 1);</span></span><br><span class="line"><span class="comment">//对于N=3,get&lt;2&gt;(tuple1)=placeholder&lt;1&gt;,传入参数get&lt;2&gt;(tuple2)(注：即 'c');</span></span><br><span class="line"><span class="comment">//最终参数变成(1,1,1.2,'c')</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> T, <span class="class"><span class="keyword">class</span> <span class="title">TupleT</span>&gt;</span></span><br><span class="line"><span class="class"><span class="title">inline</span> <span class="title">auto</span> <span class="title">select</span>(<span class="title">T</span>&amp;&amp; <span class="title">val</span>, <span class="title">TupleT</span>&amp; /*<span class="title">tp</span>*/) -&gt; <span class="title">T</span>&amp;&amp;</span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">std</span>::forward&lt;T&gt;(val);<span class="comment">//传入事先设定好的默认参数 </span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">int</span> N, <span class="class"><span class="keyword">class</span> <span class="title">TupleT</span>&gt;</span></span><br><span class="line"><span class="class"><span class="title">inline</span> <span class="title">auto</span> <span class="title">select</span>(<span class="title">placeholder</span>&lt;N&gt;, <span class="title">TupleT</span>&amp; <span class="title">tp</span>) -&gt; <span class="title">decltype</span>(<span class="title">std</span>:</span>:get&lt;N - <span class="number">1</span>&gt;(tp))</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">std</span>::get&lt;N - <span class="number">1</span>&gt;(tp);<span class="comment">//tp中第N-1个参数对应placeholder&lt;N&gt;，即placeholder&lt;1&gt;(_1)对应第一个参数 </span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// result type traits</span></span><br><span class="line"><span class="comment">//取函数返回类型 </span></span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> F&gt;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">result_traits</span> :</span> result_traits&lt;<span class="keyword">decltype</span>(&amp;F::<span class="keyword">operator</span>())&gt; &#123;&#125;;<span class="comment">// 取仿函数返回类型 </span></span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">result_traits</span>&lt;T*&gt; :</span> result_traits&lt;T&gt; &#123;&#125;;<span class="comment">// 取非指针类型，再继续判断 </span></span><br><span class="line"></span><br><span class="line"><span class="comment">/* check function */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> R, <span class="keyword">typename</span>... P&gt;<span class="comment">//取普通函数、成员函数返回类型 </span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">result_traits</span>&lt;R(*)(P...)&gt; &#123;</span> <span class="keyword">typedef</span> R type; &#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* check member function */</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//兼容函数cv符</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> RESULT_TRAITS__(...) \</span></span><br><span class="line">    <span class="keyword">template</span> &lt;<span class="keyword">typename</span> R, <span class="keyword">typename</span> C, <span class="keyword">typename</span>... P&gt; \</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">result_traits</span>&lt;R(C::*)(P...) __VA_ARGS__&gt; &#123;</span> <span class="keyword">typedef</span> R type; &#125;;</span><br><span class="line"></span><br><span class="line">RESULT_TRAITS__()</span><br><span class="line">RESULT_TRAITS__(<span class="keyword">const</span>)</span><br><span class="line">RESULT_TRAITS__(<span class="keyword">volatile</span>)</span><br><span class="line">RESULT_TRAITS__(<span class="keyword">const</span> <span class="keyword">volatile</span>)</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">undef</span> RESULT_TRAITS__</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// The invoker for call a callable</span></span><br><span class="line"><span class="comment">// 调用一个可调用的程序  反射</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt;<span class="comment">//是否为指针 </span></span><br><span class="line"><span class="comment">//事实上当初传入引用（而且是右值引用）仅仅是为了节约时间，这里要先去除引用</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">is_pointer_noref</span></span></span><br><span class="line"><span class="class">    :</span> <span class="built_in">std</span>::is_pointer&lt;<span class="keyword">typename</span> <span class="built_in">std</span>::remove_reference&lt;T&gt;::type&gt;</span><br><span class="line">&#123;&#125;;</span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt;<span class="comment">//是否为成员函数 </span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">is_memfunc_noref</span></span></span><br><span class="line"><span class="class">    :</span> <span class="built_in">std</span>::is_member_function_pointer&lt;<span class="keyword">typename</span> <span class="built_in">std</span>::remove_reference&lt;T&gt;::type&gt;</span><br><span class="line">&#123;&#125;;</span><br><span class="line"><span class="comment">/////////////函数绑定的执行程序 </span></span><br><span class="line"><span class="comment">//R为返回值,F为函数指针,this_XXX为对象实例|指针，</span></span><br><span class="line"><span class="comment">//类比函数指针调用方法就很好理解了</span></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> R, <span class="keyword">typename</span> F, <span class="keyword">typename</span>... P&gt;<span class="comment">//普通函数指针</span></span><br><span class="line"><span class="keyword">inline</span> <span class="keyword">typename</span> <span class="built_in">std</span>::enable_if&lt;is_pointer_noref&lt;F&gt;::value,</span><br><span class="line">R&gt;::<span class="function">type <span class="title">invoke</span><span class="params">(F&amp;&amp; f, P&amp;&amp;... par)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> (*<span class="built_in">std</span>::forward&lt;F&gt;(f))(<span class="built_in">std</span>::forward&lt;P&gt;(par)...);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> R, <span class="keyword">typename</span> F, <span class="keyword">typename</span> P1, <span class="keyword">typename</span>... P&gt;<span class="comment">//对象指针</span></span><br><span class="line"><span class="keyword">inline</span> <span class="keyword">typename</span> <span class="built_in">std</span>::enable_if&lt;is_memfunc_noref&lt;F&gt;::value &amp;&amp; is_pointer_noref&lt;P1&gt;::value,</span><br><span class="line">R&gt;::<span class="function">type <span class="title">invoke</span><span class="params">(F&amp;&amp; f, P1&amp;&amp; this_ptr, P&amp;&amp;... par)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> (<span class="built_in">std</span>::forward&lt;P1&gt;(this_ptr)-&gt;*<span class="built_in">std</span>::forward&lt;F&gt;(f))(<span class="built_in">std</span>::forward&lt;P&gt;(par)...);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> R, <span class="keyword">typename</span> F, <span class="keyword">typename</span> P1, <span class="keyword">typename</span>... P&gt;<span class="comment">//对象成员函数 </span></span><br><span class="line"><span class="keyword">inline</span> <span class="keyword">typename</span> <span class="built_in">std</span>::enable_if&lt;is_memfunc_noref&lt;F&gt;::value &amp;&amp; !is_pointer_noref&lt;P1&gt;::value,</span><br><span class="line">R&gt;::<span class="function">type <span class="title">invoke</span><span class="params">(F&amp;&amp; f, P1&amp;&amp; this_obj, P&amp;&amp;... par)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> (<span class="built_in">std</span>::forward&lt;P1&gt;(this_obj).*<span class="built_in">std</span>::forward&lt;F&gt;(f))(<span class="built_in">std</span>::forward&lt;P&gt;(par)...);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> R, <span class="keyword">typename</span> F, <span class="keyword">typename</span>... P&gt;<span class="comment">//普通函数 </span></span><br><span class="line"><span class="keyword">inline</span> <span class="keyword">typename</span> <span class="built_in">std</span>::enable_if&lt;!is_pointer_noref&lt;F&gt;::value &amp;&amp; !is_memfunc_noref&lt;F&gt;::value,</span><br><span class="line">R&gt;::<span class="function">type <span class="title">invoke</span><span class="params">(F&amp;&amp; f, P&amp;&amp;... par)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">std</span>::forward&lt;F&gt;(f)(<span class="built_in">std</span>::forward&lt;P&gt;(par)...);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Simple functor for bind function's return type</span></span><br><span class="line"><span class="comment">//一个简单的function实现，只是使用有点差异</span></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> FuncT, <span class="keyword">typename</span>... ArgsT&gt;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">fr</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="comment">//private</span></span><br><span class="line">    <span class="keyword">typedef</span> <span class="built_in">std</span>::tuple&lt;<span class="keyword">typename</span> <span class="built_in">std</span>::decay&lt;ArgsT&gt;::type...&gt; args_type;<span class="comment">//函数变量 因为是变参，所以要封装成tuple </span></span><br><span class="line">    <span class="keyword">typedef</span> <span class="keyword">typename</span> <span class="built_in">std</span>::decay&lt;FuncT&gt;::type                callable_type;<span class="comment">//函数体 </span></span><br><span class="line">    <span class="keyword">typedef</span> <span class="keyword">typename</span> result_traits&lt;callable_type&gt;::type     result_type;<span class="comment">//返回值 </span></span><br><span class="line"></span><br><span class="line">    callable_type call_;<span class="comment">//函数体 </span></span><br><span class="line">    args_type     args_;<span class="comment">//函数变量 </span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span> <span class="title">TupleT</span>, <span class="title">int</span>... <span class="title">N</span>&gt;</span></span><br><span class="line"><span class="class">    <span class="title">result_type</span> <span class="title">do_call</span>(<span class="title">TupleT</span>&amp; <span class="title">tp</span>/*运行时传入的参数*/, <span class="title">seq</span>&lt;N...&gt;)//运行 </span></span><br><span class="line"><span class="class">    &#123;</span><span class="comment">//select就是选取参数的那一步</span></span><br><span class="line">        <span class="keyword">return</span> invoke&lt;result_type&gt;(call_, select(<span class="built_in">std</span>::get&lt;N&gt;(args_), tp)...);<span class="comment">//巧妙应用...的方法 </span></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="keyword">template</span>&lt;<span class="keyword">typename</span> F, <span class="keyword">typename</span>... P&gt;<span class="comment">//初始化 </span></span><br><span class="line">    fr(F&amp;&amp; f, P&amp;&amp;... par)</span><br><span class="line">        : call_(<span class="built_in">std</span>::forward&lt;F&gt;(f))</span><br><span class="line">        , args_(<span class="built_in">std</span>::forward&lt;P&gt;(par)...)</span><br><span class="line">    &#123;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">template</span> &lt;<span class="keyword">typename</span>... P&gt;<span class="comment">//正式调用 </span></span><br><span class="line">    <span class="function">result_type <span class="title">operator</span><span class="params">()</span><span class="params">(P&amp;&amp;... par)</span><span class="comment">//调用时的参数 </span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">            &lt;MSVC 2013&gt; type_traits(1509): fatal error C1001</span></span><br><span class="line"><span class="comment">            With: std::forward&lt;P&gt;(par)...</span></span><br><span class="line"><span class="comment">        */</span></span><br><span class="line">        <span class="built_in">std</span>::tuple&lt;<span class="keyword">typename</span> <span class="built_in">std</span>::decay&lt;P&gt;::type...&gt; pars(<span class="keyword">static_cast</span>&lt;P&amp;&amp;&gt;(par)...);<span class="comment">//没看懂为什么是static_cast</span></span><br><span class="line">        <span class="keyword">return</span> do_call(pars, <span class="keyword">typename</span> gen&lt;ArgsT...&gt;::seq_type());<span class="comment">//这个gen返回&lt;0,1,2,...,参数个数-1&gt; </span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Bind function arguments</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> F, <span class="keyword">typename</span>... P&gt;</span><br><span class="line"><span class="keyword">inline</span> fr&lt;F, P...&gt; bind(F&amp;&amp; f, P&amp;&amp;... par)<span class="comment">//一个小封装 </span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">return</span> fr&lt;F, P...&gt;(<span class="built_in">std</span>::forward&lt;F&gt;(f), <span class="built_in">std</span>::forward&lt;P&gt;(par)...);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125; <span class="comment">// namespace simple</span></span><br></pre></td></tr></table></figure></p><p>补充，事实上它这个function和原生的function功能一模一样。所以如果要用function，直接用这种实现方式就行了，不必按我的奇葩想法去做。（当然你要保证你的这个function未来不会有改动，或者“阅后即焚”）。</p><h3 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h3><p>c++函数之旅只能不了了之了。因为我实在没时间了。未来打算学一下thread和autoptr，然后基本上就转行了。结尾之际，再次说一句真理：c++堕落人性毁人生。</p>]]></content>
      
      
      <categories>
          
          <category> 笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> c++ </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>c++函数（1）</title>
      <link href="/2018/10/27/c-%E5%87%BD%E6%95%B0%EF%BC%881%EF%BC%89/"/>
      <url>/2018/10/27/c-%E5%87%BD%E6%95%B0%EF%BC%881%EF%BC%89/</url>
      
        <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>本人一向很水，但看在我立了flag的缘故，不得不收起惰性，忍受着谜之网速和极其明显的作业做不完的凉凉之感，在此为大家写。作为第二次，谨此纪念。<br>本篇为了体现我不是一个水货（虽然事实上就是），将讨论得深一点。</p><a id="more"></a><h2 id="正文"><a href="#正文" class="headerlink" title="正文"></a>正文</h2><p>先快速过一下基础知识。。。</p><h3 id="函数模板"><a href="#函数模板" class="headerlink" title="函数模板"></a>函数模板</h3><p>函数模板作为函数重载的“高级”版本，事实上作用早就超出了一般的重载。比如一个巧妙地获取数组长度的函数<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">template</span>&lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>,<span class="title">size_t</span> <span class="title">N</span>&gt;</span></span><br><span class="line"><span class="class"><span class="title">size_t</span> <span class="title">len</span>(<span class="title">const</span> <span class="title">T</span> (&amp;<span class="title">arr</span>)[<span class="title">N</span>])&#123;</span></span><br><span class="line"><span class="keyword">return</span> N;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>它可以获取所有一般数组（不包括自定义容器），但在面对string等时有一个小bug（末尾有一个‘\n’,而很明显我们并不想算入数组长度），所以需要一个特例化的模板。<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">size_t</span> N&gt;</span><br><span class="line"><span class="keyword">size_t</span> len(<span class="keyword">const</span> <span class="keyword">char</span> (&amp;arr)[N])&#123;</span><br><span class="line"><span class="keyword">return</span> N<span class="number">-1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>大功告成。<del> 事实上，对任意容器，应该也可以用类似的办法获取长度（用迭代器？） </del>。还好检查了一下，以上程序不使用于char* 和任意非数组类型。用迭代的方法取长度怪怪的，虽然容器类大多都有迭代器。<br>可参考<a href="https://blog.csdn.net/lezardfu/article/details/56852043" target="_blank" rel="noopener">https://blog.csdn.net/lezardfu/article/details/56852043</a></p><h3 id="类模板"><a href="#类模板" class="headerlink" title="类模板"></a>类模板</h3><p>与函数模板很像，只不过更加好玩。它可以传入常量参数，所以说它诞生了一个毁青春的东西，模板元编程。</p><h3 id="模板元（搞笑的）"><a href="#模板元（搞笑的）" class="headerlink" title="模板元（搞笑的）"></a>模板元（搞笑的）</h3><p>可参考:</p><ul><li><a href="https://www.cnblogs.com/qicosmos/p/4480460.html" target="_blank" rel="noopener">https://www.cnblogs.com/qicosmos/p/4480460.html</a></li><li>一本书,<a href="https://pan.baidu.com/s/1koS_qOHH0gNdiSH-V_J7mQ" title="下载pdf" target="_blank" rel="noopener">模板元编程</a></li></ul><h3 id="函数指针"><a href="#函数指针" class="headerlink" title="函数指针"></a>函数指针</h3><p>实在没什么说的，上代码。<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">foo</span><span class="params">(<span class="keyword">int</span> a,<span class="keyword">int</span> b)</span></span>&#123;&#125;;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">bar</span>&#123;</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">a</span><span class="params">(<span class="keyword">int</span> b)</span></span>&#123;&#125;;</span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">g</span><span class="params">(<span class="keyword">int</span> b)</span></span>&#123;&#125;;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">typedef</span> <span class="title">int</span><span class="params">(*pfn1)</span><span class="params">(<span class="keyword">int</span>,<span class="keyword">int</span>)</span></span>;</span><br><span class="line"><span class="comment">//通式： 返回类型（*变量名）（参数列表）= 函数名 //可不加 &amp;</span></span><br><span class="line"><span class="comment">//通式2： 返回类型（*命名空间::变量名）（参数列表）= &amp;命名空间::函数名 //必须有 &amp;</span></span><br><span class="line"><span class="keyword">int</span>(*pfn2)(<span class="keyword">int</span>,<span class="keyword">int</span>) =foo;</span><br><span class="line"><span class="comment">//= pfn1 pfn2=foo</span></span><br><span class="line"><span class="keyword">int</span>(*bar::pfn3)(<span class="keyword">int</span>)=&amp;bar::a;</span><br><span class="line"><span class="keyword">void</span>(*pfn4)(<span class="keyword">int</span>)=bar::g;<span class="comment">//static 相当于独立于类之外</span></span><br><span class="line">bar test;</span><br><span class="line">(*test.pfn3)(<span class="number">1</span>);<span class="comment">//使用必须有一个实例</span></span><br><span class="line">pfn4(<span class="number">5</span>);<span class="comment">//static 不用</span></span><br></pre></td></tr></table></figure></p><p>注意几点</p><ol><li>指针的正确书写</li><li>正确使用</li></ol><p>可参考：<br><a href="https://blog.csdn.net/u010525694/article/details/72897766" target="_blank" rel="noopener">https://blog.csdn.net/u010525694/article/details/72897766</a></p><p>开始秀起来了</p><h3 id="仿函数-functor"><a href="#仿函数-functor" class="headerlink" title="仿函数 functor"></a>仿函数 functor</h3><p>所谓仿函数，并不复杂，仅仅是一个实现了 operator() 的类罢了。但还是会给编程带了很多便利，例如<a href="https://www.cnblogs.com/decade-dnbc66/p/5347088.html" title="感谢原作者" target="_blank" rel="noopener">count_if</a>。<br>若想深究，可自行搜索，此处不再赘述。<br>可参考：<br><a href="https://blog.csdn.net/yansmile1/article/details/58603871" target="_blank" rel="noopener">https://blog.csdn.net/yansmile1/article/details/58603871</a></p><h3 id="c-11-可变模板参数"><a href="#c-11-可变模板参数" class="headerlink" title="c++11 可变模板参数"></a>c++11 可变模板参数</h3><p>这是一个好东西啊。本人长期信奉c++11大法，因为它太好用了。目前我才摸着边边，所以以下如果有错，别找我。<br>c++11大大加大了程序的泛化程度，有的程序因此变得更像程序，而有的，呵呵<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//某坑爹tuple</span></span><br><span class="line"><span class="comment">//转载于 http://www.cnblogs.com/qicosmos/p/3318070.html</span></span><br><span class="line"><span class="comment">//你认为我这个蒟蒻能和那些神犇比吗？不可能的。</span></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="class"><span class="keyword">class</span> <span class="title">Tuple</span>, <span class="title">std</span>:</span>:<span class="keyword">size_t</span> N&gt;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">TuplePrinter</span> &#123;</span></span><br><span class="line">    <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">print</span><span class="params">(<span class="keyword">const</span> Tuple&amp; t)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        TuplePrinter&lt;Tuple, N - <span class="number">1</span>&gt;::print(t);</span><br><span class="line">        <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">", "</span> &lt;&lt; <span class="built_in">std</span>::get&lt;N - <span class="number">1</span>&gt;(t);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="class"><span class="keyword">class</span> <span class="title">Tuple</span>&gt;</span></span><br><span class="line"><span class="class"><span class="title">struct</span> <span class="title">TuplePrinter</span>&lt;Tuple, 1&gt;&#123;</span></span><br><span class="line">    <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">print</span><span class="params">(<span class="keyword">const</span> Tuple&amp; t)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="built_in">std</span>::get&lt;<span class="number">0</span>&gt;(t);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="class"><span class="keyword">class</span>... <span class="title">Args</span>&gt;</span></span><br><span class="line"><span class="class"><span class="title">void</span> <span class="title">PrintTuple</span>(<span class="title">const</span> <span class="title">std</span>:</span>:tuple&lt;Args...&gt;&amp; t)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">"("</span>;</span><br><span class="line">    TuplePrinter&lt;<span class="keyword">decltype</span>(t), <span class="keyword">sizeof</span>...(Args)&gt;::print(t);</span><br><span class="line">    <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">")\n"</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//main</span></span><br><span class="line"><span class="keyword">auto</span> tp=make_tuple(<span class="number">1</span>,<span class="number">2</span>,<span class="number">12.5</span>);</span><br><span class="line">PrintTuple(tp);</span><br><span class="line"><span class="comment">// (1,2,12.5)</span></span><br></pre></td></tr></table></figure></p><p>c里面也有类似的，但不如这个好用。展开可变模板的方式很多。但我们要讲的不是这个。</p><h3 id="匿名函数-lamba"><a href="#匿名函数-lamba" class="headerlink" title="匿名函数 lamba"></a>匿名函数 lamba</h3><p>匿名函数也是个好东西，用没用过js的都知道。<br>它也有结构通式。<code>[捕获列表]（参数列表）-&gt;返回值{函数主体}</code>，其中返回值也可以自动推断，前提是计算量简单。捕获列表是个比较有趣的东西，因为它可以准确捕获外界变量。有些时候lamba也会和闭包（closure）（具体了解参见<a href="https://www.cnblogs.com/BigFeng/p/5204899.html" target="_blank" rel="noopener">https://www.cnblogs.com/BigFeng/p/5204899.html</a>）.<br>此处仍然不会详细讲，可参考<a href="https://www.cnblogs.com/DswCnblog/p/5629165.html" target="_blank" rel="noopener">https://www.cnblogs.com/DswCnblog/p/5629165.html</a>。</p><h3 id="c-11-function对象"><a href="#c-11-function对象" class="headerlink" title="c++11 function对象"></a>c++11 function对象</h3><p>终于，广大人民对函数指针的深恶痛绝终于转换成了无限的动力，<del>从此终于再也不用写函数指针了！</del><br>社会的进步就是在于抛弃旧的，迎接新的。看一下可爱的function对象吧。<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//#include&lt;functional&gt;</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">foo</span><span class="params">(<span class="keyword">int</span> a,<span class="keyword">int</span> b)</span></span>&#123;&#125;;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">bar</span>&#123;</span></span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">a</span><span class="params">(<span class="keyword">int</span> b)</span></span>&#123;&#125;;</span><br><span class="line">    <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">g</span><span class="params">(<span class="keyword">int</span> b)</span></span>&#123;&#125;;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">F</span>&#123;</span><span class="comment">//functor</span></span><br><span class="line"><span class="keyword">int</span> sum=<span class="number">0</span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">operator</span><span class="params">()</span><span class="params">(<span class="keyword">int</span> a)</span></span>&#123;</span><br><span class="line">sum+=a;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//int(*pfn2)(int,int) =foo;</span></span><br><span class="line">function&lt;<span class="keyword">int</span>(<span class="keyword">int</span>,<span class="keyword">int</span>)&gt; pfn2=foo;<span class="comment">//简不简单？</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//int(*bar::pfn3)(int)=&amp;bar::a;</span></span><br><span class="line">function&lt;<span class="keyword">int</span>(<span class="keyword">const</span> bar&amp;,<span class="keyword">int</span>)&gt; pfn3=&amp;bar::a;<span class="comment">//注意要传入一个实例作为函数中的this</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//void(*pfn4)(int)=bar::g;</span></span><br><span class="line">function&lt;<span class="keyword">void</span>(<span class="keyword">int</span>)&gt; pfn4=bar::g;</span><br><span class="line"></span><br><span class="line">bar test;</span><br><span class="line">pfn2();</span><br><span class="line"><span class="comment">//(*test.pfn3)(1);</span></span><br><span class="line">pfn3(test,<span class="number">1</span>);<span class="comment">//明显更加直观了，简洁了</span></span><br><span class="line">pfn4(<span class="number">5</span>);</span><br><span class="line"></span><br><span class="line">F f;</span><br><span class="line">function&lt;<span class="keyword">void</span>(<span class="keyword">int</span>)&gt; fn=f;</span><br><span class="line">fn(<span class="number">10</span>);<span class="comment">//发现sum值并没有改变，function按值传递</span></span><br><span class="line"><span class="comment">//如果要改变，则应为</span></span><br><span class="line"><span class="comment">//function&lt;void(int)&gt; fn=ref(reference_wrapper&lt;F&gt;(f));//ref_warp可以不用</span></span><br></pre></td></tr></table></figure></p><p>可参考：<a href="https://www.cnblogs.com/yyxt/p/3987717.html" target="_blank" rel="noopener">https://www.cnblogs.com/yyxt/p/3987717.html</a></p><h3 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h3><p>深感力不从心ing。还有一点，下次再来吧。这次先到此为止。下次大概是bind和functional的个人解读，可能还有其它的。最后还是感谢各位神犇的大力支持，感谢文中出现过或默默无闻的其他文章作者们。最后加一个链接<a href="https://github.com/shihaipeng/hello-world/blob/master/c%2B%2B%E5%87%BD%E6%95%B0%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0.cpp" title="很水的..." target="_blank" rel="noopener">个人学习笔记</a>.</p>]]></content>
      
      
      <categories>
          
          <category> 笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> c++ </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>hexo第一课</title>
      <link href="/2018/02/10/hexo%E7%AC%AC%E4%B8%80%E8%AF%BE/"/>
      <url>/2018/02/10/hexo%E7%AC%AC%E4%B8%80%E8%AF%BE/</url>
      
        <content type="html"><![CDATA[<html><br><head><meta name="generator" content="Hexo 3.8.0"><br>    <meta charset="utf-8"><br>    <style type="text/css"><br>        p{<br>            text-indent: 2em;<br>        }<br>    </style><br></head><br><body><br>    <h1>用hexo搭建一个私人博客（1）</h1><br>    <h3>1.什么是hexo</h3><br>    <p>hexo是一个轻量级的博客框架，相较于其他博客框架，它更加灵活，也更能满足个人的定制欲望缺点自然也是有的，它的组件还不成熟，如评论和目录等还需要第三方的程序实现。如果你比较喜欢社交，那么如新浪微博可能更加适合你，但如果你喜欢独立自主，又爱编程，那么hexo还是一个不错的选择</p><br><br>    <h3>2.如何配置环境</h3><br>    <p>下载git，node.js等需要的环境，可参照<a href="https://hexo.io/zh-cn/docs/" alt="帮助文档" target="_blank">https://hexo.io/zh-cn/docs/</a></p><br><br>    <h3>3.如何开始</h3><br>    <p>按照文档的说明，在随便哪个地方运行hexo init &lt;随便一个名字&gt;,cd &lt;名字&gt;（进入文件夹）,npm install（安装npm环境）</p><br>    <p>如我想建在D盘</p><br>    <p>打开cmd,进入指定文件夹</p><br>    <p>按照指定的步骤执行</p><br>    <p>以下省略</p><br><br>    <h3>4.如何创建文章</h3><br>    <p>个人推荐：直接在/source/_post/中建立一个文本名为.md的文档，建议直接用html编写（原本hexo的一大亮点就在于支持Markdown语法—一个苹果程序员闲的蛋疼搞得）</p><br><br>    <h3>5.如何配置信息</h3><br>    <p>在两个地方配置，一是根目录下的_config.yml，二是themes下你选的主题的_config.yml</p><br>    <img src="https://ws1.sinaimg.cn/large/0072Lfvtly1fzapjga7kuj30sr0hgq54.jpg" title="theme设置主题，值为themes中主题的文件夹名；depoly设置仓库，也就是网站上线的配置信息"><br>    <p>中国在网站上有极大发言权，一般好看的主题都是made in China，所以也就更好配置了</p><br><br>    <h3>6.总结</h3><br>    <p>我才发现打文章这么累，看来下次你想干什么我还是发视频吧。这一点还没有完，至少这个博客还没有上线。上线推荐用github，毕竟免费。好累呀，不多说了</p><br></body><br></html>]]></content>
      
      
      <categories>
          
          <category> 网页 框架 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> hexo </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
