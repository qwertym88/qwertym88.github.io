<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>esp32学习笔记(一)</title>
      <link href="/2022/07/25/esp32%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0-%E4%B8%80/"/>
      <url>/2022/07/25/esp32%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0-%E4%B8%80/</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>本人曾经对老师夸下海口并妄称自己会esp32。近来研究esp32，发现别说是会了，就连那些最基本的都不清楚。想到我向来记忆力低下，今天的研究成果过几天就又会忘干净。于是下此决心，学一点记一点。（虽然以前也是这么自我标榜的，然后果断当了太监就是了）<br><a id="more"></a><br>第一篇主要介绍基本的点亮led，涉及如下内容：</p><ul><li>blink</li><li>touchPad</li><li>timer</li></ul><h2 id="论如何运行HelloWorld"><a href="#论如何运行HelloWorld" class="headerlink" title="论如何运行HelloWorld"></a>论如何运行HelloWorld</h2><p>自打抛弃了Arduino IDE而改为使用platformIO后，感觉编程效率一下子快了好多。不过目前为止，我对于platformIO的熟练度不能说是了如指掌嘛，也得说是一点不会了。platformIO创建新项目特别慢，据说科学上网能稍有改善。然后就是和arduino的兼容问题了。一般而言vscode这边都不会出什么大问题，但毕竟另一个是arduino，往往会有一些意想不到的诡异情况发生。这里点名批评下面这个库。且不说什么兼容性问题了，居然还会编译出错（一处类型转换时没主意导致的报错），虽然在arduino下完全没问题，但换了个编译器就出一堆问题。不过其实也能够理解，毕竟谁都不想做兼容，我也一样。<br><img src="/2022/07/25/esp32学习笔记-一/1.png"><br>还有一个比较坑的地方，容易被初见杀。就是很多时候编译项目时会报诸如“Wire.h/SPI.h not found”的错，但按照直觉上来看，这玩意应该不用写在lib_deps里面。事实上是需要的。比如说下图，得写成这个样子才能过编译。我个人觉着啊，你看其他的外设都不用这么写，为啥就这两个需要，就挺奇葩的，实在是无法理解。<br><img src="/2022/07/25/esp32学习笔记-一/2.png"><br>最后记住对应的led引脚即可。</p><h2 id="论touchPad功能的使用"><a href="#论touchPad功能的使用" class="headerlink" title="论touchPad功能的使用"></a>论touchPad功能的使用</h2><p>鉴定为不用深究。就只需要记住有这个功能就行。对照下图和pins_arduino.h中定义的各个引脚别称，很容易知道用哪个引脚。<br><img src="/2022/07/25/esp32学习笔记-一/3.png"><br><img src="/2022/07/25/esp32学习笔记-一/4.png"><br>touchpad的库超级简单，甚至真的就只有两个函数，功能如下。<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* 原理事实上是感应电容变化</span></span><br><span class="line"><span class="comment"> * 读取值，越接近0说明触碰到了</span></span><br><span class="line"><span class="comment"> * 事先用这个测一个合适的界定碰还是没碰的阈值，</span></span><br><span class="line"><span class="comment"> * 不想麻烦的话40就可以了</span></span><br><span class="line"><span class="comment"> * */</span></span><br><span class="line"><span class="keyword">uint16_t</span> touchRead(<span class="keyword">uint8_t</span> pin);</span><br><span class="line"><span class="comment">// e.g. Serial.println(touchRead(T0));</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * 低于阈值时（按下时）触发userFunc，一般设成40就行，是中断</span></span><br><span class="line"><span class="comment"> * */</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">touchAttachInterrupt</span><span class="params">(<span class="keyword">uint8_t</span> pin, <span class="keyword">void</span> (*userFunc)(<span class="keyword">void</span>), <span class="keyword">uint16_t</span> threshold)</span></span>;</span><br><span class="line"><span class="comment">// e.g. touchAttachInterrupt(T0, touch_cb, 40);</span></span><br></pre></td></tr></table></figure></p><p>有一说一，挺灵敏的。</p><h2 id="论timer的正确使用方式"><a href="#论timer的正确使用方式" class="headerlink" title="论timer的正确使用方式"></a>论timer的正确使用方式</h2><p>详细见<a href="https://docs.espressif.com/projects/esp-idf/en/stable/esp32/api-reference/system/esp_timer.html" target="_blank" rel="noopener">官方文档</a>，这里来个短平快结果导向的用法介绍。<br>如果只是记录运行时间，操作如下：</p><ol><li>setup中esp_timer_init();</li><li>想啥时候知道时间，调用esp_timer_get_time()，单位us。</li></ol><p>如果是正常定时中断，流程为：</p><ol><li>esp_timer_init();</li><li>typedef arg_t; （如果没有参数就跳过这个思考步骤）</li><li>esp_timer_create_args_t timerInfo = {}</li><li>void cb(void *arg)</li><li>esp_timer_create(&amp;timerInfo, &amp;myTimer);</li><li>esp_timer_start_periodic(myTimer, 1e6);</li></ol><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 多参数可以写成这样子的结构体，然后定义待传入参数为全局变量方便每一次更新参数</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">  <span class="keyword">int</span> a;</span><br><span class="line">  <span class="keyword">bool</span> b;</span><br><span class="line">  u_char c;</span><br><span class="line">&#125; <span class="keyword">arg_t</span>;</span><br><span class="line"><span class="keyword">arg_t</span> myArg = &#123;<span class="number">100</span>, <span class="number">0</span>, <span class="string">'c'</span>&#125;;</span><br><span class="line"><span class="comment">// 回调函数格式固定</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">cb</span><span class="params">(<span class="keyword">void</span> *arg)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">arg_t</span> *data = (<span class="keyword">arg_t</span> *)arg; <span class="comment">// 解包传入的数据</span></span><br><span class="line">  <span class="comment">// do something...</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 计时器实例，全局方便开启、暂停、删除。</span></span><br><span class="line">esp_timer *myTimer;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* setup */</span></span><br><span class="line"><span class="comment">// 1. 库初始化</span></span><br><span class="line">esp_timer_init();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 2. 写需要执行的回调和回调需要的参数</span></span><br><span class="line"><span class="keyword">esp_timer_create_args_t</span> timerInfo = &#123;</span><br><span class="line">    .callback = cb,</span><br><span class="line">    .arg = &amp;myArg&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 3. 创建实例</span></span><br><span class="line">esp_timer_create(&amp;timerInfo, &amp;myTimer);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 4. 控制开始、停止、删除</span></span><br><span class="line">esp_timer_start_periodic(myTimer, <span class="number">1e6</span>); <span class="comment">// 单位us</span></span><br></pre></td></tr></table></figure><p>这里提供一个综合实例。效果为触碰一次p4（T0）引脚，灯改变一次状态，内置1s cd。<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;Arduino.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"esp_timer.h"</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">bool</span> locked = <span class="literal">false</span>;</span><br><span class="line">esp_timer *lockTimer;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">timer_cb</span><span class="params">(<span class="keyword">void</span> *arg)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  locked = <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">touch_cb</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">static</span> <span class="keyword">bool</span> status = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">if</span> (!locked)</span><br><span class="line">  &#123;</span><br><span class="line">    locked = <span class="literal">true</span>;</span><br><span class="line">    digitalWrite(LED_BUILTIN, !status);</span><br><span class="line">    status = !status;</span><br><span class="line">    esp_timer_start_once(lockTimer, <span class="number">1e6</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">setup</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  Serial.begin(<span class="number">9600</span>);</span><br><span class="line">  pinMode(LED_BUILTIN, OUTPUT);</span><br><span class="line">  touchAttachInterrupt(T0, touch_cb, <span class="number">40</span>);</span><br><span class="line"></span><br><span class="line">  esp_timer_init();</span><br><span class="line">  <span class="keyword">esp_timer_create_args_t</span> timerInfo = &#123;</span><br><span class="line">      .callback = timer_cb&#125;;</span><br><span class="line">  esp_timer_create(&amp;timerInfo, &amp;lockTimer);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">loop</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>]]></content>
      
      
      <categories>
          
          <category> 笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> esp32 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>石真人传</title>
      <link href="/2021/03/21/%E7%9F%B3%E7%9C%9F%E4%BA%BA%E4%BC%A0/"/>
      <url>/2021/03/21/%E7%9F%B3%E7%9C%9F%E4%BA%BA%E4%BC%A0/</url>
      
        <content type="html"><![CDATA[<p>西蜀石海鹏者，本惠州保安人也。久为郫县客，栖居远郊，而纵情山水。常游于岷江之涘，时临渊怅望，时溯流纵行。三书生异之，相觑而议之。</p><p>子虚曰“‘践椒途之郁烈，步蘅皋而流芳’，此非子健之遇宓妃欤？‘动雾縠以徐步兮，拂墀声之珊珊’，此非宋玉之睹神女欤？翩若彩蝶，狡如飞鹜。静如古井，彯如晓雾。伫立聘望，如青松出磐石；忽然焉纵体，如飞鸢逐脱兔。驾云蔼之流芳，溯惠风之和煦。因四顾之速援，始嫚嫚而近旁。远而望之，健如怒涛卷霜雪，迫而查之，婉若游丝系翠帘。眉削千山松涛，目含万里秋波。微步兰皋，胜柳曳之嬛柔；转眄流精，具灵娇之烂媔。㛹娟熠耀，顾盼含情。光润玉颜，芳泽无加。感南湘之二妃，匹匏瓜于织女。于是征和神契，目遇星汉。徙倚彷徨，欲往又还。凄思内旷，戚理妙观。时不可得，容与自安。“</p><p>其言未毕，乌有抚须而笑之，曰：“大兄何见事之浅乎？其形也俊秀，其德也无匹。吾观其举止，皆出于自然。行乎所向，止乎所得，此圣人之象也。天地有道，阴阳有序，故可循其迹；吉凶倚伏，幽微难明，故需避其芒。和于大道之行，通于阴阳之变。演之以术数，得之以养生，是以不戚戚于贫贱，不汲汲于富贵。乘天地之正，御六气之变，是以安游于蓬蒿之间，翱翔于九天之外。其为人也，达则普度众生，穷则独善其身；近则治国弼政，退则放浪形骸。无名之圣贤，避人之重器，其此之谓乎？”</p><p>于是无是曰：“诚然。汝得其环中矣。然则身怀琬琰而不用，心系天下而不为，是亦其本心乎？扣帝阍而不见，请长缨而无处，越关山而失路，唯垂长杆以梦日。‘云锁楼台，雾迷津渡，此愁更与谁诉？秋水可知人憔悴，漭漭东流不知处。’其悲之挚，通于万物。云翳凝而沉滞，水汽泠而上集。既蹇澹流以感纯，复泣层林以和声。聆坠危之落木，眷僚慄之松涛。感惊鸿之无迹，恸浮萍之无依。乃瞻星汉，溯河梁，路超远，徒自伤。前路隐乎苍茫，空踟蹰而迷惘。吟行路以自赏，声哀历而弥长。其情也哀，其歌也悲。滞岷山之行云，浮九渊之蛟龙；感猿猱于哀鸣，和肃杀之秋风。为宫羽而变徵，一曲高而难和。此间千万孤独，又何可胜道哉”</p><p>忽焉黑云覆月，回风盘旋，摧千山之残叶，卷浮世之尘埃。迁客骚人，莫不迎风而泣，感极而悲。于是石海鹏扣长剑而歌之，歌曰：“噫吁嚱，此无用之风也！风之薄兮，不可举鲲鹏；风之劲兮，不可安松竹。呜呼哀哉！时与我而向违，复驾言兮焉求！风也，汝不合时宜为何！既已失路，复欲何如！欲借此风驱魍魉，直待云开见月明。“</p><p>俄而秋风疾而层云裂，婵娟现而月辉泄，细如银沙，皎若白霰。三人观之，惊骇莫可名状，相觑曰：”此真人也，吾险贻笑于大方之家。其还也。“遂叹然而去。</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>绘画</title>
      <link href="/2020/02/23/%E7%BB%98%E7%94%BB/"/>
      <url>/2020/02/23/%E7%BB%98%E7%94%BB/</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>折腾了一天的东西，由于几乎忘记了hexo的正确使用方法，加上曾经励志一年不编程，所以将最终成果另存了一个仓库而不是嵌套进去。<br>使用了Lazy Line Painter和一个svg绘图网站。<br>原图就是封面的那幅。</p><h2 id="正文"><a href="#正文" class="headerlink" title="正文"></a>正文</h2><p><a href="https://shihaipeng.github.io/a/" target="_blank" rel="noopener">传送门</a></p>]]></content>
      
      
      <categories>
          
          <category> 笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> js </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>关于cubism3模型点击区域的绑定</title>
      <link href="/2019/08/26/%E5%85%B3%E4%BA%8Ecubism3%E6%A8%A1%E5%9E%8B%E7%82%B9%E5%87%BB%E5%8C%BA%E5%9F%9F%E7%9A%84%E7%BB%91%E5%AE%9A/"/>
      <url>/2019/08/26/%E5%85%B3%E4%BA%8Ecubism3%E6%A8%A1%E5%9E%8B%E7%82%B9%E5%87%BB%E5%8C%BA%E5%9F%9F%E7%9A%84%E7%BB%91%E5%AE%9A/</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p><strong>首先感谢<a href="https://himehane.club/live2d_on_website/" target="_blank" rel="noopener">himehane</a>的帮助</strong><br>在看了他的文章后，有了把碧蓝航线的模型放到网页上的想法。正好此前有<a href="https://github.com/Perfare/AzurLaneLive2DExtract" target="_blank" rel="noopener">perfare</a>的项目提取live2d模型，剩下的就是如何使用了。<br><a id="more"></a><br>由于碧蓝航线的live2d是cubism3的，而且这方面的样例实在不多，所以我抱着瞎猫碰死耗子的心态试了一下官方的sdk。尝试许久，却总是在加载模型动作时报错（如下），多次尝试并不能找到报错的原因，同一个动作不同时候也会报不同的错（随机的？），模型确实是没问题的，但为什么不行不知道。最终我选择放弃。<br><img src="/2019/08/26/关于cubism3模型点击区域的绑定/1.png"></p><p>然后我想看看有没有转换的方法，找到了<a href="https://imjad.cn/archives/lab/add-dynamic-poster-girl-with-live2d-to-your-blog-03" target="_blank" rel="noopener">imjad</a>的博客，但是发现还是行不通。如果有工程文件(.canx?)时可以用，但我们提取到的是执行文件(.moc),而且好像也没有转回去的方法，所以也行不通。</p><p>最终在找到himehane的文章后，打算上手。但个人有强迫症，觉得点击区域绑定一朝做不好，模型就欠缺灵魂。最终在与官方sdk的两相对比后，有了下文</p><h2 id="关于点击区域的解释"><a href="#关于点击区域的解释" class="headerlink" title="关于点击区域的解释"></a>关于点击区域的解释</h2><p>参见<a href="http://live2d.pavostudio.com/doc/zh-cn/live2d/model-config-sdk3/#hitareas" target="_blank" rel="noopener">这个</a>解释（虽然并不是官方的，但很可以做参考），我们最先需要的就是知道区域ID指的是什么。（以下省略漫长的寻找过程）最终我们打开cubismviewer3(ow)，在.moc文件的artmesh下找到了我们要找的内容。<br><img src="/2019/08/26/关于cubism3模型点击区域的绑定/2.png"></p><p>再来寻找代码中的在哪。（以下省略同样漫长的寻找过程），最终在 _coremodel.drawables下找到了。<br><img src="/2019/08/26/关于cubism3模型点击区域的绑定/3.png"><br>所以我的模型的model3.json长成了这样<br><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line"><span class="attr">"Version"</span>: <span class="number">3</span>,</span><br><span class="line"><span class="attr">"FileReferences"</span>: &#123;</span><br><span class="line"><span class="attr">"Moc"</span>: <span class="string">"lafei_4.moc3"</span>,</span><br><span class="line"><span class="attr">"Textures"</span>: [</span><br><span class="line"><span class="string">"textures/texture_00.png"</span></span><br><span class="line">],</span><br><span class="line"><span class="attr">"Physics"</span>: <span class="string">"lafei_4.physics3.json"</span>,</span><br><span class="line"><span class="attr">"Motions"</span>: &#123;</span><br><span class="line"><span class="attr">"Touch"</span>: [</span><br><span class="line">&#123;</span><br><span class="line"><span class="attr">"File"</span>: <span class="string">"motions/main_1.motion3.json"</span></span><br><span class="line">&#125;,</span><br><span class="line">&#123;</span><br><span class="line"><span class="attr">"File"</span>: <span class="string">"motions/mission_complete.motion3.json"</span></span><br><span class="line">&#125;,</span><br><span class="line">&#123;</span><br><span class="line"><span class="attr">"File"</span>: <span class="string">"motions/complete.motion3.json"</span></span><br><span class="line">&#125;,</span><br><span class="line">&#123;</span><br><span class="line"><span class="attr">"File"</span>: <span class="string">"motions/mission.motion3.json"</span></span><br><span class="line">&#125;,</span><br><span class="line">&#123;</span><br><span class="line"><span class="attr">"File"</span>: <span class="string">"motions/main_2.motion3.json"</span></span><br><span class="line">&#125;</span><br><span class="line">],</span><br><span class="line"><span class="attr">"TouchHead"</span>: [</span><br><span class="line">&#123;</span><br><span class="line"><span class="attr">"File"</span>: <span class="string">"motions/touch_head.motion3.json"</span></span><br><span class="line">&#125;</span><br><span class="line">],</span><br><span class="line"><span class="attr">"Idle"</span>: [</span><br><span class="line">&#123;</span><br><span class="line"><span class="attr">"File"</span>: <span class="string">"motions/idle.motion3.json"</span></span><br><span class="line">&#125;,</span><br><span class="line">&#123;</span><br><span class="line"><span class="attr">"File"</span>: <span class="string">"motions/main_3.motion3.json"</span></span><br><span class="line">&#125;</span><br><span class="line">],</span><br><span class="line"><span class="attr">"TouchSpecial"</span>: [</span><br><span class="line">&#123;</span><br><span class="line"><span class="attr">"File"</span>: <span class="string">"motions/touch_special.motion3.json"</span></span><br><span class="line">&#125;</span><br><span class="line">]</span><br><span class="line">&#125;</span><br><span class="line">&#125;,</span><br><span class="line"><span class="attr">"Groups"</span>: [</span><br><span class="line">&#123;</span><br><span class="line"><span class="attr">"Target"</span>: <span class="string">"Parameter"</span>,</span><br><span class="line"><span class="attr">"Name"</span>: <span class="string">"LipSync"</span>,</span><br><span class="line"><span class="attr">"Ids"</span>: [</span><br><span class="line"><span class="string">"ParamMouthOpenY"</span></span><br><span class="line">]</span><br><span class="line">&#125;,</span><br><span class="line">&#123;</span><br><span class="line"><span class="attr">"Target"</span>: <span class="string">"Parameter"</span>,</span><br><span class="line"><span class="attr">"Name"</span>: <span class="string">"EyeBlink"</span>,</span><br><span class="line"><span class="attr">"Ids"</span>: [</span><br><span class="line"><span class="string">"ParamEyeLOpen"</span>,</span><br><span class="line"><span class="string">"ParamEyeROpen"</span></span><br><span class="line">]</span><br><span class="line">&#125;</span><br><span class="line">],</span><br><span class="line"><span class="attr">"HitAreas"</span>: [</span><br><span class="line">&#123;</span><br><span class="line"><span class="attr">"Name"</span>: <span class="string">"Touch"</span>,</span><br><span class="line"><span class="attr">"Id"</span>: <span class="string">"TouchBody"</span>,</span><br><span class="line"><span class="attr">"Order"</span>: <span class="number">1</span>,</span><br><span class="line"><span class="attr">"MotionGroup"</span>: <span class="string">"Touch"</span></span><br><span class="line">&#125;,</span><br><span class="line">&#123;</span><br><span class="line"><span class="attr">"Name"</span>: <span class="string">"TouchSpecial"</span>,</span><br><span class="line"><span class="attr">"Id"</span>: <span class="string">"TouchSpecial"</span>,</span><br><span class="line"><span class="attr">"Order"</span>: <span class="number">100</span>,</span><br><span class="line"><span class="attr">"MotionGroup"</span>: <span class="string">"TouchSpecial"</span></span><br><span class="line">&#125;,</span><br><span class="line">&#123;</span><br><span class="line"><span class="attr">"Name"</span>: <span class="string">"TouchHead"</span>,</span><br><span class="line"><span class="attr">"Id"</span>: <span class="string">"TouchHead"</span>,</span><br><span class="line"><span class="attr">"Order"</span>: <span class="number">10</span>,</span><br><span class="line"><span class="attr">"MotionGroup"</span>: <span class="string">"TouchHead"</span></span><br><span class="line">&#125;</span><br><span class="line">]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>注：关于HitAreas中MotionGroup一项，是我的程序用的，不用太在意了。</p><h2 id="关于点击区域的位置"><a href="#关于点击区域的位置" class="headerlink" title="关于点击区域的位置"></a>关于点击区域的位置</h2><p>反复对比官方sdk，经过超级长时间的研究后（如果你想，可以试试，突破口应该是framework/model/cubismusermodel.ts）,发现代码如下<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line">public isHit(drawableId: CubismIdHandle, <span class="attr">pointX</span>: number, <span class="attr">pointY</span>: number): boolean</span><br><span class="line">       &#123;</span><br><span class="line">           <span class="keyword">const</span> drawIndex: number = <span class="keyword">this</span>._model.getDrawableIndex(drawableId);</span><br><span class="line">           <span class="keyword">if</span>(drawIndex &lt; <span class="number">0</span>)</span><br><span class="line">           &#123;</span><br><span class="line">               <span class="keyword">return</span> <span class="literal">false</span>; <span class="comment">// 存在しない場合はfalse</span></span><br><span class="line">           &#125;</span><br><span class="line">           <span class="keyword">const</span> count: number = <span class="keyword">this</span>._model.getDrawableVertexCount(drawIndex);</span><br><span class="line">           <span class="keyword">const</span> vertices: <span class="built_in">Float32Array</span> = <span class="keyword">this</span>._model.getDrawableVertices(drawIndex);</span><br><span class="line"></span><br><span class="line">           <span class="keyword">let</span> left: number = vertices[<span class="number">0</span>];</span><br><span class="line">           <span class="keyword">let</span> right: number = vertices[<span class="number">0</span>];</span><br><span class="line">           <span class="keyword">let</span> top: number = vertices[<span class="number">1</span>];</span><br><span class="line">           <span class="keyword">let</span> bottom: number = vertices[<span class="number">1</span>];</span><br><span class="line"></span><br><span class="line">           <span class="keyword">for</span>(<span class="keyword">let</span> j: number = <span class="number">1</span>; j &lt; count; ++j)</span><br><span class="line">           &#123;</span><br><span class="line">               <span class="keyword">let</span> x = vertices[Constant.vertexOffset + j * Constant.vertexStep];</span><br><span class="line">               <span class="keyword">let</span> y = vertices[Constant.vertexOffset + j * Constant.vertexStep + <span class="number">1</span>];</span><br><span class="line"></span><br><span class="line">               <span class="keyword">if</span>(x &lt; left)</span><br><span class="line">               &#123;</span><br><span class="line">                   left = x; <span class="comment">// Min x</span></span><br><span class="line">               &#125;</span><br><span class="line">               </span><br><span class="line">               <span class="keyword">if</span>(x &gt; right)</span><br><span class="line">               &#123;</span><br><span class="line">                   right = x; <span class="comment">// Max x</span></span><br><span class="line">               &#125;</span><br><span class="line"></span><br><span class="line">               <span class="keyword">if</span>(y &lt; top)</span><br><span class="line">               &#123;</span><br><span class="line">                   top = y; <span class="comment">// Min y</span></span><br><span class="line">               &#125;</span><br><span class="line"></span><br><span class="line">               <span class="keyword">if</span>(y &gt; bottom)</span><br><span class="line">               &#123;</span><br><span class="line">                   bottom = y; <span class="comment">// Max y</span></span><br><span class="line">               &#125;</span><br><span class="line">           &#125;</span><br><span class="line"></span><br><span class="line">           <span class="keyword">const</span> tx: number = <span class="keyword">this</span>._modelMatrix.invertTransformX(pointX);</span><br><span class="line">           <span class="keyword">const</span> ty: number = <span class="keyword">this</span>._modelMatrix.invertTransformY(pointY);</span><br><span class="line"></span><br><span class="line">           <span class="keyword">return</span> ((left &lt;= tx) &amp;&amp; (tx &lt;= right) &amp;&amp; (top &lt;= ty) &amp;&amp; (ty &lt;= bottom));</span><br><span class="line">       &#125;</span><br></pre></td></tr></table></figure></p><p>Constant.vertexOffset=0，Constant.vertexStep=2应该对于所有模型都是适用的<br>this._model.getDrawableIndex()返回的就是 _coremodel.drawables.ids.indexOf()的值，做出类似替换得到代码如下<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//function(id)&#123;//id-&gt;区域id</span></span><br><span class="line"><span class="keyword">let</span> d=<span class="keyword">this</span>._model.drawables;</span><br><span class="line">    <span class="keyword">let</span> index=d.ids.indexOf(id);</span><br><span class="line">    <span class="keyword">let</span> count=d.vertexCounts[index];</span><br><span class="line">    <span class="keyword">let</span> vertices=d.vertexPositions[index];<span class="comment">//相对位移</span></span><br><span class="line">    <span class="keyword">let</span> left = vertices[<span class="number">0</span>];</span><br><span class="line">    <span class="keyword">let</span> right = vertices[<span class="number">0</span>];</span><br><span class="line">    <span class="keyword">let</span> top = vertices[<span class="number">1</span>];</span><br><span class="line">    <span class="keyword">let</span> bottom = vertices[<span class="number">1</span>];</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">let</span> j = <span class="number">1</span>; j &lt; count; ++j)&#123;</span><br><span class="line">        <span class="keyword">let</span> x = vertices[<span class="number">0</span> + j * <span class="number">2</span>];</span><br><span class="line">        <span class="keyword">let</span> y = vertices[<span class="number">0</span> + j * <span class="number">2</span> + <span class="number">1</span>];</span><br><span class="line">        <span class="keyword">if</span>(x &lt; left)&#123;left = x;&#125;<span class="comment">// 最左边的点相对中点x轴位移     </span></span><br><span class="line">        <span class="keyword">if</span>(x &gt; right)&#123;right = x;&#125;<span class="comment">// Max x</span></span><br><span class="line">        <span class="keyword">if</span>(y &gt; top)&#123;top = y;&#125;<span class="comment">// 最上边的点相对中点x轴位移</span></span><br><span class="line">        <span class="keyword">if</span>(y &lt; bottom)&#123;bottom = y;&#125;<span class="comment">// Max y</span></span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></p><p>关于vertexCounts返回的是这个东西的顶点个数，而下面的for循环就是遍历出上下左右四个定位点。vertexPositions是<strong>顶点相对模型中点的位移</strong>（省略无数发现它的过程），<strong>计算原理是：（中点横/纵坐标-点的横/纵坐标）/放大倍数</strong>（可参见官方framework/math/cubismmatrix44.ts的146到160行，逆推而得）。</p><p>所以得到各个定位点坐标如下<br><strong>坐标=模型中点坐标+相对位移*放大倍数（y为减）</strong><br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">left=left*<span class="keyword">this</span>._scale+<span class="keyword">this</span>._center_x;</span><br><span class="line">   right=right*<span class="keyword">this</span>._scale+<span class="keyword">this</span>._center_x;</span><br><span class="line">   top=-top*<span class="keyword">this</span>._scale+<span class="keyword">this</span>._center_y;<span class="comment">//万分注意它上下是反的，所以是减去</span></span><br><span class="line">   bottom=-bottom*<span class="keyword">this</span>._scale+<span class="keyword">this</span>._center_y;</span><br></pre></td></tr></table></figure></p><p>关于为什么y轴方向的是减法没考虑过，反正能用就行了<br>最后汇总一下，得到最终的代码，如我个人的代码就是<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//id-&gt;点击区域id（artmesh的id），pointX/Y -&gt; pageX/Y</span></span><br><span class="line"><span class="comment">//计算原理：遍历点的上下左右范围，判定点坐标x=模型中点坐标+相对位移*放大倍数（y为减）</span></span><br><span class="line">MotionHandler.prototype.isHit = <span class="function"><span class="keyword">function</span>(<span class="params">id,pointX,pointY</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">let</span> d=<span class="keyword">this</span>._model.drawables;</span><br><span class="line">    <span class="keyword">let</span> index=d.ids.indexOf(id);</span><br><span class="line">    <span class="keyword">let</span> count=d.vertexCounts[index];</span><br><span class="line">    <span class="keyword">let</span> vertices=d.vertexPositions[index];<span class="comment">//相对位移</span></span><br><span class="line">    <span class="keyword">let</span> left = vertices[<span class="number">0</span>];</span><br><span class="line">    <span class="keyword">let</span> right = vertices[<span class="number">0</span>];</span><br><span class="line">    <span class="keyword">let</span> top = vertices[<span class="number">1</span>];</span><br><span class="line">    <span class="keyword">let</span> bottom = vertices[<span class="number">1</span>];</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">let</span> j = <span class="number">1</span>; j &lt; count; ++j)&#123;</span><br><span class="line">        <span class="keyword">let</span> x = vertices[<span class="number">0</span> + j * <span class="number">2</span>];</span><br><span class="line">        <span class="keyword">let</span> y = vertices[<span class="number">0</span> + j * <span class="number">2</span> + <span class="number">1</span>];</span><br><span class="line">        <span class="keyword">if</span>(x &lt; left)&#123;left = x;&#125;   </span><br><span class="line">        <span class="keyword">if</span>(x &gt; right)&#123;right = x;&#125;</span><br><span class="line">        <span class="keyword">if</span>(y &gt; top)&#123;top = y;&#125;</span><br><span class="line">        <span class="keyword">if</span>(y &lt; bottom)&#123;bottom = y;&#125;</span><br><span class="line">    &#125;</span><br><span class="line">    left=left*<span class="keyword">this</span>._scale+<span class="keyword">this</span>._center_x;</span><br><span class="line">    right=right*<span class="keyword">this</span>._scale+<span class="keyword">this</span>._center_x;</span><br><span class="line">    top=-top*<span class="keyword">this</span>._scale+<span class="keyword">this</span>._center_y;</span><br><span class="line">    bottom=-bottom*<span class="keyword">this</span>._scale+<span class="keyword">this</span>._center_y;</span><br><span class="line">    <span class="keyword">return</span> ((left &lt;= pointX) &amp;&amp; (pointX &lt;= right) &amp;&amp; (bottom &gt;= pointY) &amp;&amp; (pointY &gt;= top));</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></p><h2 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h2><p>事实上这个对于所有的区域应该都是可以的，比如如果我想把右耳作为一个点击区域，首先找到artmesh的id，然后改一下model3.json。最后注意一下可执行的区域应该是一个矩形（蓝色方框），所以建议定义一个优先度的东西，以便优先判断小块的点击区域<br><img src="/2019/08/26/关于cubism3模型点击区域的绑定/4.png"></p><p>顺便推销一下<a href="https://github.com/shihaipeng/live2d-cubism3-helper" target="_blank" rel="noopener">我的代码</a>（再次感谢<a href="https://himehane.club/live2d_on_website/" target="_blank" rel="noopener">himehane</a>，事实上很多都是抄袭他的，无比惭愧），当然，昨天（8/25号）才算是基本可以看了。有些细节如呼吸，眨眼加了上去，改进了一下鼠标事件，用成了相对网页的位移，当然还有点击区域的绑定。<br>马上开学了（&lt;=4天），该死的学校星期天强制补课，所以我几乎不怎么可能在下一个学期动我的代码了，随缘更新改bug。如想勾搭QQ欢迎（2112966311）</p>]]></content>
      
      
      <categories>
          
          <category> 笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> live2d </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>c++函数（2）</title>
      <link href="/2018/11/10/c-%E5%87%BD%E6%95%B0%EF%BC%882%EF%BC%89/"/>
      <url>/2018/11/10/c-%E5%87%BD%E6%95%B0%EF%BC%882%EF%BC%89/</url>
      
        <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>以下内容坑了我一周。然鹅还需要更长时间。。。</p><a id="more"></a><h3 id="function类实现"><a href="#function类实现" class="headerlink" title="function类实现"></a>function类实现</h3><p>基本思想还是很简单的，就是一个仿函数。。。<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//function 类</span></span><br><span class="line"></span><br><span class="line">...</span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;tuple&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;type_traits&gt;</span></span></span><br><span class="line">...</span><br><span class="line"></span><br><span class="line">...</span><br><span class="line"><span class="keyword">namespace</span> simple&#123;</span><br><span class="line">    <span class="keyword">template</span>&lt;<span class="class"><span class="keyword">class</span> <span class="title">R</span>,<span class="title">class</span>...<span class="title">Args</span>&gt;</span></span><br><span class="line"><span class="class">    <span class="title">struct</span> <span class="title">func_traits</span>;</span></span><br><span class="line">    <span class="comment">//这里坑了我一个小时啊，声明应在最前，因为function类中用到了，而定义要放在最后，否则编译器不知道模板参数，会报一个“not a class template”的错误</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">template</span>&lt;<span class="class"><span class="keyword">class</span> <span class="title">Fn</span>&gt;</span></span><br><span class="line"><span class="class">    <span class="title">class</span> <span class="title">function</span>&#123;</span></span><br><span class="line">      <span class="keyword">typedef</span> <span class="keyword">typename</span> <span class="built_in">std</span>::decay&lt;Fn&gt;::type call_type;</span><br><span class="line">      <span class="comment">//此处int&amp;和int无区别，而且编译器可能会聪明的加上一些修饰符（我们只能呵呵了），所以需要decay。</span></span><br><span class="line">      <span class="keyword">typedef</span> <span class="keyword">typename</span> func_traits&lt;call_type&gt;::res_type result_type;</span><br><span class="line">      call_type _call;</span><br><span class="line">      <span class="keyword">public</span>:</span><br><span class="line">        function(call_type&amp;&amp; f):_call(f)&#123;&#125;;<span class="comment">//至于此处的右值仅仅是为了加快传递速度而已，并没有什么用</span></span><br><span class="line">        function&amp; <span class="keyword">operator</span>=(call_type&amp;&amp; f)&#123;</span><br><span class="line">            _call=f;</span><br><span class="line">            <span class="keyword">return</span> *<span class="keyword">this</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">template</span>&lt;<span class="class"><span class="keyword">class</span>... <span class="title">P</span>&gt;</span></span><br><span class="line"><span class="class">        <span class="title">result_type</span> <span class="title">operator</span>()(<span class="title">P</span>&amp;&amp;... <span class="title">p</span>)&#123;</span></span><br><span class="line">            <span class="keyword">return</span> _call(<span class="built_in">std</span>::forward&lt;P&gt;(p)...);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="keyword">template</span> &lt;<span class="keyword">typename</span> R, <span class="keyword">typename</span>... P&gt;<span class="comment">//取普通函数、成员函数</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">func_traits</span>&lt;R(*)(P...)&gt; &#123;</span> </span><br><span class="line">        <span class="keyword">typedef</span> R res_type; <span class="comment">//返回值</span></span><br><span class="line">        <span class="keyword">typedef</span> <span class="built_in">std</span>::tuple&lt;P...&gt; arg_type; <span class="comment">//参数类型，此程序没用上</span></span><br><span class="line">        </span><br><span class="line">    &#125;;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/* check member function */</span><span class="comment">//兼容函数cv符</span></span><br><span class="line">    </span><br><span class="line">    <span class="meta">#<span class="meta-keyword">define</span> FUNC_TRAITS__(...) \</span></span><br><span class="line">        <span class="keyword">template</span> &lt;<span class="keyword">typename</span> R, <span class="keyword">typename</span> C, <span class="keyword">typename</span>... P&gt; \</span><br><span class="line">        <span class="class"><span class="keyword">struct</span> <span class="title">func_traits</span>&lt;R(C::*)(P...) __VA_ARGS__&gt; &#123;</span> <span class="keyword">typedef</span> R type; &#125;;</span><br><span class="line">    </span><br><span class="line">    FUNC_TRAITS__()</span><br><span class="line">    FUNC_TRAITS__(<span class="keyword">const</span>)</span><br><span class="line">    FUNC_TRAITS__(<span class="keyword">volatile</span>)</span><br><span class="line">    FUNC_TRAITS__(<span class="keyword">const</span> <span class="keyword">volatile</span>)</span><br><span class="line">    </span><br><span class="line">    <span class="meta">#<span class="meta-keyword">undef</span> RESULT_TRAITS__</span></span><br><span class="line">&#125;</span><br><span class="line">...</span><br><span class="line"></span><br><span class="line"><span class="comment">//test</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">a</span><span class="params">(<span class="keyword">int</span>&amp;&amp; x)</span></span>&#123;</span><br><span class="line">    <span class="built_in">std</span>::<span class="built_in">cout</span>&lt;&lt;<span class="number">0</span>&lt;&lt;<span class="built_in">std</span>::<span class="built_in">endl</span>;</span><br><span class="line">    <span class="keyword">return</span> x;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    simple::function&lt;<span class="keyword">int</span>(<span class="keyword">int</span>&amp;&amp;)&gt; func=&amp;a;</span><br><span class="line">    <span class="built_in">std</span>::<span class="built_in">cout</span>&lt;&lt;func(<span class="number">12</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;   </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>目前这个function类已经可以用于普通的函数了。但离我们的想法还差得远。但我的智商仅限于此了。</p><h3 id="一个升级的版本的坑"><a href="#一个升级的版本的坑" class="headerlink" title="一个升级的版本的坑"></a>一个升级的版本的坑</h3><p><del>观察原生的function类，会发现它需要声明时初始化。这并不是没有道理的。人为传入的模板参数（&lt;&gt;中的）只能作为类的标识（如果可以这么理解），而具体调用则需要根据初始化的数判定。所以应当会有两个Fn。</del></p><p>我粗略看了一下functional源代码啊，发现它的处理方式挺简单的，就是再创建一个对象而已。</p><p>所以可以说function&lt;…&gt;中&lt;&gt;里的函数类型一点用都没有（十分真实，唯一作用就是好看了）</p><p>但理论简单，实践希望也是如此。<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//未完成</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> simple&#123;</span><br><span class="line"><span class="comment">//...</span></span><br><span class="line">    <span class="comment">/////////////////////////////////////////////////////</span></span><br><span class="line">    <span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt;<span class="comment">//是否为指针 </span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">is_pointer_noref</span></span></span><br><span class="line"><span class="class">        :</span> <span class="built_in">std</span>::is_pointer&lt;<span class="keyword">typename</span> <span class="built_in">std</span>::remove_reference&lt;T&gt;::type&gt;</span><br><span class="line">    &#123;&#125;;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt;<span class="comment">//是否为成员函数 </span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">is_memfunc_noref</span></span></span><br><span class="line"><span class="class">        :</span> <span class="built_in">std</span>::is_member_function_pointer&lt;<span class="keyword">typename</span> <span class="built_in">std</span>::remove_reference&lt;T&gt;::type&gt;</span><br><span class="line">    &#123;&#125;;</span><br><span class="line">    <span class="comment">/////////////函数绑定的执行程序 </span></span><br><span class="line">    <span class="keyword">template</span> &lt;<span class="keyword">typename</span> R, <span class="keyword">typename</span> F, <span class="keyword">typename</span>... P&gt;<span class="comment">//普通函数指针</span></span><br><span class="line">    <span class="keyword">inline</span> <span class="keyword">typename</span> <span class="built_in">std</span>::enable_if&lt;is_pointer_noref&lt;F&gt;::value,</span><br><span class="line">    R&gt;::<span class="function">type <span class="title">invoke</span><span class="params">(F&amp;&amp; f, P&amp;&amp;... par)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> (*<span class="built_in">std</span>::forward&lt;F&gt;(f))(<span class="built_in">std</span>::forward&lt;P&gt;(par)...);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">template</span> &lt;<span class="keyword">typename</span> R, <span class="keyword">typename</span> F, <span class="keyword">typename</span> P1, <span class="keyword">typename</span>... P&gt;<span class="comment">//对象指针</span></span><br><span class="line">    <span class="keyword">inline</span> <span class="keyword">typename</span> <span class="built_in">std</span>::enable_if&lt;is_memfunc_noref&lt;F&gt;::value &amp;&amp; is_pointer_noref&lt;P1&gt;::value,</span><br><span class="line">    R&gt;::<span class="function">type <span class="title">invoke</span><span class="params">(F&amp;&amp; f, P1&amp;&amp; this_ptr, P&amp;&amp;... par)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> (<span class="built_in">std</span>::forward&lt;P1&gt;(this_ptr)-&gt;*<span class="built_in">std</span>::forward&lt;F&gt;(f))(<span class="built_in">std</span>::forward&lt;P&gt;(par)...);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">template</span> &lt;<span class="keyword">typename</span> R, <span class="keyword">typename</span> F, <span class="keyword">typename</span> P1, <span class="keyword">typename</span>... P&gt;<span class="comment">//对象成员函数 </span></span><br><span class="line">    <span class="keyword">inline</span> <span class="keyword">typename</span> <span class="built_in">std</span>::enable_if&lt;is_memfunc_noref&lt;F&gt;::value &amp;&amp; !is_pointer_noref&lt;P1&gt;::value,</span><br><span class="line">    R&gt;::<span class="function">type <span class="title">invoke</span><span class="params">(F&amp;&amp; f, P1&amp;&amp; this_obj, P&amp;&amp;... par)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> (<span class="built_in">std</span>::forward&lt;P1&gt;(this_obj).*<span class="built_in">std</span>::forward&lt;F&gt;(f))(<span class="built_in">std</span>::forward&lt;P&gt;(par)...);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">template</span> &lt;<span class="keyword">typename</span> R, <span class="keyword">typename</span> F, <span class="keyword">typename</span>... P&gt;<span class="comment">//普通函数 </span></span><br><span class="line">    <span class="keyword">inline</span> <span class="keyword">typename</span> <span class="built_in">std</span>::enable_if&lt;!is_pointer_noref&lt;F&gt;::value &amp;&amp; !is_memfunc_noref&lt;F&gt;::value,</span><br><span class="line">    R&gt;::<span class="function">type <span class="title">invoke</span><span class="params">(F&amp;&amp; f, P&amp;&amp;... par)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">std</span>::forward&lt;F&gt;(f)(<span class="built_in">std</span>::forward&lt;P&gt;(par)...);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">////////////////////////////////////////</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">template</span>&lt;<span class="class"><span class="keyword">class</span> <span class="title">Fn</span>&gt;</span></span><br><span class="line"><span class="class">    <span class="title">class</span> <span class="title">function</span>&#123;</span></span><br><span class="line"><span class="comment">//...</span></span><br><span class="line">      <span class="keyword">template</span>&lt;<span class="class"><span class="keyword">class</span>... <span class="title">P</span> &gt;</span></span><br><span class="line"><span class="class">      <span class="title">result_type</span> _<span class="title">do_call</span>(<span class="title">P</span>&amp;&amp;... <span class="title">p</span>)&#123;</span></span><br><span class="line">          <span class="keyword">return</span> invoke&lt;result_type&gt;(<span class="built_in">std</span>::forward&lt;P&gt;(p)...);</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">public</span>:</span><br><span class="line">  <span class="comment">//...</span></span><br><span class="line">        <span class="keyword">template</span>&lt;<span class="class"><span class="keyword">class</span> _<span class="title">functor</span>&gt;</span></span><br><span class="line"><span class="class">        <span class="title">function</span>&amp; <span class="title">operator</span>=(_<span class="title">functor</span>&amp;&amp; <span class="title">ft</span>)&#123;</span></span><br><span class="line">            function&lt;_functor&gt;(<span class="built_in">std</span>::forward&lt;_functor&gt;(ft)).swap(*<span class="keyword">this</span>);</span><br><span class="line">            <span class="keyword">return</span> *<span class="keyword">this</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="function"><span class="keyword">void</span> <span class="title">swap</span><span class="params">(function&amp; f)</span></span>&#123;</span><br><span class="line">            <span class="built_in">std</span>::swap(*<span class="keyword">this</span>,f);</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">template</span>&lt;<span class="class"><span class="keyword">class</span>... <span class="title">P</span>&gt;</span></span><br><span class="line"><span class="class">        <span class="title">result_type</span> <span class="title">operator</span>()(<span class="title">P</span>&amp;&amp;... <span class="title">p</span>)&#123;</span></span><br><span class="line">            <span class="keyword">return</span> _call(<span class="built_in">std</span>::forward&lt;P&gt;(p)...);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;;<span class="comment">//无用代码</span></span><br></pre></td></tr></table></figure></p><p>事实证明我还是没有那么牛逼，只能大概讲述一下bind的思路了。就是一个function，接收一个参数（设用tuple1存）（如void(int,int,double,char)）的一个函数接收(1,_1,1.2,_3)。（_1,_3就是placeholder<1>和placeholder<3>），然后接收参数（设用tuple2存）（如(1,2,’c’)）,调用时对tuple1每一个元素遍历，如果为placeholder<n>,则在tuple2中找到第N-1个元素填进去。上一篇的那个bind实现确实巧妙，而且也简单。只是我个人妄想写function时出了问题而已，并不代表前面的代码作废了。而且我折腾了这么久，也是该换个战场了。</n></3></1></p><p>那位大神写的代码有几个点是很好的，可以以后用。比如展开tuple的方式值得参考，反射的机制也值得学习。还有一些诸如为什么要用forward,decay,为什么要去除引用，其实我也没太清楚。就当我糊里糊涂学过了吧。</p><p>我还想再说一下那个展开tuple的事情，太涨知识了。但也只能等遥遥无期的有一天再讲了。</p><p>最后还是再完善一下那位大神的注释吧。<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> once</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;type_traits&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;tuple&gt;</span></span></span><br><span class="line"><span class="keyword">namespace</span> simple &#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">// placeholder</span></span><br><span class="line"><span class="comment">//其作用相当于标识而已</span></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">int</span> N&gt;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">placeholder</span> &#123;</span>&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">static</span> placeholder&lt;<span class="number">1</span>&gt; _1; <span class="keyword">static</span> placeholder&lt;<span class="number">6</span>&gt;  _6;  <span class="keyword">static</span> placeholder&lt;<span class="number">11</span>&gt; _11; <span class="keyword">static</span> placeholder&lt;<span class="number">16</span>&gt; _16;</span><br><span class="line"><span class="keyword">static</span> placeholder&lt;<span class="number">2</span>&gt; _2; <span class="keyword">static</span> placeholder&lt;<span class="number">7</span>&gt;  _7;  <span class="keyword">static</span> placeholder&lt;<span class="number">12</span>&gt; _12; <span class="keyword">static</span> placeholder&lt;<span class="number">17</span>&gt; _17;</span><br><span class="line"><span class="keyword">static</span> placeholder&lt;<span class="number">3</span>&gt; _3; <span class="keyword">static</span> placeholder&lt;<span class="number">8</span>&gt;  _8;  <span class="keyword">static</span> placeholder&lt;<span class="number">13</span>&gt; _13; <span class="keyword">static</span> placeholder&lt;<span class="number">18</span>&gt; _18;</span><br><span class="line"><span class="keyword">static</span> placeholder&lt;<span class="number">4</span>&gt; _4; <span class="keyword">static</span> placeholder&lt;<span class="number">9</span>&gt;  _9;  <span class="keyword">static</span> placeholder&lt;<span class="number">14</span>&gt; _14; <span class="keyword">static</span> placeholder&lt;<span class="number">19</span>&gt; _19;</span><br><span class="line"><span class="keyword">static</span> placeholder&lt;<span class="number">5</span>&gt; _5; <span class="keyword">static</span> placeholder&lt;<span class="number">10</span>&gt; _10; <span class="keyword">static</span> placeholder&lt;<span class="number">15</span>&gt; _15; <span class="keyword">static</span> placeholder&lt;<span class="number">20</span>&gt; _20;</span><br><span class="line"></span><br><span class="line"><span class="comment">// sequence &amp; generater</span></span><br><span class="line"><span class="comment">//生成一个&lt;1,2,3...,N&gt;的序列以展开tuple</span></span><br><span class="line"><span class="comment">//避免了递归的复杂操作</span></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">int</span>... N&gt;<span class="comment">//这个int... N 才是序列的精髓</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">seq</span> &#123;</span> <span class="keyword">typedef</span> seq&lt;N..., <span class="keyword">sizeof</span>...(N)&gt; next_type; &#125;;</span><br><span class="line"><span class="comment">//生成序列！ </span></span><br><span class="line"><span class="comment">// seq&lt;0&gt;::next_type == seq&lt;0,1&gt;</span></span><br><span class="line"><span class="comment">// seq&lt;0&gt;::next_type::next_type == seq&lt;0,1,2&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span>... P&gt;<span class="comment">//为什么先声明后定义和我上文写的差不多</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">gen</span>;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span> &lt;&gt;<span class="comment">//递归终止</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">gen</span>&lt;&gt;</span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="keyword">typedef</span> seq&lt;&gt; seq_type;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> P1, <span class="keyword">typename</span>... P&gt;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">gen</span>&lt;P1, P...&gt;</span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="keyword">typedef</span> <span class="keyword">typename</span> gen&lt;P...&gt;::seq_type::next_type seq_type;<span class="comment">// 返回0---输入个数-1的序列 </span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// select</span></span><br><span class="line"><span class="comment">//选择参数</span></span><br><span class="line"><span class="comment">//如tuple1 &lt;1,_1,1.2,_3&gt; tuple2 &lt;1,2,’c’&gt;</span></span><br><span class="line"><span class="comment">//int... N(注:序列生成的东西)=&lt;0,1,2,...,N-1&gt;(N为tuple1的元素个数)</span></span><br><span class="line"><span class="comment">//则对于N=0,get&lt;0&gt;(tuple1)=1,传入参数1；</span></span><br><span class="line"><span class="comment">//对于N=2,get&lt;1&gt;(tuple1)=placeholder&lt;1&gt;,传入参数get&lt;1&gt;(tuple2)(注：即 1);</span></span><br><span class="line"><span class="comment">//对于N=3,get&lt;2&gt;(tuple1)=placeholder&lt;1&gt;,传入参数get&lt;2&gt;(tuple2)(注：即 'c');</span></span><br><span class="line"><span class="comment">//最终参数变成(1,1,1.2,'c')</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> T, <span class="class"><span class="keyword">class</span> <span class="title">TupleT</span>&gt;</span></span><br><span class="line"><span class="class"><span class="title">inline</span> <span class="title">auto</span> <span class="title">select</span>(<span class="title">T</span>&amp;&amp; <span class="title">val</span>, <span class="title">TupleT</span>&amp; /*<span class="title">tp</span>*/) -&gt; <span class="title">T</span>&amp;&amp;</span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">std</span>::forward&lt;T&gt;(val);<span class="comment">//传入事先设定好的默认参数 </span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">int</span> N, <span class="class"><span class="keyword">class</span> <span class="title">TupleT</span>&gt;</span></span><br><span class="line"><span class="class"><span class="title">inline</span> <span class="title">auto</span> <span class="title">select</span>(<span class="title">placeholder</span>&lt;N&gt;, <span class="title">TupleT</span>&amp; <span class="title">tp</span>) -&gt; <span class="title">decltype</span>(<span class="title">std</span>:</span>:get&lt;N - <span class="number">1</span>&gt;(tp))</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">std</span>::get&lt;N - <span class="number">1</span>&gt;(tp);<span class="comment">//tp中第N-1个参数对应placeholder&lt;N&gt;，即placeholder&lt;1&gt;(_1)对应第一个参数 </span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// result type traits</span></span><br><span class="line"><span class="comment">//取函数返回类型 </span></span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> F&gt;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">result_traits</span> :</span> result_traits&lt;<span class="keyword">decltype</span>(&amp;F::<span class="keyword">operator</span>())&gt; &#123;&#125;;<span class="comment">// 取仿函数返回类型 </span></span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">result_traits</span>&lt;T*&gt; :</span> result_traits&lt;T&gt; &#123;&#125;;<span class="comment">// 取非指针类型，再继续判断 </span></span><br><span class="line"></span><br><span class="line"><span class="comment">/* check function */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> R, <span class="keyword">typename</span>... P&gt;<span class="comment">//取普通函数、成员函数返回类型 </span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">result_traits</span>&lt;R(*)(P...)&gt; &#123;</span> <span class="keyword">typedef</span> R type; &#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* check member function */</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//兼容函数cv符</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> RESULT_TRAITS__(...) \</span></span><br><span class="line">    <span class="keyword">template</span> &lt;<span class="keyword">typename</span> R, <span class="keyword">typename</span> C, <span class="keyword">typename</span>... P&gt; \</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">result_traits</span>&lt;R(C::*)(P...) __VA_ARGS__&gt; &#123;</span> <span class="keyword">typedef</span> R type; &#125;;</span><br><span class="line"></span><br><span class="line">RESULT_TRAITS__()</span><br><span class="line">RESULT_TRAITS__(<span class="keyword">const</span>)</span><br><span class="line">RESULT_TRAITS__(<span class="keyword">volatile</span>)</span><br><span class="line">RESULT_TRAITS__(<span class="keyword">const</span> <span class="keyword">volatile</span>)</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">undef</span> RESULT_TRAITS__</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// The invoker for call a callable</span></span><br><span class="line"><span class="comment">// 调用一个可调用的程序  反射</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt;<span class="comment">//是否为指针 </span></span><br><span class="line"><span class="comment">//事实上当初传入引用（而且是右值引用）仅仅是为了节约时间，这里要先去除引用</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">is_pointer_noref</span></span></span><br><span class="line"><span class="class">    :</span> <span class="built_in">std</span>::is_pointer&lt;<span class="keyword">typename</span> <span class="built_in">std</span>::remove_reference&lt;T&gt;::type&gt;</span><br><span class="line">&#123;&#125;;</span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt;<span class="comment">//是否为成员函数 </span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">is_memfunc_noref</span></span></span><br><span class="line"><span class="class">    :</span> <span class="built_in">std</span>::is_member_function_pointer&lt;<span class="keyword">typename</span> <span class="built_in">std</span>::remove_reference&lt;T&gt;::type&gt;</span><br><span class="line">&#123;&#125;;</span><br><span class="line"><span class="comment">/////////////函数绑定的执行程序 </span></span><br><span class="line"><span class="comment">//R为返回值,F为函数指针,this_XXX为对象实例|指针，</span></span><br><span class="line"><span class="comment">//类比函数指针调用方法就很好理解了</span></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> R, <span class="keyword">typename</span> F, <span class="keyword">typename</span>... P&gt;<span class="comment">//普通函数指针</span></span><br><span class="line"><span class="keyword">inline</span> <span class="keyword">typename</span> <span class="built_in">std</span>::enable_if&lt;is_pointer_noref&lt;F&gt;::value,</span><br><span class="line">R&gt;::<span class="function">type <span class="title">invoke</span><span class="params">(F&amp;&amp; f, P&amp;&amp;... par)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> (*<span class="built_in">std</span>::forward&lt;F&gt;(f))(<span class="built_in">std</span>::forward&lt;P&gt;(par)...);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> R, <span class="keyword">typename</span> F, <span class="keyword">typename</span> P1, <span class="keyword">typename</span>... P&gt;<span class="comment">//对象指针</span></span><br><span class="line"><span class="keyword">inline</span> <span class="keyword">typename</span> <span class="built_in">std</span>::enable_if&lt;is_memfunc_noref&lt;F&gt;::value &amp;&amp; is_pointer_noref&lt;P1&gt;::value,</span><br><span class="line">R&gt;::<span class="function">type <span class="title">invoke</span><span class="params">(F&amp;&amp; f, P1&amp;&amp; this_ptr, P&amp;&amp;... par)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> (<span class="built_in">std</span>::forward&lt;P1&gt;(this_ptr)-&gt;*<span class="built_in">std</span>::forward&lt;F&gt;(f))(<span class="built_in">std</span>::forward&lt;P&gt;(par)...);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> R, <span class="keyword">typename</span> F, <span class="keyword">typename</span> P1, <span class="keyword">typename</span>... P&gt;<span class="comment">//对象成员函数 </span></span><br><span class="line"><span class="keyword">inline</span> <span class="keyword">typename</span> <span class="built_in">std</span>::enable_if&lt;is_memfunc_noref&lt;F&gt;::value &amp;&amp; !is_pointer_noref&lt;P1&gt;::value,</span><br><span class="line">R&gt;::<span class="function">type <span class="title">invoke</span><span class="params">(F&amp;&amp; f, P1&amp;&amp; this_obj, P&amp;&amp;... par)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> (<span class="built_in">std</span>::forward&lt;P1&gt;(this_obj).*<span class="built_in">std</span>::forward&lt;F&gt;(f))(<span class="built_in">std</span>::forward&lt;P&gt;(par)...);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> R, <span class="keyword">typename</span> F, <span class="keyword">typename</span>... P&gt;<span class="comment">//普通函数 </span></span><br><span class="line"><span class="keyword">inline</span> <span class="keyword">typename</span> <span class="built_in">std</span>::enable_if&lt;!is_pointer_noref&lt;F&gt;::value &amp;&amp; !is_memfunc_noref&lt;F&gt;::value,</span><br><span class="line">R&gt;::<span class="function">type <span class="title">invoke</span><span class="params">(F&amp;&amp; f, P&amp;&amp;... par)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">std</span>::forward&lt;F&gt;(f)(<span class="built_in">std</span>::forward&lt;P&gt;(par)...);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Simple functor for bind function's return type</span></span><br><span class="line"><span class="comment">//一个简单的function实现，只是使用有点差异</span></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> FuncT, <span class="keyword">typename</span>... ArgsT&gt;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">fr</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="comment">//private</span></span><br><span class="line">    <span class="keyword">typedef</span> <span class="built_in">std</span>::tuple&lt;<span class="keyword">typename</span> <span class="built_in">std</span>::decay&lt;ArgsT&gt;::type...&gt; args_type;<span class="comment">//函数变量 因为是变参，所以要封装成tuple </span></span><br><span class="line">    <span class="keyword">typedef</span> <span class="keyword">typename</span> <span class="built_in">std</span>::decay&lt;FuncT&gt;::type                callable_type;<span class="comment">//函数体 </span></span><br><span class="line">    <span class="keyword">typedef</span> <span class="keyword">typename</span> result_traits&lt;callable_type&gt;::type     result_type;<span class="comment">//返回值 </span></span><br><span class="line"></span><br><span class="line">    callable_type call_;<span class="comment">//函数体 </span></span><br><span class="line">    args_type     args_;<span class="comment">//函数变量 </span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span> <span class="title">TupleT</span>, <span class="title">int</span>... <span class="title">N</span>&gt;</span></span><br><span class="line"><span class="class">    <span class="title">result_type</span> <span class="title">do_call</span>(<span class="title">TupleT</span>&amp; <span class="title">tp</span>/*运行时传入的参数*/, <span class="title">seq</span>&lt;N...&gt;)//运行 </span></span><br><span class="line"><span class="class">    &#123;</span><span class="comment">//select就是选取参数的那一步</span></span><br><span class="line">        <span class="keyword">return</span> invoke&lt;result_type&gt;(call_, select(<span class="built_in">std</span>::get&lt;N&gt;(args_), tp)...);<span class="comment">//巧妙应用...的方法 </span></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="keyword">template</span>&lt;<span class="keyword">typename</span> F, <span class="keyword">typename</span>... P&gt;<span class="comment">//初始化 </span></span><br><span class="line">    fr(F&amp;&amp; f, P&amp;&amp;... par)</span><br><span class="line">        : call_(<span class="built_in">std</span>::forward&lt;F&gt;(f))</span><br><span class="line">        , args_(<span class="built_in">std</span>::forward&lt;P&gt;(par)...)</span><br><span class="line">    &#123;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">template</span> &lt;<span class="keyword">typename</span>... P&gt;<span class="comment">//正式调用 </span></span><br><span class="line">    <span class="function">result_type <span class="title">operator</span><span class="params">()</span><span class="params">(P&amp;&amp;... par)</span><span class="comment">//调用时的参数 </span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">            &lt;MSVC 2013&gt; type_traits(1509): fatal error C1001</span></span><br><span class="line"><span class="comment">            With: std::forward&lt;P&gt;(par)...</span></span><br><span class="line"><span class="comment">        */</span></span><br><span class="line">        <span class="built_in">std</span>::tuple&lt;<span class="keyword">typename</span> <span class="built_in">std</span>::decay&lt;P&gt;::type...&gt; pars(<span class="keyword">static_cast</span>&lt;P&amp;&amp;&gt;(par)...);<span class="comment">//没看懂为什么是static_cast</span></span><br><span class="line">        <span class="keyword">return</span> do_call(pars, <span class="keyword">typename</span> gen&lt;ArgsT...&gt;::seq_type());<span class="comment">//这个gen返回&lt;0,1,2,...,参数个数-1&gt; </span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Bind function arguments</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> F, <span class="keyword">typename</span>... P&gt;</span><br><span class="line"><span class="keyword">inline</span> fr&lt;F, P...&gt; bind(F&amp;&amp; f, P&amp;&amp;... par)<span class="comment">//一个小封装 </span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">return</span> fr&lt;F, P...&gt;(<span class="built_in">std</span>::forward&lt;F&gt;(f), <span class="built_in">std</span>::forward&lt;P&gt;(par)...);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125; <span class="comment">// namespace simple</span></span><br></pre></td></tr></table></figure></p><p>补充，事实上它这个function和原生的function功能一模一样。所以如果要用function，直接用这种实现方式就行了，不必按我的奇葩想法去做。（当然你要保证你的这个function未来不会有改动，或者“阅后即焚”）。</p><h3 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h3><p>c++函数之旅只能不了了之了。因为我实在没时间了。未来打算学一下thread和autoptr，然后基本上就转行了。结尾之际，再次说一句真理：c++堕落人性毁人生。</p>]]></content>
      
      
      <categories>
          
          <category> 笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> c++ </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>c++函数（1）</title>
      <link href="/2018/10/27/c-%E5%87%BD%E6%95%B0%EF%BC%881%EF%BC%89/"/>
      <url>/2018/10/27/c-%E5%87%BD%E6%95%B0%EF%BC%881%EF%BC%89/</url>
      
        <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>本人一向很水，但看在我立了flag的缘故，不得不收起惰性，忍受着谜之网速和极其明显的作业做不完的凉凉之感，在此为大家写。作为第二次，谨此纪念。<br>本篇为了体现我不是一个水货（虽然事实上就是），将讨论得深一点。</p><a id="more"></a><h2 id="正文"><a href="#正文" class="headerlink" title="正文"></a>正文</h2><p>先快速过一下基础知识。。。</p><h3 id="函数模板"><a href="#函数模板" class="headerlink" title="函数模板"></a>函数模板</h3><p>函数模板作为函数重载的“高级”版本，事实上作用早就超出了一般的重载。比如一个巧妙地获取数组长度的函数<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">template</span>&lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>,<span class="title">size_t</span> <span class="title">N</span>&gt;</span></span><br><span class="line"><span class="class"><span class="title">size_t</span> <span class="title">len</span>(<span class="title">const</span> <span class="title">T</span> (&amp;<span class="title">arr</span>)[<span class="title">N</span>])&#123;</span></span><br><span class="line"><span class="keyword">return</span> N;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>它可以获取所有一般数组（不包括自定义容器），但在面对string等时有一个小bug（末尾有一个‘\n’,而很明显我们并不想算入数组长度），所以需要一个特例化的模板。<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">size_t</span> N&gt;</span><br><span class="line"><span class="keyword">size_t</span> len(<span class="keyword">const</span> <span class="keyword">char</span> (&amp;arr)[N])&#123;</span><br><span class="line"><span class="keyword">return</span> N<span class="number">-1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>大功告成。<del> 事实上，对任意容器，应该也可以用类似的办法获取长度（用迭代器？） </del>。还好检查了一下，以上程序不使用于char* 和任意非数组类型。用迭代的方法取长度怪怪的，虽然容器类大多都有迭代器。<br>可参考<a href="https://blog.csdn.net/lezardfu/article/details/56852043" target="_blank" rel="noopener">https://blog.csdn.net/lezardfu/article/details/56852043</a></p><h3 id="类模板"><a href="#类模板" class="headerlink" title="类模板"></a>类模板</h3><p>与函数模板很像，只不过更加好玩。它可以传入常量参数，所以说它诞生了一个毁青春的东西，模板元编程。</p><h3 id="模板元（搞笑的）"><a href="#模板元（搞笑的）" class="headerlink" title="模板元（搞笑的）"></a>模板元（搞笑的）</h3><p>可参考:</p><ul><li><a href="https://www.cnblogs.com/qicosmos/p/4480460.html" target="_blank" rel="noopener">https://www.cnblogs.com/qicosmos/p/4480460.html</a></li><li>一本书,<a href="https://pan.baidu.com/s/1koS_qOHH0gNdiSH-V_J7mQ" title="下载pdf" target="_blank" rel="noopener">模板元编程</a></li></ul><h3 id="函数指针"><a href="#函数指针" class="headerlink" title="函数指针"></a>函数指针</h3><p>实在没什么说的，上代码。<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">foo</span><span class="params">(<span class="keyword">int</span> a,<span class="keyword">int</span> b)</span></span>&#123;&#125;;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">bar</span>&#123;</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">a</span><span class="params">(<span class="keyword">int</span> b)</span></span>&#123;&#125;;</span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">g</span><span class="params">(<span class="keyword">int</span> b)</span></span>&#123;&#125;;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">typedef</span> <span class="title">int</span><span class="params">(*pfn1)</span><span class="params">(<span class="keyword">int</span>,<span class="keyword">int</span>)</span></span>;</span><br><span class="line"><span class="comment">//通式： 返回类型（*变量名）（参数列表）= 函数名 //可不加 &amp;</span></span><br><span class="line"><span class="comment">//通式2： 返回类型（*命名空间::变量名）（参数列表）= &amp;命名空间::函数名 //必须有 &amp;</span></span><br><span class="line"><span class="keyword">int</span>(*pfn2)(<span class="keyword">int</span>,<span class="keyword">int</span>) =foo;</span><br><span class="line"><span class="comment">//= pfn1 pfn2=foo</span></span><br><span class="line"><span class="keyword">int</span>(*bar::pfn3)(<span class="keyword">int</span>)=&amp;bar::a;</span><br><span class="line"><span class="keyword">void</span>(*pfn4)(<span class="keyword">int</span>)=bar::g;<span class="comment">//static 相当于独立于类之外</span></span><br><span class="line">bar test;</span><br><span class="line">(*test.pfn3)(<span class="number">1</span>);<span class="comment">//使用必须有一个实例</span></span><br><span class="line">pfn4(<span class="number">5</span>);<span class="comment">//static 不用</span></span><br></pre></td></tr></table></figure></p><p>注意几点</p><ol><li>指针的正确书写</li><li>正确使用</li></ol><p>可参考：<br><a href="https://blog.csdn.net/u010525694/article/details/72897766" target="_blank" rel="noopener">https://blog.csdn.net/u010525694/article/details/72897766</a></p><p>开始秀起来了</p><h3 id="仿函数-functor"><a href="#仿函数-functor" class="headerlink" title="仿函数 functor"></a>仿函数 functor</h3><p>所谓仿函数，并不复杂，仅仅是一个实现了 operator() 的类罢了。但还是会给编程带了很多便利，例如<a href="https://www.cnblogs.com/decade-dnbc66/p/5347088.html" title="感谢原作者" target="_blank" rel="noopener">count_if</a>。<br>若想深究，可自行搜索，此处不再赘述。<br>可参考：<br><a href="https://blog.csdn.net/yansmile1/article/details/58603871" target="_blank" rel="noopener">https://blog.csdn.net/yansmile1/article/details/58603871</a></p><h3 id="c-11-可变模板参数"><a href="#c-11-可变模板参数" class="headerlink" title="c++11 可变模板参数"></a>c++11 可变模板参数</h3><p>这是一个好东西啊。本人长期信奉c++11大法，因为它太好用了。目前我才摸着边边，所以以下如果有错，别找我。<br>c++11大大加大了程序的泛化程度，有的程序因此变得更像程序，而有的，呵呵<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//某坑爹tuple</span></span><br><span class="line"><span class="comment">//转载于 http://www.cnblogs.com/qicosmos/p/3318070.html</span></span><br><span class="line"><span class="comment">//你认为我这个蒟蒻能和那些神犇比吗？不可能的。</span></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="class"><span class="keyword">class</span> <span class="title">Tuple</span>, <span class="title">std</span>:</span>:<span class="keyword">size_t</span> N&gt;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">TuplePrinter</span> &#123;</span></span><br><span class="line">    <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">print</span><span class="params">(<span class="keyword">const</span> Tuple&amp; t)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        TuplePrinter&lt;Tuple, N - <span class="number">1</span>&gt;::print(t);</span><br><span class="line">        <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">", "</span> &lt;&lt; <span class="built_in">std</span>::get&lt;N - <span class="number">1</span>&gt;(t);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="class"><span class="keyword">class</span> <span class="title">Tuple</span>&gt;</span></span><br><span class="line"><span class="class"><span class="title">struct</span> <span class="title">TuplePrinter</span>&lt;Tuple, 1&gt;&#123;</span></span><br><span class="line">    <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">print</span><span class="params">(<span class="keyword">const</span> Tuple&amp; t)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="built_in">std</span>::get&lt;<span class="number">0</span>&gt;(t);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="class"><span class="keyword">class</span>... <span class="title">Args</span>&gt;</span></span><br><span class="line"><span class="class"><span class="title">void</span> <span class="title">PrintTuple</span>(<span class="title">const</span> <span class="title">std</span>:</span>:tuple&lt;Args...&gt;&amp; t)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">"("</span>;</span><br><span class="line">    TuplePrinter&lt;<span class="keyword">decltype</span>(t), <span class="keyword">sizeof</span>...(Args)&gt;::print(t);</span><br><span class="line">    <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">")\n"</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//main</span></span><br><span class="line"><span class="keyword">auto</span> tp=make_tuple(<span class="number">1</span>,<span class="number">2</span>,<span class="number">12.5</span>);</span><br><span class="line">PrintTuple(tp);</span><br><span class="line"><span class="comment">// (1,2,12.5)</span></span><br></pre></td></tr></table></figure></p><p>c里面也有类似的，但不如这个好用。展开可变模板的方式很多。但我们要讲的不是这个。</p><h3 id="匿名函数-lamba"><a href="#匿名函数-lamba" class="headerlink" title="匿名函数 lamba"></a>匿名函数 lamba</h3><p>匿名函数也是个好东西，用没用过js的都知道。<br>它也有结构通式。<code>[捕获列表]（参数列表）-&gt;返回值{函数主体}</code>，其中返回值也可以自动推断，前提是计算量简单。捕获列表是个比较有趣的东西，因为它可以准确捕获外界变量。有些时候lamba也会和闭包（closure）（具体了解参见<a href="https://www.cnblogs.com/BigFeng/p/5204899.html" target="_blank" rel="noopener">https://www.cnblogs.com/BigFeng/p/5204899.html</a>）.<br>此处仍然不会详细讲，可参考<a href="https://www.cnblogs.com/DswCnblog/p/5629165.html" target="_blank" rel="noopener">https://www.cnblogs.com/DswCnblog/p/5629165.html</a>。</p><h3 id="c-11-function对象"><a href="#c-11-function对象" class="headerlink" title="c++11 function对象"></a>c++11 function对象</h3><p>终于，广大人民对函数指针的深恶痛绝终于转换成了无限的动力，<del>从此终于再也不用写函数指针了！</del><br>社会的进步就是在于抛弃旧的，迎接新的。看一下可爱的function对象吧。<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//#include&lt;functional&gt;</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">foo</span><span class="params">(<span class="keyword">int</span> a,<span class="keyword">int</span> b)</span></span>&#123;&#125;;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">bar</span>&#123;</span></span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">a</span><span class="params">(<span class="keyword">int</span> b)</span></span>&#123;&#125;;</span><br><span class="line">    <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">g</span><span class="params">(<span class="keyword">int</span> b)</span></span>&#123;&#125;;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">F</span>&#123;</span><span class="comment">//functor</span></span><br><span class="line"><span class="keyword">int</span> sum=<span class="number">0</span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">operator</span><span class="params">()</span><span class="params">(<span class="keyword">int</span> a)</span></span>&#123;</span><br><span class="line">sum+=a;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//int(*pfn2)(int,int) =foo;</span></span><br><span class="line">function&lt;<span class="keyword">int</span>(<span class="keyword">int</span>,<span class="keyword">int</span>)&gt; pfn2=foo;<span class="comment">//简不简单？</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//int(*bar::pfn3)(int)=&amp;bar::a;</span></span><br><span class="line">function&lt;<span class="keyword">int</span>(<span class="keyword">const</span> bar&amp;,<span class="keyword">int</span>)&gt; pfn3=&amp;bar::a;<span class="comment">//注意要传入一个实例作为函数中的this</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//void(*pfn4)(int)=bar::g;</span></span><br><span class="line">function&lt;<span class="keyword">void</span>(<span class="keyword">int</span>)&gt; pfn4=bar::g;</span><br><span class="line"></span><br><span class="line">bar test;</span><br><span class="line">pfn2();</span><br><span class="line"><span class="comment">//(*test.pfn3)(1);</span></span><br><span class="line">pfn3(test,<span class="number">1</span>);<span class="comment">//明显更加直观了，简洁了</span></span><br><span class="line">pfn4(<span class="number">5</span>);</span><br><span class="line"></span><br><span class="line">F f;</span><br><span class="line">function&lt;<span class="keyword">void</span>(<span class="keyword">int</span>)&gt; fn=f;</span><br><span class="line">fn(<span class="number">10</span>);<span class="comment">//发现sum值并没有改变，function按值传递</span></span><br><span class="line"><span class="comment">//如果要改变，则应为</span></span><br><span class="line"><span class="comment">//function&lt;void(int)&gt; fn=ref(reference_wrapper&lt;F&gt;(f));//ref_warp可以不用</span></span><br></pre></td></tr></table></figure></p><p>可参考：<a href="https://www.cnblogs.com/yyxt/p/3987717.html" target="_blank" rel="noopener">https://www.cnblogs.com/yyxt/p/3987717.html</a></p><h3 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h3><p>深感力不从心ing。还有一点，下次再来吧。这次先到此为止。下次大概是bind和functional的个人解读，可能还有其它的。最后还是感谢各位神犇的大力支持，感谢文中出现过或默默无闻的其他文章作者们。最后加一个链接<a href="https://github.com/shihaipeng/hello-world/blob/master/c%2B%2B%E5%87%BD%E6%95%B0%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0.cpp" title="很水的..." target="_blank" rel="noopener">个人学习笔记</a>.</p>]]></content>
      
      
      <categories>
          
          <category> 笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> c++ </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>hexo第一课</title>
      <link href="/2018/02/10/hexo%E7%AC%AC%E4%B8%80%E8%AF%BE/"/>
      <url>/2018/02/10/hexo%E7%AC%AC%E4%B8%80%E8%AF%BE/</url>
      
        <content type="html"><![CDATA[<html><br><head><meta name="generator" content="Hexo 3.8.0"><br>    <meta charset="utf-8"><br>    <style type="text/css"><br>        p{<br>            text-indent: 2em;<br>        }<br>    </style><br></head><br><body><br>    <h1>用hexo搭建一个私人博客（1）</h1><br>    <h3>1.什么是hexo</h3><br>    <p>hexo是一个轻量级的博客框架，相较于其他博客框架，它更加灵活，也更能满足个人的定制欲望缺点自然也是有的，它的组件还不成熟，如评论和目录等还需要第三方的程序实现。如果你比较喜欢社交，那么如新浪微博可能更加适合你，但如果你喜欢独立自主，又爱编程，那么hexo还是一个不错的选择</p><br><br>    <h3>2.如何配置环境</h3><br>    <p>下载git，node.js等需要的环境，可参照<a href="https://hexo.io/zh-cn/docs/" alt="帮助文档" target="_blank">https://hexo.io/zh-cn/docs/</a></p><br><br>    <h3>3.如何开始</h3><br>    <p>按照文档的说明，在随便哪个地方运行hexo init &lt;随便一个名字&gt;,cd &lt;名字&gt;（进入文件夹）,npm install（安装npm环境）</p><br>    <p>如我想建在D盘</p><br>    <p>打开cmd,进入指定文件夹</p><br>    <p>按照指定的步骤执行</p><br>    <p>以下省略</p><br><br>    <h3>4.如何创建文章</h3><br>    <p>个人推荐：直接在/source/_post/中建立一个文本名为.md的文档，建议直接用html编写（原本hexo的一大亮点就在于支持Markdown语法—一个苹果程序员闲的蛋疼搞得）</p><br><br>    <h3>5.如何配置信息</h3><br>    <p>在两个地方配置，一是根目录下的_config.yml，二是themes下你选的主题的_config.yml</p><br>    <img src="https://ws1.sinaimg.cn/large/0072Lfvtly1fzapjga7kuj30sr0hgq54.jpg" title="theme设置主题，值为themes中主题的文件夹名；depoly设置仓库，也就是网站上线的配置信息"><br>    <p>中国在网站上有极大发言权，一般好看的主题都是made in China，所以也就更好配置了</p><br><br>    <h3>6.总结</h3><br>    <p>我才发现打文章这么累，看来下次你想干什么我还是发视频吧。这一点还没有完，至少这个博客还没有上线。上线推荐用github，毕竟免费。好累呀，不多说了</p><br></body><br></html>]]></content>
      
      
      <categories>
          
          <category> 网页 框架 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> hexo </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
