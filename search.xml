<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>随便取的一个题目</title>
      <link href="/2018/11/24/%E9%9A%8F%E4%BE%BF%E5%8F%96%E7%9A%84%E4%B8%80%E4%B8%AA%E9%A2%98%E7%9B%AE/"/>
      <url>/2018/11/24/%E9%9A%8F%E4%BE%BF%E5%8F%96%E7%9A%84%E4%B8%80%E4%B8%AA%E9%A2%98%E7%9B%AE/</url>
      
        <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>我感觉我好像又要放弃每周一更的计划了。看来很多时候光有速度不行，质量还是要有的。实在没有学什么，最近被紧逼慢逼学了一点前向星啊，邻接链表啊，并查集啊之类的坑。初步认识了深搜，广搜，二分之类的。但还是不够好啊。<br>所以，此后大概只能看心情更了。</p><a id="more"></a><p><strong>但重点不在这</strong></p><p>这个寒假我又要搞事情了。</p><h3 id="arduino专栏"><a href="#arduino专栏" class="headerlink" title="arduino专栏"></a>arduino专栏</h3><p>搞事情从此刻开始。为了美好的世界，让爆炎来得更猛烈些吧。<br>想做一个机械臂，而且想籍此参加一些比赛，或者干脆去makerfire搞一波事情。<br>大概可能和<a href="https://www.arduino.cn/forum.php?mod=viewthread&amp;tid=42842&amp;highlight=%E6%9C%BA%E6%A2%B0%E8%87%82" target="_blank" rel="noopener">https://www.arduino.cn/forum.php?mod=viewthread&amp;tid=42842&amp;highlight=%E6%9C%BA%E6%A2%B0%E8%87%82</a>差不多。<br>想学物联网，从搞定esp8266开始.想当初这方面的资料实在很少，半摸索着写了一些接口库，奈何那时编程技术实在不到家，以失败告终。但现在应该就可以了。物联网，在学校就可以控制家里的电脑啊，电视啊，或者干脆写个程序帮我浇花，想想都激动。</p><p>后来冷静下来想了一下啊，感觉太遥远了（指去makerfire），加之竞赛缠身（数物信水学大法）。但机械臂还是可以的。一定可以的！（？）</p><h3 id="网页相关"><a href="#网页相关" class="headerlink" title="网页相关"></a>网页相关</h3><p>当然是要拥抱二次元了！<br><a href="https://www.fghrsh.net/post/123.html" target="_blank" rel="noopener">https://www.fghrsh.net/post/123.html</a><br>大概就会弄一个类似的东西吧。</p><p>后来看了一下啊，live2d好像难点不在编程，在于建模。不过应该比编程简单。</p><p>顺便以亲身经历告诉大家占小便宜的后果（我的头像）</p><p>让爆炎来的更猛烈些吧。<br>慧慧镇楼。<br><img src="1.jpg"></p>]]></content>
      
      
      
        <tags>
            
            <tag> 随笔 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>c++函数（2）</title>
      <link href="/2018/11/10/c-%E5%87%BD%E6%95%B0%EF%BC%882%EF%BC%89/"/>
      <url>/2018/11/10/c-%E5%87%BD%E6%95%B0%EF%BC%882%EF%BC%89/</url>
      
        <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>以下内容坑了我一周。然鹅还需要更长时间。。。</p><a id="more"></a><h3 id="function类实现"><a href="#function类实现" class="headerlink" title="function类实现"></a>function类实现</h3><p>基本思想还是很简单的，就是一个仿函数。<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//function 类</span></span><br><span class="line"></span><br><span class="line">...</span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;tuple&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;type_traits&gt;</span></span></span><br><span class="line">...</span><br><span class="line"></span><br><span class="line">...</span><br><span class="line"><span class="keyword">namespace</span> simple&#123;</span><br><span class="line">    <span class="keyword">template</span>&lt;<span class="class"><span class="keyword">class</span> <span class="title">R</span>,<span class="title">class</span>...<span class="title">Args</span>&gt;</span></span><br><span class="line"><span class="class">    <span class="title">struct</span> <span class="title">func_traits</span>;</span></span><br><span class="line">    <span class="comment">//这里坑了我一个小时啊，声明应在最前，因为function类中用到了，而定义要放在最后，否则编译器不知道模板参数，会报一个“not a class template”的错误</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">template</span>&lt;<span class="class"><span class="keyword">class</span> <span class="title">Fn</span>&gt;</span></span><br><span class="line"><span class="class">    <span class="title">class</span> <span class="title">function</span>&#123;</span></span><br><span class="line">      <span class="keyword">typedef</span> <span class="keyword">typename</span> <span class="built_in">std</span>::decay&lt;Fn&gt;::type call_type;</span><br><span class="line">      <span class="comment">//此处int&amp;和int无区别，而且编译器可能会聪明的加上一些修饰符（我们只能呵呵了），所以需要decay。</span></span><br><span class="line">      <span class="keyword">typedef</span> <span class="keyword">typename</span> func_traits&lt;call_type&gt;::res_type result_type;</span><br><span class="line">      call_type _call;</span><br><span class="line">      <span class="keyword">public</span>:</span><br><span class="line">        function(call_type&amp;&amp; f):_call(f)&#123;&#125;;<span class="comment">//至于此处的右值仅仅是为了加快传递速度而已，并没有什么用</span></span><br><span class="line">        function&amp; <span class="keyword">operator</span>=(call_type&amp;&amp; f)&#123;</span><br><span class="line">            _call=f;</span><br><span class="line">            <span class="keyword">return</span> *<span class="keyword">this</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">template</span>&lt;<span class="class"><span class="keyword">class</span>... <span class="title">P</span>&gt;</span></span><br><span class="line"><span class="class">        <span class="title">result_type</span> <span class="title">operator</span>()(<span class="title">P</span>&amp;&amp;... <span class="title">p</span>)&#123;</span></span><br><span class="line">            <span class="keyword">return</span> _call(<span class="built_in">std</span>::forward&lt;P&gt;(p)...);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="keyword">template</span> &lt;<span class="keyword">typename</span> R, <span class="keyword">typename</span>... P&gt;<span class="comment">//取普通函数、成员函数</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">func_traits</span>&lt;R(*)(P...)&gt; &#123;</span> </span><br><span class="line">        <span class="keyword">typedef</span> R res_type; <span class="comment">//返回值</span></span><br><span class="line">        <span class="keyword">typedef</span> <span class="built_in">std</span>::tuple&lt;P...&gt; arg_type; <span class="comment">//参数类型，此程序没用上</span></span><br><span class="line">        </span><br><span class="line">    &#125;;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/* check member function */</span><span class="comment">//兼容函数cv符</span></span><br><span class="line">    </span><br><span class="line">    <span class="meta">#<span class="meta-keyword">define</span> FUNC_TRAITS__(...) \</span></span><br><span class="line">        <span class="keyword">template</span> &lt;<span class="keyword">typename</span> R, <span class="keyword">typename</span> C, <span class="keyword">typename</span>... P&gt; \</span><br><span class="line">        <span class="class"><span class="keyword">struct</span> <span class="title">func_traits</span>&lt;R(C::*)(P...) __VA_ARGS__&gt; &#123;</span> <span class="keyword">typedef</span> R type; &#125;;</span><br><span class="line">    </span><br><span class="line">    FUNC_TRAITS__()</span><br><span class="line">    FUNC_TRAITS__(<span class="keyword">const</span>)</span><br><span class="line">    FUNC_TRAITS__(<span class="keyword">volatile</span>)</span><br><span class="line">    FUNC_TRAITS__(<span class="keyword">const</span> <span class="keyword">volatile</span>)</span><br><span class="line">    </span><br><span class="line">    <span class="meta">#<span class="meta-keyword">undef</span> RESULT_TRAITS__</span></span><br><span class="line">&#125;</span><br><span class="line">...</span><br><span class="line"></span><br><span class="line"><span class="comment">//test</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">a</span><span class="params">(<span class="keyword">int</span>&amp;&amp; x)</span></span>&#123;</span><br><span class="line">    <span class="built_in">std</span>::<span class="built_in">cout</span>&lt;&lt;<span class="number">0</span>&lt;&lt;<span class="built_in">std</span>::<span class="built_in">endl</span>;</span><br><span class="line">    <span class="keyword">return</span> x;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    simple::function&lt;<span class="keyword">int</span>(<span class="keyword">int</span>&amp;&amp;)&gt; func=&amp;a;</span><br><span class="line">    <span class="built_in">std</span>::<span class="built_in">cout</span>&lt;&lt;func(<span class="number">12</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;   </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>目前这个function类已经可以用于普通的函数了。但离我们的想法还差得远。但我的智商仅限于此了。</p><h3 id="一个升级的版本的坑"><a href="#一个升级的版本的坑" class="headerlink" title="一个升级的版本的坑"></a>一个升级的版本的坑</h3><p><del>观察原生的function类，会发现它需要声明时初始化。这并不是没有道理的。人为传入的模板参数（&lt;&gt;中的）只能作为类的标识（如果可以这么理解），而具体调用则需要根据初始化的数判定。所以应当会有两个Fn。</del></p><p>我粗略看了一下functional源代码啊，发现它的处理方式挺简单的，就是再创建一个对象而已。</p><p>所以可以说function&lt;…&gt;中&lt;&gt;里的函数类型一点用都没有（十分真实，唯一作用就是好看了）</p><p>但理论简单，实践希望也是如此。<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//未完成</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> simple&#123;</span><br><span class="line"><span class="comment">//...</span></span><br><span class="line">    <span class="comment">/////////////////////////////////////////////////////</span></span><br><span class="line">    <span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt;<span class="comment">//是否为指针 </span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">is_pointer_noref</span></span></span><br><span class="line"><span class="class">        :</span> <span class="built_in">std</span>::is_pointer&lt;<span class="keyword">typename</span> <span class="built_in">std</span>::remove_reference&lt;T&gt;::type&gt;</span><br><span class="line">    &#123;&#125;;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt;<span class="comment">//是否为成员函数 </span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">is_memfunc_noref</span></span></span><br><span class="line"><span class="class">        :</span> <span class="built_in">std</span>::is_member_function_pointer&lt;<span class="keyword">typename</span> <span class="built_in">std</span>::remove_reference&lt;T&gt;::type&gt;</span><br><span class="line">    &#123;&#125;;</span><br><span class="line">    <span class="comment">/////////////函数绑定的执行程序 </span></span><br><span class="line">    <span class="keyword">template</span> &lt;<span class="keyword">typename</span> R, <span class="keyword">typename</span> F, <span class="keyword">typename</span>... P&gt;<span class="comment">//普通函数指针</span></span><br><span class="line">    <span class="keyword">inline</span> <span class="keyword">typename</span> <span class="built_in">std</span>::enable_if&lt;is_pointer_noref&lt;F&gt;::value,</span><br><span class="line">    R&gt;::<span class="function">type <span class="title">invoke</span><span class="params">(F&amp;&amp; f, P&amp;&amp;... par)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> (*<span class="built_in">std</span>::forward&lt;F&gt;(f))(<span class="built_in">std</span>::forward&lt;P&gt;(par)...);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">template</span> &lt;<span class="keyword">typename</span> R, <span class="keyword">typename</span> F, <span class="keyword">typename</span> P1, <span class="keyword">typename</span>... P&gt;<span class="comment">//对象指针</span></span><br><span class="line">    <span class="keyword">inline</span> <span class="keyword">typename</span> <span class="built_in">std</span>::enable_if&lt;is_memfunc_noref&lt;F&gt;::value &amp;&amp; is_pointer_noref&lt;P1&gt;::value,</span><br><span class="line">    R&gt;::<span class="function">type <span class="title">invoke</span><span class="params">(F&amp;&amp; f, P1&amp;&amp; this_ptr, P&amp;&amp;... par)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> (<span class="built_in">std</span>::forward&lt;P1&gt;(this_ptr)-&gt;*<span class="built_in">std</span>::forward&lt;F&gt;(f))(<span class="built_in">std</span>::forward&lt;P&gt;(par)...);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">template</span> &lt;<span class="keyword">typename</span> R, <span class="keyword">typename</span> F, <span class="keyword">typename</span> P1, <span class="keyword">typename</span>... P&gt;<span class="comment">//对象成员函数 </span></span><br><span class="line">    <span class="keyword">inline</span> <span class="keyword">typename</span> <span class="built_in">std</span>::enable_if&lt;is_memfunc_noref&lt;F&gt;::value &amp;&amp; !is_pointer_noref&lt;P1&gt;::value,</span><br><span class="line">    R&gt;::<span class="function">type <span class="title">invoke</span><span class="params">(F&amp;&amp; f, P1&amp;&amp; this_obj, P&amp;&amp;... par)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> (<span class="built_in">std</span>::forward&lt;P1&gt;(this_obj).*<span class="built_in">std</span>::forward&lt;F&gt;(f))(<span class="built_in">std</span>::forward&lt;P&gt;(par)...);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">template</span> &lt;<span class="keyword">typename</span> R, <span class="keyword">typename</span> F, <span class="keyword">typename</span>... P&gt;<span class="comment">//普通函数 </span></span><br><span class="line">    <span class="keyword">inline</span> <span class="keyword">typename</span> <span class="built_in">std</span>::enable_if&lt;!is_pointer_noref&lt;F&gt;::value &amp;&amp; !is_memfunc_noref&lt;F&gt;::value,</span><br><span class="line">    R&gt;::<span class="function">type <span class="title">invoke</span><span class="params">(F&amp;&amp; f, P&amp;&amp;... par)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">std</span>::forward&lt;F&gt;(f)(<span class="built_in">std</span>::forward&lt;P&gt;(par)...);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">////////////////////////////////////////</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">template</span>&lt;<span class="class"><span class="keyword">class</span> <span class="title">Fn</span>&gt;</span></span><br><span class="line"><span class="class">    <span class="title">class</span> <span class="title">function</span>&#123;</span></span><br><span class="line"><span class="comment">//...</span></span><br><span class="line">      <span class="keyword">template</span>&lt;<span class="class"><span class="keyword">class</span>... <span class="title">P</span> &gt;</span></span><br><span class="line"><span class="class">      <span class="title">result_type</span> _<span class="title">do_call</span>(<span class="title">P</span>&amp;&amp;... <span class="title">p</span>)&#123;</span></span><br><span class="line">          <span class="keyword">return</span> invoke&lt;result_type&gt;(<span class="built_in">std</span>::forward&lt;P&gt;(p)...);</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">public</span>:</span><br><span class="line">  <span class="comment">//...</span></span><br><span class="line">        <span class="keyword">template</span>&lt;<span class="class"><span class="keyword">class</span> _<span class="title">functor</span>&gt;</span></span><br><span class="line"><span class="class">        <span class="title">function</span>&amp; <span class="title">operator</span>=(_<span class="title">functor</span>&amp;&amp; <span class="title">ft</span>)&#123;</span></span><br><span class="line">            function&lt;_functor&gt;(<span class="built_in">std</span>::forward&lt;_functor&gt;(ft)).swap(*<span class="keyword">this</span>);</span><br><span class="line">            <span class="keyword">return</span> *<span class="keyword">this</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="function"><span class="keyword">void</span> <span class="title">swap</span><span class="params">(function&amp; f)</span></span>&#123;</span><br><span class="line">            <span class="built_in">std</span>::swap(*<span class="keyword">this</span>,f);</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">template</span>&lt;<span class="class"><span class="keyword">class</span>... <span class="title">P</span>&gt;</span></span><br><span class="line"><span class="class">        <span class="title">result_type</span> <span class="title">operator</span>()(<span class="title">P</span>&amp;&amp;... <span class="title">p</span>)&#123;</span></span><br><span class="line">            <span class="keyword">return</span> _call(<span class="built_in">std</span>::forward&lt;P&gt;(p)...);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;;<span class="comment">//无用代码</span></span><br></pre></td></tr></table></figure></p><p>事实证明我还是没有那么牛逼，只能大概讲述一下bind的思路了。就是一个function，接收一个参数（设用tuple1存）（如void(int,int,double,char)）的一个函数接收(1,_1,1.2,_3)。（_1,_3就是placeholder<1>和placeholder<3>），然后接收参数（设用tuple2存）（如(1,2,’c’)）,调用时对tuple1每一个元素遍历，如果为placeholder<n>,则在tuple2中找到第N-1个元素填进去。上一篇的那个bind实现确实巧妙，而且也简单。只是我个人妄想写function时出了问题而已，并不代表前面的代码作废了。而且我折腾了这么久，也是该换个战场了。</n></3></1></p><p>那位大神写的代码有几个点是很好的，可以以后用。比如展开tuple的方式值得参考，反射的机制也值得学习。还有一些诸如为什么要用forward,decay,为什么要去除引用，其实我也没太清楚。就当我糊里糊涂学过了吧。</p><p>我还想再说一下那个展开tuple的事情，太涨知识了。但也只能等遥遥无期的有一天再讲了。</p><p>最后还是再完善一下那位大神的注释吧。<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> once</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;type_traits&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;tuple&gt;</span></span></span><br><span class="line"><span class="keyword">namespace</span> simple &#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">// placeholder</span></span><br><span class="line"><span class="comment">//其作用相当于标识而已</span></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">int</span> N&gt;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">placeholder</span> &#123;</span>&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">static</span> placeholder&lt;<span class="number">1</span>&gt; _1; <span class="keyword">static</span> placeholder&lt;<span class="number">6</span>&gt;  _6;  <span class="keyword">static</span> placeholder&lt;<span class="number">11</span>&gt; _11; <span class="keyword">static</span> placeholder&lt;<span class="number">16</span>&gt; _16;</span><br><span class="line"><span class="keyword">static</span> placeholder&lt;<span class="number">2</span>&gt; _2; <span class="keyword">static</span> placeholder&lt;<span class="number">7</span>&gt;  _7;  <span class="keyword">static</span> placeholder&lt;<span class="number">12</span>&gt; _12; <span class="keyword">static</span> placeholder&lt;<span class="number">17</span>&gt; _17;</span><br><span class="line"><span class="keyword">static</span> placeholder&lt;<span class="number">3</span>&gt; _3; <span class="keyword">static</span> placeholder&lt;<span class="number">8</span>&gt;  _8;  <span class="keyword">static</span> placeholder&lt;<span class="number">13</span>&gt; _13; <span class="keyword">static</span> placeholder&lt;<span class="number">18</span>&gt; _18;</span><br><span class="line"><span class="keyword">static</span> placeholder&lt;<span class="number">4</span>&gt; _4; <span class="keyword">static</span> placeholder&lt;<span class="number">9</span>&gt;  _9;  <span class="keyword">static</span> placeholder&lt;<span class="number">14</span>&gt; _14; <span class="keyword">static</span> placeholder&lt;<span class="number">19</span>&gt; _19;</span><br><span class="line"><span class="keyword">static</span> placeholder&lt;<span class="number">5</span>&gt; _5; <span class="keyword">static</span> placeholder&lt;<span class="number">10</span>&gt; _10; <span class="keyword">static</span> placeholder&lt;<span class="number">15</span>&gt; _15; <span class="keyword">static</span> placeholder&lt;<span class="number">20</span>&gt; _20;</span><br><span class="line"></span><br><span class="line"><span class="comment">// sequence &amp; generater</span></span><br><span class="line"><span class="comment">//生成一个&lt;1,2,3...,N&gt;的序列以展开tuple</span></span><br><span class="line"><span class="comment">//避免了递归的复杂操作</span></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">int</span>... N&gt;<span class="comment">//这个int... N 才是序列的精髓</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">seq</span> &#123;</span> <span class="keyword">typedef</span> seq&lt;N..., <span class="keyword">sizeof</span>...(N)&gt; next_type; &#125;;</span><br><span class="line"><span class="comment">//生成序列！ </span></span><br><span class="line"><span class="comment">// seq&lt;0&gt;::next_type == seq&lt;0,1&gt;</span></span><br><span class="line"><span class="comment">// seq&lt;0&gt;::next_type::next_type == seq&lt;0,1,2&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span>... P&gt;<span class="comment">//为什么先声明后定义和我上文写的差不多</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">gen</span>;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span> &lt;&gt;<span class="comment">//递归终止</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">gen</span>&lt;&gt;</span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="keyword">typedef</span> seq&lt;&gt; seq_type;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> P1, <span class="keyword">typename</span>... P&gt;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">gen</span>&lt;P1, P...&gt;</span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="keyword">typedef</span> <span class="keyword">typename</span> gen&lt;P...&gt;::seq_type::next_type seq_type;<span class="comment">// 返回0---输入个数-1的序列 </span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// select</span></span><br><span class="line"><span class="comment">//选择参数</span></span><br><span class="line"><span class="comment">//如tuple1 &lt;1,_1,1.2,_3&gt; tuple2 &lt;1,2,’c’&gt;</span></span><br><span class="line"><span class="comment">//int... N(注:序列生成的东西)=&lt;0,1,2,...,N-1&gt;(N为tuple1的元素个数)</span></span><br><span class="line"><span class="comment">//则对于N=0,get&lt;0&gt;(tuple1)=1,传入参数1；</span></span><br><span class="line"><span class="comment">//对于N=2,get&lt;1&gt;(tuple1)=placeholder&lt;1&gt;,传入参数get&lt;1&gt;(tuple2)(注：即 1);</span></span><br><span class="line"><span class="comment">//对于N=3,get&lt;2&gt;(tuple1)=placeholder&lt;1&gt;,传入参数get&lt;2&gt;(tuple2)(注：即 'c');</span></span><br><span class="line"><span class="comment">//最终参数变成(1,1,1.2,'c')</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> T, <span class="class"><span class="keyword">class</span> <span class="title">TupleT</span>&gt;</span></span><br><span class="line"><span class="class"><span class="title">inline</span> <span class="title">auto</span> <span class="title">select</span>(<span class="title">T</span>&amp;&amp; <span class="title">val</span>, <span class="title">TupleT</span>&amp; /*<span class="title">tp</span>*/) -&gt; <span class="title">T</span>&amp;&amp;</span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">std</span>::forward&lt;T&gt;(val);<span class="comment">//传入事先设定好的默认参数 </span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">int</span> N, <span class="class"><span class="keyword">class</span> <span class="title">TupleT</span>&gt;</span></span><br><span class="line"><span class="class"><span class="title">inline</span> <span class="title">auto</span> <span class="title">select</span>(<span class="title">placeholder</span>&lt;N&gt;, <span class="title">TupleT</span>&amp; <span class="title">tp</span>) -&gt; <span class="title">decltype</span>(<span class="title">std</span>:</span>:get&lt;N - <span class="number">1</span>&gt;(tp))</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">std</span>::get&lt;N - <span class="number">1</span>&gt;(tp);<span class="comment">//tp中第N-1个参数对应placeholder&lt;N&gt;，即placeholder&lt;1&gt;(_1)对应第一个参数 </span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// result type traits</span></span><br><span class="line"><span class="comment">//取函数返回类型 </span></span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> F&gt;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">result_traits</span> :</span> result_traits&lt;<span class="keyword">decltype</span>(&amp;F::<span class="keyword">operator</span>())&gt; &#123;&#125;;<span class="comment">// 取仿函数返回类型 </span></span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">result_traits</span>&lt;T*&gt; :</span> result_traits&lt;T&gt; &#123;&#125;;<span class="comment">// 取非指针类型，再继续判断 </span></span><br><span class="line"></span><br><span class="line"><span class="comment">/* check function */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> R, <span class="keyword">typename</span>... P&gt;<span class="comment">//取普通函数、成员函数返回类型 </span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">result_traits</span>&lt;R(*)(P...)&gt; &#123;</span> <span class="keyword">typedef</span> R type; &#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* check member function */</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//兼容函数cv符</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> RESULT_TRAITS__(...) \</span></span><br><span class="line">    <span class="keyword">template</span> &lt;<span class="keyword">typename</span> R, <span class="keyword">typename</span> C, <span class="keyword">typename</span>... P&gt; \</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">result_traits</span>&lt;R(C::*)(P...) __VA_ARGS__&gt; &#123;</span> <span class="keyword">typedef</span> R type; &#125;;</span><br><span class="line"></span><br><span class="line">RESULT_TRAITS__()</span><br><span class="line">RESULT_TRAITS__(<span class="keyword">const</span>)</span><br><span class="line">RESULT_TRAITS__(<span class="keyword">volatile</span>)</span><br><span class="line">RESULT_TRAITS__(<span class="keyword">const</span> <span class="keyword">volatile</span>)</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">undef</span> RESULT_TRAITS__</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// The invoker for call a callable</span></span><br><span class="line"><span class="comment">// 调用一个可调用的程序  反射</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt;<span class="comment">//是否为指针 </span></span><br><span class="line"><span class="comment">//事实上当初传入引用（而且是右值引用）仅仅是为了节约时间，这里要先去除引用</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">is_pointer_noref</span></span></span><br><span class="line"><span class="class">    :</span> <span class="built_in">std</span>::is_pointer&lt;<span class="keyword">typename</span> <span class="built_in">std</span>::remove_reference&lt;T&gt;::type&gt;</span><br><span class="line">&#123;&#125;;</span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt;<span class="comment">//是否为成员函数 </span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">is_memfunc_noref</span></span></span><br><span class="line"><span class="class">    :</span> <span class="built_in">std</span>::is_member_function_pointer&lt;<span class="keyword">typename</span> <span class="built_in">std</span>::remove_reference&lt;T&gt;::type&gt;</span><br><span class="line">&#123;&#125;;</span><br><span class="line"><span class="comment">/////////////函数绑定的执行程序 </span></span><br><span class="line"><span class="comment">//R为返回值,F为函数指针,this_XXX为对象实例|指针，</span></span><br><span class="line"><span class="comment">//类比函数指针调用方法就很好理解了</span></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> R, <span class="keyword">typename</span> F, <span class="keyword">typename</span>... P&gt;<span class="comment">//普通函数指针</span></span><br><span class="line"><span class="keyword">inline</span> <span class="keyword">typename</span> <span class="built_in">std</span>::enable_if&lt;is_pointer_noref&lt;F&gt;::value,</span><br><span class="line">R&gt;::<span class="function">type <span class="title">invoke</span><span class="params">(F&amp;&amp; f, P&amp;&amp;... par)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> (*<span class="built_in">std</span>::forward&lt;F&gt;(f))(<span class="built_in">std</span>::forward&lt;P&gt;(par)...);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> R, <span class="keyword">typename</span> F, <span class="keyword">typename</span> P1, <span class="keyword">typename</span>... P&gt;<span class="comment">//对象指针</span></span><br><span class="line"><span class="keyword">inline</span> <span class="keyword">typename</span> <span class="built_in">std</span>::enable_if&lt;is_memfunc_noref&lt;F&gt;::value &amp;&amp; is_pointer_noref&lt;P1&gt;::value,</span><br><span class="line">R&gt;::<span class="function">type <span class="title">invoke</span><span class="params">(F&amp;&amp; f, P1&amp;&amp; this_ptr, P&amp;&amp;... par)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> (<span class="built_in">std</span>::forward&lt;P1&gt;(this_ptr)-&gt;*<span class="built_in">std</span>::forward&lt;F&gt;(f))(<span class="built_in">std</span>::forward&lt;P&gt;(par)...);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> R, <span class="keyword">typename</span> F, <span class="keyword">typename</span> P1, <span class="keyword">typename</span>... P&gt;<span class="comment">//对象成员函数 </span></span><br><span class="line"><span class="keyword">inline</span> <span class="keyword">typename</span> <span class="built_in">std</span>::enable_if&lt;is_memfunc_noref&lt;F&gt;::value &amp;&amp; !is_pointer_noref&lt;P1&gt;::value,</span><br><span class="line">R&gt;::<span class="function">type <span class="title">invoke</span><span class="params">(F&amp;&amp; f, P1&amp;&amp; this_obj, P&amp;&amp;... par)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> (<span class="built_in">std</span>::forward&lt;P1&gt;(this_obj).*<span class="built_in">std</span>::forward&lt;F&gt;(f))(<span class="built_in">std</span>::forward&lt;P&gt;(par)...);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> R, <span class="keyword">typename</span> F, <span class="keyword">typename</span>... P&gt;<span class="comment">//普通函数 </span></span><br><span class="line"><span class="keyword">inline</span> <span class="keyword">typename</span> <span class="built_in">std</span>::enable_if&lt;!is_pointer_noref&lt;F&gt;::value &amp;&amp; !is_memfunc_noref&lt;F&gt;::value,</span><br><span class="line">R&gt;::<span class="function">type <span class="title">invoke</span><span class="params">(F&amp;&amp; f, P&amp;&amp;... par)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">std</span>::forward&lt;F&gt;(f)(<span class="built_in">std</span>::forward&lt;P&gt;(par)...);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Simple functor for bind function's return type</span></span><br><span class="line"><span class="comment">//一个简单的function实现，只是使用有点差异</span></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> FuncT, <span class="keyword">typename</span>... ArgsT&gt;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">fr</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="comment">//private</span></span><br><span class="line">    <span class="keyword">typedef</span> <span class="built_in">std</span>::tuple&lt;<span class="keyword">typename</span> <span class="built_in">std</span>::decay&lt;ArgsT&gt;::type...&gt; args_type;<span class="comment">//函数变量 因为是变参，所以要封装成tuple </span></span><br><span class="line">    <span class="keyword">typedef</span> <span class="keyword">typename</span> <span class="built_in">std</span>::decay&lt;FuncT&gt;::type                callable_type;<span class="comment">//函数体 </span></span><br><span class="line">    <span class="keyword">typedef</span> <span class="keyword">typename</span> result_traits&lt;callable_type&gt;::type     result_type;<span class="comment">//返回值 </span></span><br><span class="line"></span><br><span class="line">    callable_type call_;<span class="comment">//函数体 </span></span><br><span class="line">    args_type     args_;<span class="comment">//函数变量 </span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span> <span class="title">TupleT</span>, <span class="title">int</span>... <span class="title">N</span>&gt;</span></span><br><span class="line"><span class="class">    <span class="title">result_type</span> <span class="title">do_call</span>(<span class="title">TupleT</span>&amp; <span class="title">tp</span>/*运行时传入的参数*/, <span class="title">seq</span>&lt;N...&gt;)//运行 </span></span><br><span class="line"><span class="class">    &#123;</span><span class="comment">//select就是选取参数的那一步</span></span><br><span class="line">        <span class="keyword">return</span> invoke&lt;result_type&gt;(call_, select(<span class="built_in">std</span>::get&lt;N&gt;(args_), tp)...);<span class="comment">//巧妙应用...的方法 </span></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="keyword">template</span>&lt;<span class="keyword">typename</span> F, <span class="keyword">typename</span>... P&gt;<span class="comment">//初始化 </span></span><br><span class="line">    fr(F&amp;&amp; f, P&amp;&amp;... par)</span><br><span class="line">        : call_(<span class="built_in">std</span>::forward&lt;F&gt;(f))</span><br><span class="line">        , args_(<span class="built_in">std</span>::forward&lt;P&gt;(par)...)</span><br><span class="line">    &#123;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">template</span> &lt;<span class="keyword">typename</span>... P&gt;<span class="comment">//正式调用 </span></span><br><span class="line">    <span class="function">result_type <span class="title">operator</span><span class="params">()</span><span class="params">(P&amp;&amp;... par)</span><span class="comment">//调用时的参数 </span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">            &lt;MSVC 2013&gt; type_traits(1509): fatal error C1001</span></span><br><span class="line"><span class="comment">            With: std::forward&lt;P&gt;(par)...</span></span><br><span class="line"><span class="comment">        */</span></span><br><span class="line">        <span class="built_in">std</span>::tuple&lt;<span class="keyword">typename</span> <span class="built_in">std</span>::decay&lt;P&gt;::type...&gt; pars(<span class="keyword">static_cast</span>&lt;P&amp;&amp;&gt;(par)...);<span class="comment">//没看懂为什么是static_cast</span></span><br><span class="line">        <span class="keyword">return</span> do_call(pars, <span class="keyword">typename</span> gen&lt;ArgsT...&gt;::seq_type());<span class="comment">//这个gen返回&lt;0,1,2,...,参数个数-1&gt; </span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Bind function arguments</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> F, <span class="keyword">typename</span>... P&gt;</span><br><span class="line"><span class="keyword">inline</span> fr&lt;F, P...&gt; bind(F&amp;&amp; f, P&amp;&amp;... par)<span class="comment">//一个小封装 </span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">return</span> fr&lt;F, P...&gt;(<span class="built_in">std</span>::forward&lt;F&gt;(f), <span class="built_in">std</span>::forward&lt;P&gt;(par)...);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125; <span class="comment">// namespace simple</span></span><br></pre></td></tr></table></figure></p><p>补充，事实上它这个function和原生的function功能一模一样。所以如果要用function，直接用这种实现方式就行了，不必按我的奇葩想法去做。（当然你要保证你的这个function未来不会有改动，或者“阅后即焚”）。</p><h3 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h3><p>c++函数之旅只能不了了之了。因为我实在没时间了。未来打算学一下thread和autoptr，然后基本上就转行了。结尾之际，再次说一句真理：c++堕落人性毁人生。</p>]]></content>
      
      
      <categories>
          
          <category> 笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> c++ </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>c++函数（1.5）</title>
      <link href="/2018/11/03/c-%E5%87%BD%E6%95%B0%EF%BC%881-5%EF%BC%89/"/>
      <url>/2018/11/03/c-%E5%87%BD%E6%95%B0%EF%BC%881-5%EF%BC%89/</url>
      
        <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>没想到会这么难，<del>事实上是我太弱了</del>。下次再详细叙述吧，这次就只能发个草稿了,代码由大佬编写，只有注释是我的，<del>梦想写出这样的代码ing</del></p><a id="more"></a><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//bind.h</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> once</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;type_traits&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;tuple&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">变态难，慢慢消化吧 </span></span><br><span class="line"><span class="comment"> https://www.cnblogs.com/qicosmos/p/3723388.html 大佬（可惜他的程序好像有点问题） </span></span><br><span class="line"><span class="comment">*/</span> </span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> simple &#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">// placeholder</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">int</span> N&gt;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">placeholder</span> &#123;</span>&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">static</span> placeholder&lt;<span class="number">1</span>&gt; _1; <span class="keyword">static</span> placeholder&lt;<span class="number">6</span>&gt;  _6;  <span class="keyword">static</span> placeholder&lt;<span class="number">11</span>&gt; _11; <span class="keyword">static</span> placeholder&lt;<span class="number">16</span>&gt; _16;</span><br><span class="line"><span class="keyword">static</span> placeholder&lt;<span class="number">2</span>&gt; _2; <span class="keyword">static</span> placeholder&lt;<span class="number">7</span>&gt;  _7;  <span class="keyword">static</span> placeholder&lt;<span class="number">12</span>&gt; _12; <span class="keyword">static</span> placeholder&lt;<span class="number">17</span>&gt; _17;</span><br><span class="line"><span class="keyword">static</span> placeholder&lt;<span class="number">3</span>&gt; _3; <span class="keyword">static</span> placeholder&lt;<span class="number">8</span>&gt;  _8;  <span class="keyword">static</span> placeholder&lt;<span class="number">13</span>&gt; _13; <span class="keyword">static</span> placeholder&lt;<span class="number">18</span>&gt; _18;</span><br><span class="line"><span class="keyword">static</span> placeholder&lt;<span class="number">4</span>&gt; _4; <span class="keyword">static</span> placeholder&lt;<span class="number">9</span>&gt;  _9;  <span class="keyword">static</span> placeholder&lt;<span class="number">14</span>&gt; _14; <span class="keyword">static</span> placeholder&lt;<span class="number">19</span>&gt; _19;</span><br><span class="line"><span class="keyword">static</span> placeholder&lt;<span class="number">5</span>&gt; _5; <span class="keyword">static</span> placeholder&lt;<span class="number">10</span>&gt; _10; <span class="keyword">static</span> placeholder&lt;<span class="number">15</span>&gt; _15; <span class="keyword">static</span> placeholder&lt;<span class="number">20</span>&gt; _20;</span><br><span class="line"></span><br><span class="line"><span class="comment">// sequence &amp; generater</span></span><br><span class="line"><span class="comment">// 序列与生成器 真的是啊！！ </span></span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">int</span>... N&gt;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">seq</span> &#123;</span> <span class="keyword">typedef</span> seq&lt;N..., <span class="keyword">sizeof</span>...(N)&gt; next_type; &#125;;</span><br><span class="line"><span class="comment">//生成序列！ </span></span><br><span class="line"><span class="comment">// seq&lt;0&gt;::next_type == seq&lt;0,1&gt;</span></span><br><span class="line"><span class="comment">// seq&lt;0&gt;::next_type::next_type == seq&lt;0,1,2&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span>... P&gt;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">gen</span>;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span> &lt;&gt;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">gen</span>&lt;&gt;</span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="keyword">typedef</span> seq&lt;&gt; seq_type;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> P1, <span class="keyword">typename</span>... P&gt;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">gen</span>&lt;P1, P...&gt;</span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="keyword">typedef</span> <span class="keyword">typename</span> gen&lt;P...&gt;::seq_type::next_type seq_type;<span class="comment">// 返回0---输入个数-1的序列 </span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// select// ?</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> T, <span class="class"><span class="keyword">class</span> <span class="title">TupleT</span>&gt;</span></span><br><span class="line"><span class="class"><span class="title">inline</span> <span class="title">auto</span> <span class="title">select</span>(<span class="title">T</span>&amp;&amp; <span class="title">val</span>, <span class="title">TupleT</span>&amp; /*<span class="title">tp</span>*/) -&gt; <span class="title">T</span>&amp;&amp;</span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">std</span>::forward&lt;T&gt;(val);<span class="comment">//传入事先设定好的默认参数 </span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">int</span> N, <span class="class"><span class="keyword">class</span> <span class="title">TupleT</span>&gt;</span></span><br><span class="line"><span class="class"><span class="title">inline</span> <span class="title">auto</span> <span class="title">select</span>(<span class="title">placeholder</span>&lt;N&gt;, <span class="title">TupleT</span>&amp; <span class="title">tp</span>) -&gt; <span class="title">decltype</span>(<span class="title">std</span>:</span>:get&lt;N - <span class="number">1</span>&gt;(tp))</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">std</span>::get&lt;N - <span class="number">1</span>&gt;(tp);<span class="comment">//tp中第N-1个参数对应placeholder&lt;N&gt;，即placeholder&lt;1&gt;(_1)对应第一个参数 </span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// result type traits</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> F&gt;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">result_traits</span> :</span> result_traits&lt;<span class="keyword">decltype</span>(&amp;F::<span class="keyword">operator</span>())&gt; &#123;&#125;;<span class="comment">// 取仿函数返回类型 </span></span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">result_traits</span>&lt;T*&gt; :</span> result_traits&lt;T&gt; &#123;&#125;;<span class="comment">// 取非指针类型，再继续判断 </span></span><br><span class="line"></span><br><span class="line"><span class="comment">/* check function */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> R, <span class="keyword">typename</span>... P&gt;<span class="comment">//取普通函数、成员函数返回类型 </span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">result_traits</span>&lt;R(*)(P...)&gt; &#123;</span> <span class="keyword">typedef</span> R type; &#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* check member function */</span><span class="comment">//兼容函数cv符</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> RESULT_TRAITS__(...) \</span></span><br><span class="line">    <span class="keyword">template</span> &lt;<span class="keyword">typename</span> R, <span class="keyword">typename</span> C, <span class="keyword">typename</span>... P&gt; \</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">result_traits</span>&lt;R(C::*)(P...) __VA_ARGS__&gt; &#123;</span> <span class="keyword">typedef</span> R type; &#125;;</span><br><span class="line"></span><br><span class="line">RESULT_TRAITS__()</span><br><span class="line">RESULT_TRAITS__(<span class="keyword">const</span>)</span><br><span class="line">RESULT_TRAITS__(<span class="keyword">volatile</span>)</span><br><span class="line">RESULT_TRAITS__(<span class="keyword">const</span> <span class="keyword">volatile</span>)</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">undef</span> RESULT_TRAITS__</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// The invoker for call a callable</span></span><br><span class="line"><span class="comment">// 调用一个可调用的程序  反射？ </span></span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt;<span class="comment">//是否为指针 </span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">is_pointer_noref</span></span></span><br><span class="line"><span class="class">    :</span> <span class="built_in">std</span>::is_pointer&lt;<span class="keyword">typename</span> <span class="built_in">std</span>::remove_reference&lt;T&gt;::type&gt;</span><br><span class="line">&#123;&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt;<span class="comment">//是否为成员函数 </span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">is_memfunc_noref</span></span></span><br><span class="line"><span class="class">    :</span> <span class="built_in">std</span>::is_member_function_pointer&lt;<span class="keyword">typename</span> <span class="built_in">std</span>::remove_reference&lt;T&gt;::type&gt;</span><br><span class="line">&#123;&#125;;</span><br><span class="line"><span class="comment">/////////////函数绑定的执行程序 </span></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> R, <span class="keyword">typename</span> F, <span class="keyword">typename</span>... P&gt;<span class="comment">//普通函数指针</span></span><br><span class="line"><span class="keyword">inline</span> <span class="keyword">typename</span> <span class="built_in">std</span>::enable_if&lt;is_pointer_noref&lt;F&gt;::value,</span><br><span class="line">R&gt;::<span class="function">type <span class="title">invoke</span><span class="params">(F&amp;&amp; f, P&amp;&amp;... par)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> (*<span class="built_in">std</span>::forward&lt;F&gt;(f))(<span class="built_in">std</span>::forward&lt;P&gt;(par)...);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> R, <span class="keyword">typename</span> F, <span class="keyword">typename</span> P1, <span class="keyword">typename</span>... P&gt;<span class="comment">//对象指针</span></span><br><span class="line"><span class="keyword">inline</span> <span class="keyword">typename</span> <span class="built_in">std</span>::enable_if&lt;is_memfunc_noref&lt;F&gt;::value &amp;&amp; is_pointer_noref&lt;P1&gt;::value,</span><br><span class="line">R&gt;::<span class="function">type <span class="title">invoke</span><span class="params">(F&amp;&amp; f, P1&amp;&amp; this_ptr, P&amp;&amp;... par)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> (<span class="built_in">std</span>::forward&lt;P1&gt;(this_ptr)-&gt;*<span class="built_in">std</span>::forward&lt;F&gt;(f))(<span class="built_in">std</span>::forward&lt;P&gt;(par)...);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> R, <span class="keyword">typename</span> F, <span class="keyword">typename</span> P1, <span class="keyword">typename</span>... P&gt;<span class="comment">//对象成员函数 </span></span><br><span class="line"><span class="keyword">inline</span> <span class="keyword">typename</span> <span class="built_in">std</span>::enable_if&lt;is_memfunc_noref&lt;F&gt;::value &amp;&amp; !is_pointer_noref&lt;P1&gt;::value,</span><br><span class="line">R&gt;::<span class="function">type <span class="title">invoke</span><span class="params">(F&amp;&amp; f, P1&amp;&amp; this_obj, P&amp;&amp;... par)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> (<span class="built_in">std</span>::forward&lt;P1&gt;(this_obj).*<span class="built_in">std</span>::forward&lt;F&gt;(f))(<span class="built_in">std</span>::forward&lt;P&gt;(par)...);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> R, <span class="keyword">typename</span> F, <span class="keyword">typename</span>... P&gt;<span class="comment">//普通函数 </span></span><br><span class="line"><span class="keyword">inline</span> <span class="keyword">typename</span> <span class="built_in">std</span>::enable_if&lt;!is_pointer_noref&lt;F&gt;::value &amp;&amp; !is_memfunc_noref&lt;F&gt;::value,</span><br><span class="line">R&gt;::<span class="function">type <span class="title">invoke</span><span class="params">(F&amp;&amp; f, P&amp;&amp;... par)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">std</span>::forward&lt;F&gt;(f)(<span class="built_in">std</span>::forward&lt;P&gt;(par)...);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Simple functor for bind function's return type</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> FuncT, <span class="keyword">typename</span>... ArgsT&gt;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">fr</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="comment">//private</span></span><br><span class="line">    <span class="keyword">typedef</span> <span class="built_in">std</span>::tuple&lt;<span class="keyword">typename</span> <span class="built_in">std</span>::decay&lt;ArgsT&gt;::type...&gt; args_type;<span class="comment">//函数变量 因为是变参，所以要封装成tuple </span></span><br><span class="line">    <span class="keyword">typedef</span> <span class="keyword">typename</span> <span class="built_in">std</span>::decay&lt;FuncT&gt;::type                callable_type;<span class="comment">//函数体 </span></span><br><span class="line">    <span class="keyword">typedef</span> <span class="keyword">typename</span> result_traits&lt;callable_type&gt;::type     result_type;<span class="comment">//返回值 </span></span><br><span class="line"></span><br><span class="line">    callable_type call_;<span class="comment">//函数体 </span></span><br><span class="line">    args_type     args_;<span class="comment">//函数变量 </span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span> <span class="title">TupleT</span>, <span class="title">int</span>... <span class="title">N</span>&gt;</span></span><br><span class="line"><span class="class">    <span class="title">result_type</span> <span class="title">do_call</span>(<span class="title">TupleT</span>&amp; <span class="title">tp</span>/*运行时传入的参数*/, <span class="title">seq</span>&lt;N...&gt;)//运行 </span></span><br><span class="line"><span class="class">    &#123;</span></span><br><span class="line">        <span class="keyword">return</span> invoke&lt;result_type&gt;(call_, select(<span class="built_in">std</span>::get&lt;N&gt;(args_)<span class="comment">/*初始化时定义的参数*/</span>, tp)...);<span class="comment">//巧妙应用...的方法 </span></span><br><span class="line">        <span class="comment">// /*选择*//*巧妙的拆tuple方法*/</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/*...常规使用 </span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">int sum(int count, ...);    　　//原型中使用省略号</span></span><br><span class="line"><span class="comment"> </span></span><br><span class="line"><span class="comment">int sum(int count, ...)&#123;    　　//count 表示可变参数个数</span></span><br><span class="line"><span class="comment">    va_list ap;　　　　　　　　　　//声明一个va_list变量</span></span><br><span class="line"><span class="comment">    va_start(ap, count);　　 　　//初始化，第二个参数为最后一个确定的形参</span></span><br><span class="line"><span class="comment"> </span></span><br><span class="line"><span class="comment">    int sum = 0;  </span></span><br><span class="line"><span class="comment">    for(int i = 0; i &lt; count; i++)          </span></span><br><span class="line"><span class="comment">        sum += va_arg(ap, int); //读取可变参数，的二个参数为可变参数的类型</span></span><br><span class="line"><span class="comment"> </span></span><br><span class="line"><span class="comment">    va_end(ap);          　　　　//清理工作 </span></span><br><span class="line"><span class="comment">    return sum;</span></span><br><span class="line"><span class="comment">//https://blog.csdn.net/qq_27385759/article/details/79136324 </span></span><br><span class="line"><span class="comment">//https://blog.csdn.net/w746805370/article/details/51172153 //大佬级，var_arg的原理及实现 C </span></span><br><span class="line"><span class="comment">//https://blog.csdn.net/nodeathphoenix/article/details/18154275 //ADL</span></span><br><span class="line"><span class="comment">//https://www.cnblogs.com/gtarcoder/p/4810614.html</span></span><br><span class="line"><span class="comment">// https://blog.csdn.net/luoqie123/article/details/52054855 //高能 </span></span><br><span class="line"><span class="comment">http://blog.51cto.com/5662165/2142574?source=drh</span></span><br><span class="line"><span class="comment">*/</span> </span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="keyword">template</span>&lt;<span class="keyword">typename</span> F, <span class="keyword">typename</span>... P&gt;<span class="comment">//初始化 </span></span><br><span class="line">    fr(F&amp;&amp; f, P&amp;&amp;... par)</span><br><span class="line">        : call_(<span class="built_in">std</span>::forward&lt;F&gt;(f))</span><br><span class="line">        , args_(<span class="built_in">std</span>::forward&lt;P&gt;(par)...)</span><br><span class="line">    &#123;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">template</span> &lt;<span class="keyword">typename</span>... P&gt;<span class="comment">//正式调用 </span></span><br><span class="line">    <span class="function">result_type <span class="title">operator</span><span class="params">()</span><span class="params">(P&amp;&amp;... par)</span><span class="comment">//调用时的参数 </span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">            &lt;MSVC 2013&gt; type_traits(1509): fatal error C1001</span></span><br><span class="line"><span class="comment">            With: std::forward&lt;P&gt;(par)...</span></span><br><span class="line"><span class="comment">        */</span></span><br><span class="line">        <span class="built_in">std</span>::tuple&lt;<span class="keyword">typename</span> <span class="built_in">std</span>::decay&lt;P&gt;::type...&gt; pars(<span class="keyword">static_cast</span>&lt;P&amp;&amp;&gt;(par)...);<span class="comment">// 参数</span></span><br><span class="line">        <span class="keyword">return</span> do_call(pars, <span class="keyword">typename</span> gen&lt;ArgsT...&gt;::seq_type());<span class="comment">//研究了好久o(╥﹏╥)o，这个gen返回&lt;0,1,2,...,参数个数-1&gt; </span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Bind function arguments</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> F, <span class="keyword">typename</span>... P&gt;</span><br><span class="line"><span class="keyword">inline</span> fr&lt;F, P...&gt; bind(F&amp;&amp; f, P&amp;&amp;... par)<span class="comment">//一个小封装 </span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">return</span> fr&lt;F, P...&gt;(<span class="built_in">std</span>::forward&lt;F&gt;(f), <span class="built_in">std</span>::forward&lt;P&gt;(par)...);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125; <span class="comment">// namespace simple</span></span><br></pre></td></tr></table></figure><hr><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//bind_test.cpp</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"bind.h"</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;functional&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;utility&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">//////////////////////////////////////////////////////////////////////////</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">if</span> defined(_MSC_VER)</span></span><br><span class="line"><span class="meta">#   <span class="meta-keyword">define</span> TEST_FUNC_NAME __FUNCSIG__</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">elif</span> defined(__GNUC__)</span></span><br><span class="line"><span class="meta">#   <span class="meta-keyword">define</span> TEST_FUNC_NAME __PRETTY_FUNCTION__</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">else</span></span></span><br><span class="line"><span class="meta">#   <span class="meta-keyword">define</span> TEST_FUNC_NAME __func__</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> TEST_CASE(...) \</span></span><br><span class="line">    <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span> \</span><br><span class="line">              &lt;&lt; <span class="string">"----------------------------------"</span> &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span> \</span><br><span class="line">              &lt;&lt; TEST_FUNC_NAME &lt;&lt; <span class="string">" -&gt;: "</span> __VA_ARGS__ &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span> \</span><br><span class="line">              &lt;&lt; <span class="string">"----------------------------------"</span> &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//////////////////////////////////////////////////////////////////////////检查返回值判断是否正确 </span></span><br><span class="line"><span class="comment">//大神级测试代码看不懂很正常... </span></span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> test_result_traits_np</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">using</span> <span class="keyword">namespace</span> simple;</span><br><span class="line"></span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Foo</span> &#123;</span>&#125;;</span><br><span class="line"></span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Func</span></span></span><br><span class="line"><span class="class">    &#123;</span></span><br><span class="line">    <span class="keyword">public</span>:</span><br><span class="line">        <span class="function"><span class="keyword">int</span> <span class="title">operator</span><span class="params">()</span><span class="params">(<span class="keyword">void</span>)</span> </span>&#123; <span class="keyword">return</span> <span class="number">0</span>; &#125;</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">template</span> &lt;<span class="keyword">typename</span>&gt;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">check</span>;</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">template</span> &lt;&gt;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">check</span>&lt;int&gt;</span></span><br><span class="line"><span class="class">    &#123;</span></span><br><span class="line">        check(<span class="keyword">void</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">"int!"</span> &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">test_result_traits</span><span class="params">(<span class="keyword">void</span>)</span> <span class="comment">//应全部输出int（实际也是） </span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    TEST_CASE();</span><br><span class="line">    <span class="keyword">using</span> <span class="keyword">namespace</span> test_result_traits_np;</span><br><span class="line"></span><br><span class="line">    check&lt;result_traits&lt;<span class="keyword">int</span>(*)(<span class="keyword">void</span>)&gt;::type&gt;();</span><br><span class="line">    check&lt;result_traits&lt;<span class="keyword">int</span>(Foo::*)(<span class="keyword">void</span>)&gt;::type&gt;();</span><br><span class="line">    check&lt;result_traits&lt;Func&gt;::type&gt;();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//////////////////////////////////////////////////////////////////////////检查绑定器（如果可以这么说） </span></span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> test_fr_np</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">using</span> <span class="keyword">namespace</span> simple;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">func</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; TEST_FUNC_NAME &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Func</span></span></span><br><span class="line"><span class="class">    &#123;</span></span><br><span class="line">    <span class="keyword">public</span>:</span><br><span class="line">        <span class="function"><span class="keyword">int</span> <span class="title">operator</span><span class="params">()</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">double</span> b)</span></span></span><br><span class="line"><span class="function">        </span>&#123;</span><br><span class="line">            <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; TEST_FUNC_NAME &lt;&lt; <span class="string">"("</span> &lt;&lt; a &lt;&lt; <span class="string">", "</span> &lt;&lt; b &lt;&lt; <span class="string">")"</span> &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">test_fr</span><span class="params">(<span class="keyword">void</span>)</span><span class="comment">//事实证明达到了我们需要的效果 </span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    TEST_CASE();</span><br><span class="line">    <span class="keyword">using</span> <span class="keyword">namespace</span> test_fr_np;</span><br><span class="line"></span><br><span class="line">    fr&lt;<span class="keyword">void</span>(<span class="keyword">void</span>)&gt; f1(func);</span><br><span class="line">    f1();</span><br><span class="line"></span><br><span class="line">    Func func;</span><br><span class="line">    fr&lt;Func, placeholder&lt;<span class="number">2</span>&gt;, placeholder&lt;<span class="number">1</span>&gt;&gt; f2(func, _2, _1);</span><br><span class="line">    f2(<span class="number">123</span>, <span class="number">321</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//////////////////////////////////////////////////////////////////////////综合测试 </span></span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> test_bind_np</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">using</span> <span class="keyword">namespace</span> simple;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">func0_0</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; TEST_FUNC_NAME &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">func0_1</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; TEST_FUNC_NAME &lt;&lt; <span class="string">" -&gt;: "</span>;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">func1</span><span class="params">(<span class="keyword">long</span> a)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; TEST_FUNC_NAME &lt;&lt; <span class="string">"("</span> &lt;&lt; a &lt;&lt; <span class="string">")"</span> &lt;&lt; <span class="string">" -&gt;: "</span>;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">static</span> <span class="keyword">int</span> <span class="title">func2</span><span class="params">(<span class="keyword">long</span> a, <span class="keyword">int</span> b)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; TEST_FUNC_NAME &lt;&lt; <span class="string">"("</span> &lt;&lt; a &lt;&lt; <span class="string">", "</span> &lt;&lt; b &lt;&lt; <span class="string">")"</span> &lt;&lt; <span class="string">" -&gt;: "</span>;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">2</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">A</span></span></span><br><span class="line"><span class="class">    &#123;</span></span><br><span class="line">    <span class="keyword">public</span>:</span><br><span class="line">        <span class="function"><span class="keyword">virtual</span> <span class="keyword">int</span> <span class="title">func</span><span class="params">(<span class="keyword">long</span> a, <span class="keyword">int</span> b, <span class="keyword">long</span> c, <span class="keyword">int</span> d)</span></span></span><br><span class="line"><span class="function">        </span>&#123;</span><br><span class="line">            <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; TEST_FUNC_NAME &lt;&lt; <span class="string">"("</span> &lt;&lt; a &lt;&lt; <span class="string">", "</span></span><br><span class="line">                &lt;&lt; b &lt;&lt; <span class="string">", "</span></span><br><span class="line">                &lt;&lt; c &lt;&lt; <span class="string">", "</span></span><br><span class="line">                &lt;&lt; d &lt;&lt; <span class="string">")"</span> &lt;&lt; <span class="string">" -&gt;: "</span>;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">4</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">B</span> :</span> <span class="keyword">public</span> A</span><br><span class="line">    &#123;</span><br><span class="line">    <span class="keyword">public</span>:</span><br><span class="line">        <span class="function"><span class="keyword">int</span> <span class="title">func</span><span class="params">(<span class="keyword">long</span> a, <span class="keyword">int</span> b, <span class="keyword">long</span> c, <span class="keyword">int</span> d)</span></span></span><br><span class="line"><span class="function">        </span>&#123;</span><br><span class="line">            <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; TEST_FUNC_NAME &lt;&lt; <span class="string">"("</span> &lt;&lt; a &lt;&lt; <span class="string">", "</span></span><br><span class="line">                &lt;&lt; b &lt;&lt; <span class="string">", "</span></span><br><span class="line">                &lt;&lt; c &lt;&lt; <span class="string">", "</span></span><br><span class="line">                &lt;&lt; d &lt;&lt; <span class="string">")"</span> &lt;&lt; <span class="string">" -&gt;: "</span>;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">4</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">int</span> <span class="title">func_const</span><span class="params">(<span class="keyword">long</span> a)</span> <span class="keyword">const</span></span></span><br><span class="line"><span class="function">        </span>&#123;</span><br><span class="line">            <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; TEST_FUNC_NAME &lt;&lt; <span class="string">"("</span> &lt;&lt; a &lt;&lt; <span class="string">")"</span> &lt;&lt; <span class="string">" -&gt;: "</span>;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">static</span> <span class="keyword">int</span> <span class="title">funcS</span><span class="params">(<span class="keyword">long</span> a)</span></span></span><br><span class="line"><span class="function">        </span>&#123;</span><br><span class="line">            <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; TEST_FUNC_NAME &lt;&lt; <span class="string">"("</span> &lt;&lt; a &lt;&lt; <span class="string">")"</span> &lt;&lt; <span class="string">" -&gt;: "</span>;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Func0</span></span></span><br><span class="line"><span class="class">    &#123;</span></span><br><span class="line">    <span class="keyword">public</span>:</span><br><span class="line">        <span class="function"><span class="keyword">int</span> <span class="title">operator</span><span class="params">()</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function">        </span>&#123;</span><br><span class="line">            <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; TEST_FUNC_NAME &lt;&lt; <span class="string">" -&gt;: "</span>;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Func1</span></span></span><br><span class="line"><span class="class">    &#123;</span></span><br><span class="line">    <span class="keyword">public</span>:</span><br><span class="line">        <span class="built_in">std</span>::<span class="function"><span class="built_in">string</span>&amp; <span class="title">operator</span><span class="params">()</span><span class="params">(<span class="built_in">std</span>::<span class="built_in">string</span>&amp; s)</span></span></span><br><span class="line"><span class="function">        </span>&#123;</span><br><span class="line">            <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; TEST_FUNC_NAME &lt;&lt; <span class="string">"("</span> &lt;&lt; s &lt;&lt; <span class="string">")"</span> &lt;&lt; <span class="string">" -&gt;: "</span>;</span><br><span class="line">            <span class="keyword">return</span> s;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Func2</span></span></span><br><span class="line"><span class="class">    &#123;</span></span><br><span class="line">    <span class="keyword">public</span>:</span><br><span class="line">        <span class="function"><span class="keyword">int</span> <span class="title">operator</span><span class="params">()</span><span class="params">(<span class="keyword">void</span>)</span> <span class="keyword">const</span> <span class="keyword">volatile</span></span></span><br><span class="line"><span class="function">        </span>&#123;</span><br><span class="line">            <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; TEST_FUNC_NAME &lt;&lt; <span class="string">" -&gt;: "</span>;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">UncopyableFunc</span></span></span><br><span class="line"><span class="class">    &#123;</span></span><br><span class="line">    <span class="keyword">public</span>:</span><br><span class="line">        UncopyableFunc(<span class="keyword">void</span>) &#123;&#125;</span><br><span class="line">        UncopyableFunc(UncopyableFunc&amp;&amp;) &#123;&#125;</span><br><span class="line">        UncopyableFunc(<span class="keyword">const</span> UncopyableFunc&amp;) = <span class="keyword">delete</span>;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">int</span> <span class="title">operator</span><span class="params">()</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function">        </span>&#123;</span><br><span class="line">            <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; TEST_FUNC_NAME &lt;&lt; <span class="string">" -&gt;: "</span>;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">test_bind</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    TEST_CASE();</span><br><span class="line">    <span class="keyword">using</span> <span class="keyword">namespace</span> test_bind_np;<span class="comment">//普通函数 </span></span><br><span class="line">    &#123;</span><br><span class="line">        bind(func0_0)();</span><br><span class="line">        <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; bind(func0_1)() &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>;</span><br><span class="line">        <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; bind(func1, _1)(<span class="number">123</span>) &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>;</span><br><span class="line">        <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; bind(func2, _1, _1)(<span class="number">321</span>) &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>;<span class="comment">//成员函数 </span></span><br><span class="line">    &#123;</span><br><span class="line">        B a;</span><br><span class="line">        <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; bind(&amp;B::func, a, <span class="number">1</span>, _1, <span class="number">3</span>, <span class="number">4</span>)(<span class="number">2</span>) &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>;<span class="comment">//普通 </span></span><br><span class="line">        <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; bind(&amp;B::func_const, &amp;a, <span class="number">123</span>)() &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>;<span class="comment">//const </span></span><br><span class="line">        A* pa = &amp;a;</span><br><span class="line">        <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; bind(&amp;A::func, pa, _4, _3, _2, _1)(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>) &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>;<span class="comment">//继承（多态） </span></span><br><span class="line">        <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; bind(B::funcS, <span class="number">123</span>)() &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>;<span class="comment">//static函数 </span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>;<span class="comment">//仿函数 </span></span><br><span class="line">    &#123;</span><br><span class="line">        Func0 f0;</span><br><span class="line">        <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; bind(&amp;f0)() &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>;</span><br><span class="line">        Func1 f1;</span><br><span class="line">        <span class="built_in">std</span>::<span class="function"><span class="built_in">string</span> <span class="title">s</span><span class="params">(<span class="string">"Hello Bind!"</span>)</span></span>;</span><br><span class="line">        <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; simple::bind(f1, <span class="built_in">std</span>::ref(s))() &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>; <span class="comment">// avoids ADL// ? </span></span><br><span class="line">        Func2 f2;</span><br><span class="line">        <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; bind(f2)() &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>;<span class="comment">//特殊定义了的函数 </span></span><br><span class="line">    &#123;</span><br><span class="line">        UncopyableFunc ff;</span><br><span class="line">        <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; bind(<span class="built_in">std</span>::move(ff))() &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//////////////////////////////////////////////////////////////////////////</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    test_result_traits();</span><br><span class="line">    test_fr();</span><br><span class="line">    test_bind();</span><br><span class="line">    TEST_CASE(&lt;&lt; <span class="string">"Finished!"</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> c++ </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>c++函数（1）</title>
      <link href="/2018/10/27/c-%E5%87%BD%E6%95%B0%EF%BC%881%EF%BC%89/"/>
      <url>/2018/10/27/c-%E5%87%BD%E6%95%B0%EF%BC%881%EF%BC%89/</url>
      
        <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>本人一向很水，但看在我立了flag的缘故，不得不收起惰性，忍受着谜之网速和极其明显的作业做不完的凉凉之感，在此为大家写。作为第二次，谨此纪念。<br>本篇为了体现我不是一个水货（虽然事实上就是），将讨论得深一点。</p><a id="more"></a><h2 id="正文"><a href="#正文" class="headerlink" title="正文"></a>正文</h2><p>先快速过一下基础知识。。。</p><h3 id="函数模板"><a href="#函数模板" class="headerlink" title="函数模板"></a>函数模板</h3><p>函数模板作为函数重载的“高级”版本，事实上作用早就超出了一般的重载。比如一个巧妙地获取数组长度的函数<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">template</span>&lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>,<span class="title">size_t</span> <span class="title">N</span>&gt;</span></span><br><span class="line"><span class="class"><span class="title">size_t</span> <span class="title">len</span>(<span class="title">const</span> <span class="title">T</span> (&amp;<span class="title">arr</span>)[<span class="title">N</span>])&#123;</span></span><br><span class="line"><span class="keyword">return</span> N;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>它可以获取所有一般数组（不包括自定义容器），但在面对string等时有一个小bug（末尾有一个‘\n’,而很明显我们并不想算入数组长度），所以需要一个特例化的模板。<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">size_t</span> N&gt;</span><br><span class="line"><span class="keyword">size_t</span> len(<span class="keyword">const</span> <span class="keyword">char</span> (&amp;arr)[N])&#123;</span><br><span class="line"><span class="keyword">return</span> N<span class="number">-1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>大功告成。<del> 事实上，对任意容器，应该也可以用类似的办法获取长度（用迭代器？） </del>。还好检查了一下，以上程序不使用于char* 和任意非数组类型。用迭代的方法取长度怪怪的，虽然容器类大多都有迭代器。<br>可参考<a href="https://blog.csdn.net/lezardfu/article/details/56852043" target="_blank" rel="noopener">https://blog.csdn.net/lezardfu/article/details/56852043</a></p><h3 id="类模板"><a href="#类模板" class="headerlink" title="类模板"></a>类模板</h3><p>与函数模板很像，只不过更加好玩。它可以传入常量参数，所以说它诞生了一个毁青春的东西，模板元编程。</p><h3 id="模板元（搞笑的）"><a href="#模板元（搞笑的）" class="headerlink" title="模板元（搞笑的）"></a>模板元（搞笑的）</h3><p>可参考:</p><ul><li><a href="https://www.cnblogs.com/qicosmos/p/4480460.html" target="_blank" rel="noopener">https://www.cnblogs.com/qicosmos/p/4480460.html</a></li><li>一本书,<a href="https://pan.baidu.com/s/1koS_qOHH0gNdiSH-V_J7mQ" title="下载pdf" target="_blank" rel="noopener">模板元编程</a></li></ul><h3 id="函数指针"><a href="#函数指针" class="headerlink" title="函数指针"></a>函数指针</h3><p>实在没什么说的，上代码。<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">foo</span><span class="params">(<span class="keyword">int</span> a,<span class="keyword">int</span> b)</span></span>&#123;&#125;;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">bar</span>&#123;</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">a</span><span class="params">(<span class="keyword">int</span> b)</span></span>&#123;&#125;;</span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">g</span><span class="params">(<span class="keyword">int</span> b)</span></span>&#123;&#125;;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">typedef</span> <span class="title">int</span><span class="params">(*pfn1)</span><span class="params">(<span class="keyword">int</span>,<span class="keyword">int</span>)</span></span>;</span><br><span class="line"><span class="comment">//通式： 返回类型（*变量名）（参数列表）= 函数名 //可不加 &amp;</span></span><br><span class="line"><span class="comment">//通式2： 返回类型（*命名空间::变量名）（参数列表）= &amp;命名空间::函数名 //必须有 &amp;</span></span><br><span class="line"><span class="keyword">int</span>(*pfn2)(<span class="keyword">int</span>,<span class="keyword">int</span>) =foo;</span><br><span class="line"><span class="comment">//= pfn1 pfn2=foo</span></span><br><span class="line"><span class="keyword">int</span>(*bar::pfn3)(<span class="keyword">int</span>)=&amp;bar::a;</span><br><span class="line"><span class="keyword">void</span>(*pfn4)(<span class="keyword">int</span>)=bar::g;<span class="comment">//static 相当于独立于类之外</span></span><br><span class="line">bar test;</span><br><span class="line">(*test.pfn3)(<span class="number">1</span>);<span class="comment">//使用必须有一个实例</span></span><br><span class="line">pfn4(<span class="number">5</span>);<span class="comment">//static 不用</span></span><br></pre></td></tr></table></figure></p><p>注意几点</p><ol><li>指针的正确书写</li><li>正确使用</li></ol><p>可参考：<br><a href="https://blog.csdn.net/u010525694/article/details/72897766" target="_blank" rel="noopener">https://blog.csdn.net/u010525694/article/details/72897766</a></p><p>开始秀起来了</p><h3 id="仿函数-functor"><a href="#仿函数-functor" class="headerlink" title="仿函数 functor"></a>仿函数 functor</h3><p>所谓仿函数，并不复杂，仅仅是一个实现了 operator() 的类罢了。但还是会给编程带了很多便利，例如<a href="https://www.cnblogs.com/decade-dnbc66/p/5347088.html" title="感谢原作者" target="_blank" rel="noopener">count_if</a>。<br>若想深究，可自行搜索，此处不再赘述。<br>可参考：<br><a href="https://blog.csdn.net/yansmile1/article/details/58603871" target="_blank" rel="noopener">https://blog.csdn.net/yansmile1/article/details/58603871</a></p><h3 id="c-11-可变模板参数"><a href="#c-11-可变模板参数" class="headerlink" title="c++11 可变模板参数"></a>c++11 可变模板参数</h3><p>这是一个好东西啊。本人长期信奉c++11大法，因为它太好用了。目前我才摸着边边，所以以下如果有错，别找我。<br>c++11大大加大了程序的泛化程度，有的程序因此变得更像程序，而有的，呵呵<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//某坑爹tuple</span></span><br><span class="line"><span class="comment">//转载于 http://www.cnblogs.com/qicosmos/p/3318070.html</span></span><br><span class="line"><span class="comment">//你认为我这个蒟蒻能和那些神犇比吗？不可能的。</span></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="class"><span class="keyword">class</span> <span class="title">Tuple</span>, <span class="title">std</span>:</span>:<span class="keyword">size_t</span> N&gt;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">TuplePrinter</span> &#123;</span></span><br><span class="line">    <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">print</span><span class="params">(<span class="keyword">const</span> Tuple&amp; t)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        TuplePrinter&lt;Tuple, N - <span class="number">1</span>&gt;::print(t);</span><br><span class="line">        <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">", "</span> &lt;&lt; <span class="built_in">std</span>::get&lt;N - <span class="number">1</span>&gt;(t);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="class"><span class="keyword">class</span> <span class="title">Tuple</span>&gt;</span></span><br><span class="line"><span class="class"><span class="title">struct</span> <span class="title">TuplePrinter</span>&lt;Tuple, 1&gt;&#123;</span></span><br><span class="line">    <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">print</span><span class="params">(<span class="keyword">const</span> Tuple&amp; t)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="built_in">std</span>::get&lt;<span class="number">0</span>&gt;(t);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="class"><span class="keyword">class</span>... <span class="title">Args</span>&gt;</span></span><br><span class="line"><span class="class"><span class="title">void</span> <span class="title">PrintTuple</span>(<span class="title">const</span> <span class="title">std</span>:</span>:tuple&lt;Args...&gt;&amp; t)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">"("</span>;</span><br><span class="line">    TuplePrinter&lt;<span class="keyword">decltype</span>(t), <span class="keyword">sizeof</span>...(Args)&gt;::print(t);</span><br><span class="line">    <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">")\n"</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//main</span></span><br><span class="line"><span class="keyword">auto</span> tp=make_tuple(<span class="number">1</span>,<span class="number">2</span>,<span class="number">12.5</span>);</span><br><span class="line">PrintTuple(tp);</span><br><span class="line"><span class="comment">// (1,2,12.5)</span></span><br></pre></td></tr></table></figure></p><p>c里面也有类似的，但不如这个好用。展开可变模板的方式很多。但我们要讲的不是这个。</p><h3 id="匿名函数-lamba"><a href="#匿名函数-lamba" class="headerlink" title="匿名函数 lamba"></a>匿名函数 lamba</h3><p>匿名函数也是个好东西，用没用过js的都知道。<br>它也有结构通式。<code>[捕获列表]（参数列表）-&gt;返回值{函数主体}</code>，其中返回值也可以自动推断，前提是计算量简单。捕获列表是个比较有趣的东西，因为它可以准确捕获外界变量。有些时候lamba也会和闭包（closure）（具体了解参见<a href="https://www.cnblogs.com/BigFeng/p/5204899.html" target="_blank" rel="noopener">https://www.cnblogs.com/BigFeng/p/5204899.html</a>）.<br>此处仍然不会详细讲，可参考<a href="https://www.cnblogs.com/DswCnblog/p/5629165.html" target="_blank" rel="noopener">https://www.cnblogs.com/DswCnblog/p/5629165.html</a>。</p><h3 id="c-11-function对象"><a href="#c-11-function对象" class="headerlink" title="c++11 function对象"></a>c++11 function对象</h3><p>终于，广大人民对函数指针的深恶痛绝终于转换成了无限的动力，<del>从此终于再也不用写函数指针了！</del><br>社会的进步就是在于抛弃旧的，迎接新的。看一下可爱的function对象吧。<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//#include&lt;functional&gt;</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">foo</span><span class="params">(<span class="keyword">int</span> a,<span class="keyword">int</span> b)</span></span>&#123;&#125;;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">bar</span>&#123;</span></span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">a</span><span class="params">(<span class="keyword">int</span> b)</span></span>&#123;&#125;;</span><br><span class="line">    <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">g</span><span class="params">(<span class="keyword">int</span> b)</span></span>&#123;&#125;;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">F</span>&#123;</span><span class="comment">//functor</span></span><br><span class="line"><span class="keyword">int</span> sum=<span class="number">0</span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">operator</span><span class="params">()</span><span class="params">(<span class="keyword">int</span> a)</span></span>&#123;</span><br><span class="line">sum+=a;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//int(*pfn2)(int,int) =foo;</span></span><br><span class="line">function&lt;<span class="keyword">int</span>(<span class="keyword">int</span>,<span class="keyword">int</span>)&gt; pfn2=foo;<span class="comment">//简不简单？</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//int(*bar::pfn3)(int)=&amp;bar::a;</span></span><br><span class="line">function&lt;<span class="keyword">int</span>(<span class="keyword">const</span> bar&amp;,<span class="keyword">int</span>)&gt; pfn3=&amp;bar::a;<span class="comment">//注意要传入一个实例作为函数中的this</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//void(*pfn4)(int)=bar::g;</span></span><br><span class="line">function&lt;<span class="keyword">void</span>(<span class="keyword">int</span>)&gt; pfn4=bar::g;</span><br><span class="line"></span><br><span class="line">bar test;</span><br><span class="line">pfn2();</span><br><span class="line"><span class="comment">//(*test.pfn3)(1);</span></span><br><span class="line">pfn3(test,<span class="number">1</span>);<span class="comment">//明显更加直观了，简洁了</span></span><br><span class="line">pfn4(<span class="number">5</span>);</span><br><span class="line"></span><br><span class="line">F f;</span><br><span class="line">function&lt;<span class="keyword">void</span>(<span class="keyword">int</span>)&gt; fn=f;</span><br><span class="line">fn(<span class="number">10</span>);<span class="comment">//发现sum值并没有改变，function按值传递</span></span><br><span class="line"><span class="comment">//如果要改变，则应为</span></span><br><span class="line"><span class="comment">//function&lt;void(int)&gt; fn=ref(reference_wrapper&lt;F&gt;(f));//ref_warp可以不用</span></span><br></pre></td></tr></table></figure></p><p>可参考：<a href="https://www.cnblogs.com/yyxt/p/3987717.html" target="_blank" rel="noopener">https://www.cnblogs.com/yyxt/p/3987717.html</a></p><h3 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h3><p>深感力不从心ing。还有一点，下次再来吧。这次先到此为止。下次大概是bind和functional的个人解读，可能还有其它的。最后还是感谢各位神犇的大力支持，感谢文中出现过或默默无闻的其他文章作者们。最后加一个链接<a href="https://github.com/shihaipeng/hello-world/blob/master/c%2B%2B%E5%87%BD%E6%95%B0%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0.cpp" title="很水的..." target="_blank" rel="noopener">个人学习笔记</a>.</p>]]></content>
      
      
      <categories>
          
          <category> 笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> c++ </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>python学习之路-1</title>
      <link href="/2018/10/20/python%E5%AD%A6%E4%B9%A0%E4%B9%8B%E8%B7%AF-1/"/>
      <url>/2018/10/20/python%E5%AD%A6%E4%B9%A0%E4%B9%8B%E8%B7%AF-1/</url>
      
        <content type="html"><![CDATA[<h4 id="无敌懒的石海鹏终于动笔了。"><a href="#无敌懒的石海鹏终于动笔了。" class="headerlink" title="无敌懒的石海鹏终于动笔了。"></a>无敌懒的石海鹏终于动笔了。</h4><p>有这么一些日子里，我十分堕落，但正如古话所言，感谢那些将我击倒的人，躺着真舒服。我是万万没想到我竟然又回到了科大实验这个<del>屠宰场</del>学习圣地。我无限堕落了快一个月，在一个月以来，我几乎就没有学习过，更别提什么编程了，结果这次月考竟然凭如此惨不忍睹的成绩都能排前三，<del>为这个年级的前途担忧ing…</del>。</p><p>有一天，终于有人找我学编程了，于是我便盘算着写了这么一篇。我还想录视频的，因为视频讲得清楚，但还是没有那个勇气 <del>主要是太尴尬了</del>。</p><p>所以，开始我们的编程<del>哲学</del>之旅吧。</p><a id="more"></a><h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><p><a href="https://www.python.org/" title="python.org" target="_blank" rel="noopener">官网</a>下载，下载安装包就可以了（因为安装包会自动下载pip，而压缩文件中没有）。推荐科学上网下载（快一点）。下载2.x或3.x都行，无所谓的。官网不行找网盘，网盘不行我还有个<a href="https://pan.baidu.com/s/1QnzqvV6ekLupfu1eTRzzkg" target="_blank" rel="noopener">备份</a>。安装的话有什么点什么，反正加起来才30mb，装在C盘没问题。重要的事情再说一遍，pip一定要安装。以后有大用。</p><h3 id="更改"><a href="#更改" class="headerlink" title="更改"></a>更改</h3><p>在适当<a href="https://blog.csdn.net/darkfour/article/details/78191979" title="某不知名网站" target="_blank" rel="noopener">调教</a>之前pip是一个坑。原因是她下载总是超时（对此她也很无奈，谁让有一个墙在那里）。顺便提醒，<ins>在下面文件夹下<strong>建立</strong>一个pip文件夹C:\Users\Administrator\AppData\Roaming</ins>，而且这个AppData文件夹挺难找的（“查看”-&gt;显示隐藏项目）。附几个pip<a href="https://blog.csdn.net/yang889999888/article/details/77594486" target="_blank" rel="noopener">用法</a>。</p><h3 id="开始"><a href="#开始" class="headerlink" title="开始"></a>开始</h3><p>最标准的hello world又来了。。。<br>cmd-&gt;输入python-&gt;输入python语句-&gt;Ctrl+C退出。<br><img src="1.png" title="超级简单有没有"></p><h3 id="最后说一点"><a href="#最后说一点" class="headerlink" title="最后说一点"></a>最后说一点</h3><p>编程靠自觉，靠自学。实话说，我就是个水货。python我懂得不多，但带一个人入门还是可以的。<br>python也可以网页在线编译，搜索“python 在线运行”。就这样了。</p>]]></content>
      
      
      <categories>
          
          <category> 教程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>论科学上网</title>
      <link href="/2018/10/01/%E8%AE%BA%E7%A7%91%E5%AD%A6%E4%B8%8A%E7%BD%91/"/>
      <url>/2018/10/01/%E8%AE%BA%E7%A7%91%E5%AD%A6%E4%B8%8A%E7%BD%91/</url>
      
        <content type="html"><![CDATA[<p>科学上网是个很不科学的东西，当然，有一些工具会使你如虎添翼。</p><ul><li>setupVPN</li><li>baacloud（有点坑，但还是半免费的）</li></ul><p>更多的自己搜，某个网站叫翻个墙，可以借鉴；某个下载chrome插件的<a href="https://www.crx4chrome.com/" target="_blank" rel="noopener">https://www.crx4chrome.com/</a>，也是个好东西。</p>]]></content>
      
      
      <categories>
          
          <category> 编程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 随笔 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>更新说明</title>
      <link href="/2018/08/03/%E6%9B%B4%E6%96%B0%E8%AF%B4%E6%98%8E/"/>
      <url>/2018/08/03/%E6%9B%B4%E6%96%B0%E8%AF%B4%E6%98%8E/</url>
      
        <content type="html"><![CDATA[<p>###声明<br>最近我实在是有点迷茫，因为我几乎从没有认真按计划完成过我自己指定的任何一个任务。<br>我感觉我基本要活在自己幻想的世界里了。做什么做到一半就放弃都要成为我的人设了，但至少这还没有发生。<br>现在在预定工期的第三天，汇报一下成果：</p><ol><li>看板娘设计成功</li><li>提高了访问速度<br>就这些了。<br>鉴于我目前无法在七牛实名认证，现所有的图片存储在堆糖中（才不会是在推荐你存图片的地方呢￣へ￣）<br>顺便推荐一个js代码的网站：<a href="http://www.17sucai.com/" target="_blank" rel="noopener">http://www.17sucai.com/</a>，可谓业界良心（我才不会告诉你按F12就能把代码搞到手呢。。是的哦）<br>不过看在上天的份子上多攒人品(～￣▽￣)～</li></ol>]]></content>
      
      
      <categories>
          
          <category> 网页 素材 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 随笔 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>hexo第一课</title>
      <link href="/2018/02/10/hexo%E7%AC%AC%E4%B8%80%E8%AF%BE/"/>
      <url>/2018/02/10/hexo%E7%AC%AC%E4%B8%80%E8%AF%BE/</url>
      
        <content type="html"><![CDATA[<html><br><head><meta name="generator" content="Hexo 3.8.0"><br>    <meta charset="utf-8"><br>    <style type="text/css"><br>        p{<br>            text-indent: 2em;<br>        }<br>    </style><br></head><br><body><br>    <h1>用hexo搭建一个私人博客（1）</h1><br>    <h3>1.什么是hexo</h3><br>    <p>hexo是一个轻量级的博客框架，相较于其他博客框架，它更加灵活，也更能满足个人的定制欲望缺点自然也是有的，它的组件还不成熟，如评论和目录等还需要第三方的程序实现。如果你比较喜欢社交，那么如新浪微博可能更加适合你，但如果你喜欢独立自主，又爱编程，那么hexo还是一个不错的选择</p><br><br>    <h3>2.如何配置环境</h3><br>    <p>下载git，node.js等需要的环境，可参照<a href="https://hexo.io/zh-cn/docs/" alt="帮助文档" target="_blank">https://hexo.io/zh-cn/docs/</a></p><br><br>    <h3>3.如何开始</h3><br>    <p>按照文档的说明，在随便哪个地方运行hexo init &lt;随便一个名字&gt;,cd &lt;名字&gt;（进入文件夹）,npm install（安装npm环境）</p><br>    <p>如我想建在D盘</p><br>    <p>打开cmd,进入指定文件夹</p><br>    <p>按照指定的步骤执行</p><br>    <p>以下省略</p><br><br>    <h3>4.如何创建文章</h3><br>    <p>个人推荐：直接在/source/_post/中建立一个文本名为.md的文档，建议直接用html编写（原本hexo的一大亮点就在于支持Markdown语法—一个苹果程序员闲的蛋疼搞得）</p><br><br>    <h3>5.如何配置信息</h3><br>    <p>在两个地方配置，一是根目录下的_config.yml，二是themes下你选的主题的_config.yml</p><br>    <img src="1.png" title="theme设置主题，值为themes中主题的文件夹名；depoly设置仓库，也就是网站上线的配置信息"><br>    <p>中国在网站上有极大发言权，一般好看的主题都是made in China，所以也就更好配置了</p><br><br>    <h3>6.总结</h3><br>    <p>我才发现打文章这么累，看来下次你想干什么我还是发视频吧。这一点还没有完，至少这个博客还没有上线。上线推荐用github，毕竟免费。好累呀，不多说了</p><br></body><br></html>]]></content>
      
      
      <categories>
          
          <category> 网页 框架 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> hexo </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
